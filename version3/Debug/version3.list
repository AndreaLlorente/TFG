
version3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cb0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f4c  08002f4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f4c  08002f4c  00012f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f54  08002f54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08002f68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002f68  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000086c6  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001705  00000000  00000000  00028745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  00029e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000053d  00000000  00000000  0002a528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ed1  00000000  00000000  0002aa65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000099c4  00000000  00000000  0004b936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7e8a  00000000  00000000  000552fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ab4  00000000  00000000  0011d184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0011ec38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002e5c 	.word	0x08002e5c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002e5c 	.word	0x08002e5c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <BucleMIDI>:


uint8_t pulsado_anterior1[16] = {0};
uint8_t pulsado_anterior2[16] = {0};

void BucleMIDI(){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
	for (uint8_t control=0; control<16; control++){ //Recorro 16 valores de control del mux: 0000 0000 hasta 0000 1111
 8000506:	2300      	movs	r3, #0
 8000508:	71fb      	strb	r3, [r7, #7]
 800050a:	e052      	b.n	80005b2 <BucleMIDI+0xb2>
		uint8_t pulsado = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	71bb      	strb	r3, [r7, #6]
		pulsado = IdentifyNote(control); //Por cada valor de control del Mux compruebo la entrada del Mux
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	4618      	mov	r0, r3
 8000514:	f000 f85a 	bl	80005cc <IdentifyNote>
 8000518:	4603      	mov	r3, r0
 800051a:	71bb      	strb	r3, [r7, #6]
		if (pulsado & 0x01){ //compruebo si en la fila 1 (entrada) se ha pulsado
 800051c:	79bb      	ldrb	r3, [r7, #6]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	2b00      	cmp	r3, #0
 8000524:	d00c      	beq.n	8000540 <BucleMIDI+0x40>
			if (pulsado_anterior1[control] != 1){
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	4a26      	ldr	r2, [pc, #152]	; (80005c4 <BucleMIDI+0xc4>)
 800052a:	5cd3      	ldrb	r3, [r2, r3]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d007      	beq.n	8000540 <BucleMIDI+0x40>
				Send_MIDINoteOn_1(control);
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f8ca 	bl	80006cc <Send_MIDINoteOn_1>
				pulsado_anterior1[control] = 1;
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	4a22      	ldr	r2, [pc, #136]	; (80005c4 <BucleMIDI+0xc4>)
 800053c:	2101      	movs	r1, #1
 800053e:	54d1      	strb	r1, [r2, r3]
			}
		}
		if (!(pulsado & 0x01)){ //compruebo si en la fila 1 (entrada) se ha dejado de pulsar
 8000540:	79bb      	ldrb	r3, [r7, #6]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	2b00      	cmp	r3, #0
 8000548:	d10c      	bne.n	8000564 <BucleMIDI+0x64>
			if (pulsado_anterior1[control] == 1){
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4a1d      	ldr	r2, [pc, #116]	; (80005c4 <BucleMIDI+0xc4>)
 800054e:	5cd3      	ldrb	r3, [r2, r3]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d107      	bne.n	8000564 <BucleMIDI+0x64>
				Send_MIDINoteOff_1(control);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 f9c6 	bl	80008e8 <Send_MIDINoteOff_1>
				pulsado_anterior1[control] = 0;
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	4a19      	ldr	r2, [pc, #100]	; (80005c4 <BucleMIDI+0xc4>)
 8000560:	2100      	movs	r1, #0
 8000562:	54d1      	strb	r1, [r2, r3]
			}
		}
		if (pulsado & 0x02){ //compruebo si en la fila 1 (entrada) se ha pulsado
 8000564:	79bb      	ldrb	r3, [r7, #6]
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	2b00      	cmp	r3, #0
 800056c:	d00c      	beq.n	8000588 <BucleMIDI+0x88>
			if (pulsado_anterior2[control] != 1){
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	4a15      	ldr	r2, [pc, #84]	; (80005c8 <BucleMIDI+0xc8>)
 8000572:	5cd3      	ldrb	r3, [r2, r3]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d007      	beq.n	8000588 <BucleMIDI+0x88>
				Send_MIDINoteOn_2(control);
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fac2 	bl	8000b04 <Send_MIDINoteOn_2>
				pulsado_anterior2[control] = 1;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <BucleMIDI+0xc8>)
 8000584:	2101      	movs	r1, #1
 8000586:	54d1      	strb	r1, [r2, r3]
			}
		}
		if (!(pulsado & 0x02)){ //compruebo si en la fila 2 (entrada) se ha dejado de pulsar
 8000588:	79bb      	ldrb	r3, [r7, #6]
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	2b00      	cmp	r3, #0
 8000590:	d10c      	bne.n	80005ac <BucleMIDI+0xac>
			if (pulsado_anterior2[control] == 1){
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <BucleMIDI+0xc8>)
 8000596:	5cd3      	ldrb	r3, [r2, r3]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d107      	bne.n	80005ac <BucleMIDI+0xac>
				Send_MIDINoteOff_2(control);
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fbbe 	bl	8000d20 <Send_MIDINoteOff_2>
				pulsado_anterior2[control] = 0;
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <BucleMIDI+0xc8>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	54d1      	strb	r1, [r2, r3]
	for (uint8_t control=0; control<16; control++){ //Recorro 16 valores de control del mux: 0000 0000 hasta 0000 1111
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	3301      	adds	r3, #1
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b0f      	cmp	r3, #15
 80005b6:	d9a9      	bls.n	800050c <BucleMIDI+0xc>
			}
		}
	}
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000028 	.word	0x20000028
 80005c8:	20000038 	.word	0x20000038

080005cc <IdentifyNote>:

uint8_t IdentifyNote(uint8_t control){ //Comprobar la entrada del MUX (2 entradas)
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	WriteControl(control);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f82b 	bl	8000634 <WriteControl>
	HAL_Delay(0.015); //30 ns
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 ff96 	bl	8001510 <HAL_Delay>
	uint8_t pulsado = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	73fb      	strb	r3, [r7, #15]
	uint8_t pulsado1 = false;
 80005e8:	2300      	movs	r3, #0
 80005ea:	73bb      	strb	r3, [r7, #14]
	uint8_t pulsado2 = false;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
	pulsado1 = HAL_GPIO_ReadPin(GPIOA, I1_Pin);  //Comprobar si se ha pulsado una nota en la fila 1
 80005f0:	2101      	movs	r1, #1
 80005f2:	480f      	ldr	r0, [pc, #60]	; (8000630 <IdentifyNote+0x64>)
 80005f4:	f001 fa2a 	bl	8001a4c <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	73bb      	strb	r3, [r7, #14]
	pulsado2 = HAL_GPIO_ReadPin(GPIOA, I2_Pin); //Comprobar si se ha pulsado una nota en la fila 2
 80005fc:	2102      	movs	r1, #2
 80005fe:	480c      	ldr	r0, [pc, #48]	; (8000630 <IdentifyNote+0x64>)
 8000600:	f001 fa24 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	737b      	strb	r3, [r7, #13]
	pulsado = ((pulsado1 & 0x01) | (pulsado2<<1 & 0x02));
 8000608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	b25a      	sxtb	r2, r3
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	b25b      	sxtb	r3, r3
 8000618:	f003 0302 	and.w	r3, r3, #2
 800061c:	b25b      	sxtb	r3, r3
 800061e:	4313      	orrs	r3, r2
 8000620:	b25b      	sxtb	r3, r3
 8000622:	73fb      	strb	r3, [r7, #15]
	return pulsado;
 8000624:	7bfb      	ldrb	r3, [r7, #15]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40020000 	.word	0x40020000

08000634 <WriteControl>:

void WriteControl(uint8_t control){ //Escribir en el gpio correspondiente los valores de control del MUX
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
	uint8_t S0 = control & 0x01; //0000 0001
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	f003 0301 	and.w	r3, r3, #1
 8000644:	73fb      	strb	r3, [r7, #15]
	uint8_t S1 = control & 0x02; //0000 0010
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	f003 0302 	and.w	r3, r3, #2
 800064c:	73bb      	strb	r3, [r7, #14]
	uint8_t S2 = control & 0x04; //0000 0100
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 0304 	and.w	r3, r3, #4
 8000654:	737b      	strb	r3, [r7, #13]
	uint8_t S3 = control & 0x08; //0000 1000
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 0308 	and.w	r3, r3, #8
 800065c:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, S0_Pin, S0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	2b00      	cmp	r3, #0
 8000662:	bf14      	ite	ne
 8000664:	2301      	movne	r3, #1
 8000666:	2300      	moveq	r3, #0
 8000668:	b2db      	uxtb	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000670:	4814      	ldr	r0, [pc, #80]	; (80006c4 <WriteControl+0x90>)
 8000672:	f001 fa03 	bl	8001a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, S1_Pin, S1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000676:	7bbb      	ldrb	r3, [r7, #14]
 8000678:	2b00      	cmp	r3, #0
 800067a:	bf14      	ite	ne
 800067c:	2301      	movne	r3, #1
 800067e:	2300      	moveq	r3, #0
 8000680:	b2db      	uxtb	r3, r3
 8000682:	461a      	mov	r2, r3
 8000684:	2120      	movs	r1, #32
 8000686:	4810      	ldr	r0, [pc, #64]	; (80006c8 <WriteControl+0x94>)
 8000688:	f001 f9f8 	bl	8001a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, S2_Pin, S2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800068c:	7b7b      	ldrb	r3, [r7, #13]
 800068e:	2b00      	cmp	r3, #0
 8000690:	bf14      	ite	ne
 8000692:	2301      	movne	r3, #1
 8000694:	2300      	moveq	r3, #0
 8000696:	b2db      	uxtb	r3, r3
 8000698:	461a      	mov	r2, r3
 800069a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800069e:	480a      	ldr	r0, [pc, #40]	; (80006c8 <WriteControl+0x94>)
 80006a0:	f001 f9ec 	bl	8001a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, S3_Pin, S3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006a4:	7b3b      	ldrb	r3, [r7, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	bf14      	ite	ne
 80006aa:	2301      	movne	r3, #1
 80006ac:	2300      	moveq	r3, #0
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b6:	4803      	ldr	r0, [pc, #12]	; (80006c4 <WriteControl+0x90>)
 80006b8:	f001 f9e0 	bl	8001a7c <HAL_GPIO_WritePin>
}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40020000 	.word	0x40020000
 80006c8:	40020400 	.word	0x40020400

080006cc <Send_MIDINoteOn_1>:

void Send_MIDINoteOn_1(uint8_t control){ //Enviar código MIDI NoteOn de la fila 1 correspondiente a cada nota en funcion del codigo de control
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08e      	sub	sp, #56	; 0x38
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
	//Mensajes de MIDI NoteON: canal MIDI 1, octava 3 y valocidad máxima
	uint8_t MIDI_C3[3] = {0x90, 0x30, 0x7F};
 80006d6:	4a77      	ldr	r2, [pc, #476]	; (80008b4 <Send_MIDINoteOn_1+0x1e8>)
 80006d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006dc:	6812      	ldr	r2, [r2, #0]
 80006de:	4611      	mov	r1, r2
 80006e0:	8019      	strh	r1, [r3, #0]
 80006e2:	3302      	adds	r3, #2
 80006e4:	0c12      	lsrs	r2, r2, #16
 80006e6:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Csos3[3] = {0x90, 0x31, 0x7F};
 80006e8:	4a73      	ldr	r2, [pc, #460]	; (80008b8 <Send_MIDINoteOn_1+0x1ec>)
 80006ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ee:	6812      	ldr	r2, [r2, #0]
 80006f0:	4611      	mov	r1, r2
 80006f2:	8019      	strh	r1, [r3, #0]
 80006f4:	3302      	adds	r3, #2
 80006f6:	0c12      	lsrs	r2, r2, #16
 80006f8:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_D3[3] = {0x90, 0x32, 0x7F};
 80006fa:	4a70      	ldr	r2, [pc, #448]	; (80008bc <Send_MIDINoteOn_1+0x1f0>)
 80006fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000700:	6812      	ldr	r2, [r2, #0]
 8000702:	4611      	mov	r1, r2
 8000704:	8019      	strh	r1, [r3, #0]
 8000706:	3302      	adds	r3, #2
 8000708:	0c12      	lsrs	r2, r2, #16
 800070a:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Dsos3[3] = {0x90, 0x33, 0x7F};
 800070c:	4a6c      	ldr	r2, [pc, #432]	; (80008c0 <Send_MIDINoteOn_1+0x1f4>)
 800070e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000712:	6812      	ldr	r2, [r2, #0]
 8000714:	4611      	mov	r1, r2
 8000716:	8019      	strh	r1, [r3, #0]
 8000718:	3302      	adds	r3, #2
 800071a:	0c12      	lsrs	r2, r2, #16
 800071c:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_E3[3] = {0x90, 0x34, 0x7F};
 800071e:	4a69      	ldr	r2, [pc, #420]	; (80008c4 <Send_MIDINoteOn_1+0x1f8>)
 8000720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000724:	6812      	ldr	r2, [r2, #0]
 8000726:	4611      	mov	r1, r2
 8000728:	8019      	strh	r1, [r3, #0]
 800072a:	3302      	adds	r3, #2
 800072c:	0c12      	lsrs	r2, r2, #16
 800072e:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_F3[3] = {0x90, 0x35, 0x7F};
 8000730:	4a65      	ldr	r2, [pc, #404]	; (80008c8 <Send_MIDINoteOn_1+0x1fc>)
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	6812      	ldr	r2, [r2, #0]
 8000738:	4611      	mov	r1, r2
 800073a:	8019      	strh	r1, [r3, #0]
 800073c:	3302      	adds	r3, #2
 800073e:	0c12      	lsrs	r2, r2, #16
 8000740:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Fsos3[3] = {0x90, 0x36, 0x7F};
 8000742:	4a62      	ldr	r2, [pc, #392]	; (80008cc <Send_MIDINoteOn_1+0x200>)
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	6812      	ldr	r2, [r2, #0]
 800074a:	4611      	mov	r1, r2
 800074c:	8019      	strh	r1, [r3, #0]
 800074e:	3302      	adds	r3, #2
 8000750:	0c12      	lsrs	r2, r2, #16
 8000752:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_G3[3] = {0x90, 0x37, 0x7F};
 8000754:	4a5e      	ldr	r2, [pc, #376]	; (80008d0 <Send_MIDINoteOn_1+0x204>)
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	6812      	ldr	r2, [r2, #0]
 800075c:	4611      	mov	r1, r2
 800075e:	8019      	strh	r1, [r3, #0]
 8000760:	3302      	adds	r3, #2
 8000762:	0c12      	lsrs	r2, r2, #16
 8000764:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Gsos3[3] = {0x90, 0x38, 0x7F};
 8000766:	4a5b      	ldr	r2, [pc, #364]	; (80008d4 <Send_MIDINoteOn_1+0x208>)
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	6812      	ldr	r2, [r2, #0]
 800076e:	4611      	mov	r1, r2
 8000770:	8019      	strh	r1, [r3, #0]
 8000772:	3302      	adds	r3, #2
 8000774:	0c12      	lsrs	r2, r2, #16
 8000776:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_A3[3] = {0x90, 0x39, 0x7F};
 8000778:	4a57      	ldr	r2, [pc, #348]	; (80008d8 <Send_MIDINoteOn_1+0x20c>)
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	6812      	ldr	r2, [r2, #0]
 8000780:	4611      	mov	r1, r2
 8000782:	8019      	strh	r1, [r3, #0]
 8000784:	3302      	adds	r3, #2
 8000786:	0c12      	lsrs	r2, r2, #16
 8000788:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Asos3[3] = {0x90, 0x3A, 0x7F};
 800078a:	4a54      	ldr	r2, [pc, #336]	; (80008dc <Send_MIDINoteOn_1+0x210>)
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	6812      	ldr	r2, [r2, #0]
 8000792:	4611      	mov	r1, r2
 8000794:	8019      	strh	r1, [r3, #0]
 8000796:	3302      	adds	r3, #2
 8000798:	0c12      	lsrs	r2, r2, #16
 800079a:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_B3[3] = {0x90, 0x3B, 0x7F};
 800079c:	4a50      	ldr	r2, [pc, #320]	; (80008e0 <Send_MIDINoteOn_1+0x214>)
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	6812      	ldr	r2, [r2, #0]
 80007a4:	4611      	mov	r1, r2
 80007a6:	8019      	strh	r1, [r3, #0]
 80007a8:	3302      	adds	r3, #2
 80007aa:	0c12      	lsrs	r2, r2, #16
 80007ac:	701a      	strb	r2, [r3, #0]

	switch (control)
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b0b      	cmp	r3, #11
 80007b2:	d87b      	bhi.n	80008ac <Send_MIDINoteOn_1+0x1e0>
 80007b4:	a201      	add	r2, pc, #4	; (adr r2, 80007bc <Send_MIDINoteOn_1+0xf0>)
 80007b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ba:	bf00      	nop
 80007bc:	080007ed 	.word	0x080007ed
 80007c0:	080007fd 	.word	0x080007fd
 80007c4:	0800080d 	.word	0x0800080d
 80007c8:	0800081d 	.word	0x0800081d
 80007cc:	0800082d 	.word	0x0800082d
 80007d0:	0800083d 	.word	0x0800083d
 80007d4:	0800084d 	.word	0x0800084d
 80007d8:	0800085d 	.word	0x0800085d
 80007dc:	0800086d 	.word	0x0800086d
 80007e0:	0800087d 	.word	0x0800087d
 80007e4:	0800088d 	.word	0x0800088d
 80007e8:	0800089d 	.word	0x0800089d
	{
	case 0:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_C3, 3, 100);
 80007ec:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80007f0:	2364      	movs	r3, #100	; 0x64
 80007f2:	2203      	movs	r2, #3
 80007f4:	483b      	ldr	r0, [pc, #236]	; (80008e4 <Send_MIDINoteOn_1+0x218>)
 80007f6:	f001 ff90 	bl	800271a <HAL_UART_Transmit>
		break;
 80007fa:	e057      	b.n	80008ac <Send_MIDINoteOn_1+0x1e0>
	case 1:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Csos3, 3, 100);
 80007fc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000800:	2364      	movs	r3, #100	; 0x64
 8000802:	2203      	movs	r2, #3
 8000804:	4837      	ldr	r0, [pc, #220]	; (80008e4 <Send_MIDINoteOn_1+0x218>)
 8000806:	f001 ff88 	bl	800271a <HAL_UART_Transmit>
		break;
 800080a:	e04f      	b.n	80008ac <Send_MIDINoteOn_1+0x1e0>
	case 2:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_D3, 3, 100);
 800080c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000810:	2364      	movs	r3, #100	; 0x64
 8000812:	2203      	movs	r2, #3
 8000814:	4833      	ldr	r0, [pc, #204]	; (80008e4 <Send_MIDINoteOn_1+0x218>)
 8000816:	f001 ff80 	bl	800271a <HAL_UART_Transmit>
		break;
 800081a:	e047      	b.n	80008ac <Send_MIDINoteOn_1+0x1e0>
	case 3:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Dsos3, 3, 100);
 800081c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	2203      	movs	r2, #3
 8000824:	482f      	ldr	r0, [pc, #188]	; (80008e4 <Send_MIDINoteOn_1+0x218>)
 8000826:	f001 ff78 	bl	800271a <HAL_UART_Transmit>
		break;
 800082a:	e03f      	b.n	80008ac <Send_MIDINoteOn_1+0x1e0>
	case 4:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_E3, 3, 100);
 800082c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	2203      	movs	r2, #3
 8000834:	482b      	ldr	r0, [pc, #172]	; (80008e4 <Send_MIDINoteOn_1+0x218>)
 8000836:	f001 ff70 	bl	800271a <HAL_UART_Transmit>
		break;
 800083a:	e037      	b.n	80008ac <Send_MIDINoteOn_1+0x1e0>
	case 5:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_F3, 3, 100);
 800083c:	f107 0120 	add.w	r1, r7, #32
 8000840:	2364      	movs	r3, #100	; 0x64
 8000842:	2203      	movs	r2, #3
 8000844:	4827      	ldr	r0, [pc, #156]	; (80008e4 <Send_MIDINoteOn_1+0x218>)
 8000846:	f001 ff68 	bl	800271a <HAL_UART_Transmit>
		break;
 800084a:	e02f      	b.n	80008ac <Send_MIDINoteOn_1+0x1e0>
	case 6:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Fsos3, 3, 100);
 800084c:	f107 011c 	add.w	r1, r7, #28
 8000850:	2364      	movs	r3, #100	; 0x64
 8000852:	2203      	movs	r2, #3
 8000854:	4823      	ldr	r0, [pc, #140]	; (80008e4 <Send_MIDINoteOn_1+0x218>)
 8000856:	f001 ff60 	bl	800271a <HAL_UART_Transmit>
		break;
 800085a:	e027      	b.n	80008ac <Send_MIDINoteOn_1+0x1e0>

	case 7:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_G3, 3, 100);
 800085c:	f107 0118 	add.w	r1, r7, #24
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	2203      	movs	r2, #3
 8000864:	481f      	ldr	r0, [pc, #124]	; (80008e4 <Send_MIDINoteOn_1+0x218>)
 8000866:	f001 ff58 	bl	800271a <HAL_UART_Transmit>
		break;
 800086a:	e01f      	b.n	80008ac <Send_MIDINoteOn_1+0x1e0>

	case 8:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Gsos3, 3, 100);
 800086c:	f107 0114 	add.w	r1, r7, #20
 8000870:	2364      	movs	r3, #100	; 0x64
 8000872:	2203      	movs	r2, #3
 8000874:	481b      	ldr	r0, [pc, #108]	; (80008e4 <Send_MIDINoteOn_1+0x218>)
 8000876:	f001 ff50 	bl	800271a <HAL_UART_Transmit>
		break;
 800087a:	e017      	b.n	80008ac <Send_MIDINoteOn_1+0x1e0>

	case 9:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_A3, 3, 100);
 800087c:	f107 0110 	add.w	r1, r7, #16
 8000880:	2364      	movs	r3, #100	; 0x64
 8000882:	2203      	movs	r2, #3
 8000884:	4817      	ldr	r0, [pc, #92]	; (80008e4 <Send_MIDINoteOn_1+0x218>)
 8000886:	f001 ff48 	bl	800271a <HAL_UART_Transmit>
		break;
 800088a:	e00f      	b.n	80008ac <Send_MIDINoteOn_1+0x1e0>

	case 10:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Asos3, 3, 100);
 800088c:	f107 010c 	add.w	r1, r7, #12
 8000890:	2364      	movs	r3, #100	; 0x64
 8000892:	2203      	movs	r2, #3
 8000894:	4813      	ldr	r0, [pc, #76]	; (80008e4 <Send_MIDINoteOn_1+0x218>)
 8000896:	f001 ff40 	bl	800271a <HAL_UART_Transmit>
		break;
 800089a:	e007      	b.n	80008ac <Send_MIDINoteOn_1+0x1e0>

	case 11:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_B3, 3, 100);
 800089c:	f107 0108 	add.w	r1, r7, #8
 80008a0:	2364      	movs	r3, #100	; 0x64
 80008a2:	2203      	movs	r2, #3
 80008a4:	480f      	ldr	r0, [pc, #60]	; (80008e4 <Send_MIDINoteOn_1+0x218>)
 80008a6:	f001 ff38 	bl	800271a <HAL_UART_Transmit>
		break;
 80008aa:	bf00      	nop
	}
}
 80008ac:	bf00      	nop
 80008ae:	3738      	adds	r7, #56	; 0x38
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	08002e74 	.word	0x08002e74
 80008b8:	08002e78 	.word	0x08002e78
 80008bc:	08002e7c 	.word	0x08002e7c
 80008c0:	08002e80 	.word	0x08002e80
 80008c4:	08002e84 	.word	0x08002e84
 80008c8:	08002e88 	.word	0x08002e88
 80008cc:	08002e8c 	.word	0x08002e8c
 80008d0:	08002e90 	.word	0x08002e90
 80008d4:	08002e94 	.word	0x08002e94
 80008d8:	08002e98 	.word	0x08002e98
 80008dc:	08002e9c 	.word	0x08002e9c
 80008e0:	08002ea0 	.word	0x08002ea0
 80008e4:	2000008c 	.word	0x2000008c

080008e8 <Send_MIDINoteOff_1>:

void Send_MIDINoteOff_1(uint8_t control){ //Enviar código MIDI NoteOff de la fila 1 correspondiente a cada nota en función del código de control
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	//Mensajes de MIDI NoteOff -> velocidad 0
	uint8_t MIDI_C3[3] = {0x90, 0x30, 0x00};
 80008f2:	4a77      	ldr	r2, [pc, #476]	; (8000ad0 <Send_MIDINoteOff_1+0x1e8>)
 80008f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008f8:	6812      	ldr	r2, [r2, #0]
 80008fa:	4611      	mov	r1, r2
 80008fc:	8019      	strh	r1, [r3, #0]
 80008fe:	3302      	adds	r3, #2
 8000900:	0c12      	lsrs	r2, r2, #16
 8000902:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Csos3[3] = {0x90, 0x31, 0x00};
 8000904:	4a73      	ldr	r2, [pc, #460]	; (8000ad4 <Send_MIDINoteOff_1+0x1ec>)
 8000906:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800090a:	6812      	ldr	r2, [r2, #0]
 800090c:	4611      	mov	r1, r2
 800090e:	8019      	strh	r1, [r3, #0]
 8000910:	3302      	adds	r3, #2
 8000912:	0c12      	lsrs	r2, r2, #16
 8000914:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_D3[3] = {0x90, 0x32, 0x00};
 8000916:	4a70      	ldr	r2, [pc, #448]	; (8000ad8 <Send_MIDINoteOff_1+0x1f0>)
 8000918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091c:	6812      	ldr	r2, [r2, #0]
 800091e:	4611      	mov	r1, r2
 8000920:	8019      	strh	r1, [r3, #0]
 8000922:	3302      	adds	r3, #2
 8000924:	0c12      	lsrs	r2, r2, #16
 8000926:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Dsos3[3] = {0x90, 0x33, 0x00};
 8000928:	4a6c      	ldr	r2, [pc, #432]	; (8000adc <Send_MIDINoteOff_1+0x1f4>)
 800092a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800092e:	6812      	ldr	r2, [r2, #0]
 8000930:	4611      	mov	r1, r2
 8000932:	8019      	strh	r1, [r3, #0]
 8000934:	3302      	adds	r3, #2
 8000936:	0c12      	lsrs	r2, r2, #16
 8000938:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_E3[3] = {0x90, 0x34, 0x00};
 800093a:	4a69      	ldr	r2, [pc, #420]	; (8000ae0 <Send_MIDINoteOff_1+0x1f8>)
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	6812      	ldr	r2, [r2, #0]
 8000942:	4611      	mov	r1, r2
 8000944:	8019      	strh	r1, [r3, #0]
 8000946:	3302      	adds	r3, #2
 8000948:	0c12      	lsrs	r2, r2, #16
 800094a:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_F3[3] = {0x90, 0x35, 0x00};
 800094c:	4a65      	ldr	r2, [pc, #404]	; (8000ae4 <Send_MIDINoteOff_1+0x1fc>)
 800094e:	f107 0320 	add.w	r3, r7, #32
 8000952:	6812      	ldr	r2, [r2, #0]
 8000954:	4611      	mov	r1, r2
 8000956:	8019      	strh	r1, [r3, #0]
 8000958:	3302      	adds	r3, #2
 800095a:	0c12      	lsrs	r2, r2, #16
 800095c:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Fsos3[3] = {0x90, 0x36, 0x00};
 800095e:	4a62      	ldr	r2, [pc, #392]	; (8000ae8 <Send_MIDINoteOff_1+0x200>)
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	6812      	ldr	r2, [r2, #0]
 8000966:	4611      	mov	r1, r2
 8000968:	8019      	strh	r1, [r3, #0]
 800096a:	3302      	adds	r3, #2
 800096c:	0c12      	lsrs	r2, r2, #16
 800096e:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_G3[3] = {0x90, 0x37, 0x00};
 8000970:	4a5e      	ldr	r2, [pc, #376]	; (8000aec <Send_MIDINoteOff_1+0x204>)
 8000972:	f107 0318 	add.w	r3, r7, #24
 8000976:	6812      	ldr	r2, [r2, #0]
 8000978:	4611      	mov	r1, r2
 800097a:	8019      	strh	r1, [r3, #0]
 800097c:	3302      	adds	r3, #2
 800097e:	0c12      	lsrs	r2, r2, #16
 8000980:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Gsos3[3] = {0x90, 0x38, 0x00};
 8000982:	4a5b      	ldr	r2, [pc, #364]	; (8000af0 <Send_MIDINoteOff_1+0x208>)
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	6812      	ldr	r2, [r2, #0]
 800098a:	4611      	mov	r1, r2
 800098c:	8019      	strh	r1, [r3, #0]
 800098e:	3302      	adds	r3, #2
 8000990:	0c12      	lsrs	r2, r2, #16
 8000992:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_A3[3] = {0x90, 0x39, 0x00};
 8000994:	4a57      	ldr	r2, [pc, #348]	; (8000af4 <Send_MIDINoteOff_1+0x20c>)
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	6812      	ldr	r2, [r2, #0]
 800099c:	4611      	mov	r1, r2
 800099e:	8019      	strh	r1, [r3, #0]
 80009a0:	3302      	adds	r3, #2
 80009a2:	0c12      	lsrs	r2, r2, #16
 80009a4:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Asos3[3] = {0x90, 0x3A, 0x00};
 80009a6:	4a54      	ldr	r2, [pc, #336]	; (8000af8 <Send_MIDINoteOff_1+0x210>)
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	6812      	ldr	r2, [r2, #0]
 80009ae:	4611      	mov	r1, r2
 80009b0:	8019      	strh	r1, [r3, #0]
 80009b2:	3302      	adds	r3, #2
 80009b4:	0c12      	lsrs	r2, r2, #16
 80009b6:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_B3[3] = {0x90, 0x3B, 0x00};
 80009b8:	4a50      	ldr	r2, [pc, #320]	; (8000afc <Send_MIDINoteOff_1+0x214>)
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	4611      	mov	r1, r2
 80009c2:	8019      	strh	r1, [r3, #0]
 80009c4:	3302      	adds	r3, #2
 80009c6:	0c12      	lsrs	r2, r2, #16
 80009c8:	701a      	strb	r2, [r3, #0]

	switch (control)
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b0b      	cmp	r3, #11
 80009ce:	d87b      	bhi.n	8000ac8 <Send_MIDINoteOff_1+0x1e0>
 80009d0:	a201      	add	r2, pc, #4	; (adr r2, 80009d8 <Send_MIDINoteOff_1+0xf0>)
 80009d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d6:	bf00      	nop
 80009d8:	08000a09 	.word	0x08000a09
 80009dc:	08000a19 	.word	0x08000a19
 80009e0:	08000a29 	.word	0x08000a29
 80009e4:	08000a39 	.word	0x08000a39
 80009e8:	08000a49 	.word	0x08000a49
 80009ec:	08000a59 	.word	0x08000a59
 80009f0:	08000a69 	.word	0x08000a69
 80009f4:	08000a79 	.word	0x08000a79
 80009f8:	08000a89 	.word	0x08000a89
 80009fc:	08000a99 	.word	0x08000a99
 8000a00:	08000aa9 	.word	0x08000aa9
 8000a04:	08000ab9 	.word	0x08000ab9
	{
	case 0:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_C3, 3, 100);
 8000a08:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000a0c:	2364      	movs	r3, #100	; 0x64
 8000a0e:	2203      	movs	r2, #3
 8000a10:	483b      	ldr	r0, [pc, #236]	; (8000b00 <Send_MIDINoteOff_1+0x218>)
 8000a12:	f001 fe82 	bl	800271a <HAL_UART_Transmit>
		break;
 8000a16:	e057      	b.n	8000ac8 <Send_MIDINoteOff_1+0x1e0>
	case 1:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Csos3, 3, 100);
 8000a18:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000a1c:	2364      	movs	r3, #100	; 0x64
 8000a1e:	2203      	movs	r2, #3
 8000a20:	4837      	ldr	r0, [pc, #220]	; (8000b00 <Send_MIDINoteOff_1+0x218>)
 8000a22:	f001 fe7a 	bl	800271a <HAL_UART_Transmit>
		break;
 8000a26:	e04f      	b.n	8000ac8 <Send_MIDINoteOff_1+0x1e0>
	case 2:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_D3, 3, 100);
 8000a28:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000a2c:	2364      	movs	r3, #100	; 0x64
 8000a2e:	2203      	movs	r2, #3
 8000a30:	4833      	ldr	r0, [pc, #204]	; (8000b00 <Send_MIDINoteOff_1+0x218>)
 8000a32:	f001 fe72 	bl	800271a <HAL_UART_Transmit>
		break;
 8000a36:	e047      	b.n	8000ac8 <Send_MIDINoteOff_1+0x1e0>
	case 3:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Dsos3, 3, 100);
 8000a38:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000a3c:	2364      	movs	r3, #100	; 0x64
 8000a3e:	2203      	movs	r2, #3
 8000a40:	482f      	ldr	r0, [pc, #188]	; (8000b00 <Send_MIDINoteOff_1+0x218>)
 8000a42:	f001 fe6a 	bl	800271a <HAL_UART_Transmit>
		break;
 8000a46:	e03f      	b.n	8000ac8 <Send_MIDINoteOff_1+0x1e0>
	case 4:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_E3, 3, 100);
 8000a48:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000a4c:	2364      	movs	r3, #100	; 0x64
 8000a4e:	2203      	movs	r2, #3
 8000a50:	482b      	ldr	r0, [pc, #172]	; (8000b00 <Send_MIDINoteOff_1+0x218>)
 8000a52:	f001 fe62 	bl	800271a <HAL_UART_Transmit>
		break;
 8000a56:	e037      	b.n	8000ac8 <Send_MIDINoteOff_1+0x1e0>
	case 5:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_F3, 3, 100);
 8000a58:	f107 0120 	add.w	r1, r7, #32
 8000a5c:	2364      	movs	r3, #100	; 0x64
 8000a5e:	2203      	movs	r2, #3
 8000a60:	4827      	ldr	r0, [pc, #156]	; (8000b00 <Send_MIDINoteOff_1+0x218>)
 8000a62:	f001 fe5a 	bl	800271a <HAL_UART_Transmit>
		break;
 8000a66:	e02f      	b.n	8000ac8 <Send_MIDINoteOff_1+0x1e0>
	case 6:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Fsos3, 3, 100);
 8000a68:	f107 011c 	add.w	r1, r7, #28
 8000a6c:	2364      	movs	r3, #100	; 0x64
 8000a6e:	2203      	movs	r2, #3
 8000a70:	4823      	ldr	r0, [pc, #140]	; (8000b00 <Send_MIDINoteOff_1+0x218>)
 8000a72:	f001 fe52 	bl	800271a <HAL_UART_Transmit>
		break;
 8000a76:	e027      	b.n	8000ac8 <Send_MIDINoteOff_1+0x1e0>

	case 7:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_G3, 3, 100);
 8000a78:	f107 0118 	add.w	r1, r7, #24
 8000a7c:	2364      	movs	r3, #100	; 0x64
 8000a7e:	2203      	movs	r2, #3
 8000a80:	481f      	ldr	r0, [pc, #124]	; (8000b00 <Send_MIDINoteOff_1+0x218>)
 8000a82:	f001 fe4a 	bl	800271a <HAL_UART_Transmit>
		break;
 8000a86:	e01f      	b.n	8000ac8 <Send_MIDINoteOff_1+0x1e0>

	case 8:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Gsos3, 3, 100);
 8000a88:	f107 0114 	add.w	r1, r7, #20
 8000a8c:	2364      	movs	r3, #100	; 0x64
 8000a8e:	2203      	movs	r2, #3
 8000a90:	481b      	ldr	r0, [pc, #108]	; (8000b00 <Send_MIDINoteOff_1+0x218>)
 8000a92:	f001 fe42 	bl	800271a <HAL_UART_Transmit>
		break;
 8000a96:	e017      	b.n	8000ac8 <Send_MIDINoteOff_1+0x1e0>

	case 9:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_A3, 3, 100);
 8000a98:	f107 0110 	add.w	r1, r7, #16
 8000a9c:	2364      	movs	r3, #100	; 0x64
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	4817      	ldr	r0, [pc, #92]	; (8000b00 <Send_MIDINoteOff_1+0x218>)
 8000aa2:	f001 fe3a 	bl	800271a <HAL_UART_Transmit>
		break;
 8000aa6:	e00f      	b.n	8000ac8 <Send_MIDINoteOff_1+0x1e0>

	case 10:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Asos3, 3, 100);
 8000aa8:	f107 010c 	add.w	r1, r7, #12
 8000aac:	2364      	movs	r3, #100	; 0x64
 8000aae:	2203      	movs	r2, #3
 8000ab0:	4813      	ldr	r0, [pc, #76]	; (8000b00 <Send_MIDINoteOff_1+0x218>)
 8000ab2:	f001 fe32 	bl	800271a <HAL_UART_Transmit>
		break;
 8000ab6:	e007      	b.n	8000ac8 <Send_MIDINoteOff_1+0x1e0>

	case 11:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_B3, 3, 100);
 8000ab8:	f107 0108 	add.w	r1, r7, #8
 8000abc:	2364      	movs	r3, #100	; 0x64
 8000abe:	2203      	movs	r2, #3
 8000ac0:	480f      	ldr	r0, [pc, #60]	; (8000b00 <Send_MIDINoteOff_1+0x218>)
 8000ac2:	f001 fe2a 	bl	800271a <HAL_UART_Transmit>
		break;
 8000ac6:	bf00      	nop
	}
}
 8000ac8:	bf00      	nop
 8000aca:	3738      	adds	r7, #56	; 0x38
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	08002ea4 	.word	0x08002ea4
 8000ad4:	08002ea8 	.word	0x08002ea8
 8000ad8:	08002eac 	.word	0x08002eac
 8000adc:	08002eb0 	.word	0x08002eb0
 8000ae0:	08002eb4 	.word	0x08002eb4
 8000ae4:	08002eb8 	.word	0x08002eb8
 8000ae8:	08002ebc 	.word	0x08002ebc
 8000aec:	08002ec0 	.word	0x08002ec0
 8000af0:	08002ec4 	.word	0x08002ec4
 8000af4:	08002ec8 	.word	0x08002ec8
 8000af8:	08002ecc 	.word	0x08002ecc
 8000afc:	08002ed0 	.word	0x08002ed0
 8000b00:	2000008c 	.word	0x2000008c

08000b04 <Send_MIDINoteOn_2>:

void Send_MIDINoteOn_2(uint8_t control){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
	//Mensajes de MIDI NoteON: canal MIDI 1, octava 4 y valocidad máxima
	uint8_t MIDI_C4[3] = {0x90, 0x3C, 0x7F};
 8000b0e:	4a77      	ldr	r2, [pc, #476]	; (8000cec <Send_MIDINoteOn_2+0x1e8>)
 8000b10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b14:	6812      	ldr	r2, [r2, #0]
 8000b16:	4611      	mov	r1, r2
 8000b18:	8019      	strh	r1, [r3, #0]
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	0c12      	lsrs	r2, r2, #16
 8000b1e:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Csos4[3] = {0x90, 0x3D, 0x7F};
 8000b20:	4a73      	ldr	r2, [pc, #460]	; (8000cf0 <Send_MIDINoteOn_2+0x1ec>)
 8000b22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b26:	6812      	ldr	r2, [r2, #0]
 8000b28:	4611      	mov	r1, r2
 8000b2a:	8019      	strh	r1, [r3, #0]
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	0c12      	lsrs	r2, r2, #16
 8000b30:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_D4[3] = {0x90, 0x3E, 0x7F};
 8000b32:	4a70      	ldr	r2, [pc, #448]	; (8000cf4 <Send_MIDINoteOn_2+0x1f0>)
 8000b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b38:	6812      	ldr	r2, [r2, #0]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	8019      	strh	r1, [r3, #0]
 8000b3e:	3302      	adds	r3, #2
 8000b40:	0c12      	lsrs	r2, r2, #16
 8000b42:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Dsos4[3] = {0x90, 0x3F, 0x7F};
 8000b44:	4a6c      	ldr	r2, [pc, #432]	; (8000cf8 <Send_MIDINoteOn_2+0x1f4>)
 8000b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b4a:	6812      	ldr	r2, [r2, #0]
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	8019      	strh	r1, [r3, #0]
 8000b50:	3302      	adds	r3, #2
 8000b52:	0c12      	lsrs	r2, r2, #16
 8000b54:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_E4[3] = {0x90, 0x40, 0x7F};
 8000b56:	4a69      	ldr	r2, [pc, #420]	; (8000cfc <Send_MIDINoteOn_2+0x1f8>)
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	6812      	ldr	r2, [r2, #0]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	8019      	strh	r1, [r3, #0]
 8000b62:	3302      	adds	r3, #2
 8000b64:	0c12      	lsrs	r2, r2, #16
 8000b66:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_F4[3] = {0x90, 0x41, 0x7F};
 8000b68:	4a65      	ldr	r2, [pc, #404]	; (8000d00 <Send_MIDINoteOn_2+0x1fc>)
 8000b6a:	f107 0320 	add.w	r3, r7, #32
 8000b6e:	6812      	ldr	r2, [r2, #0]
 8000b70:	4611      	mov	r1, r2
 8000b72:	8019      	strh	r1, [r3, #0]
 8000b74:	3302      	adds	r3, #2
 8000b76:	0c12      	lsrs	r2, r2, #16
 8000b78:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Fsos4[3] = {0x90, 0x42, 0x7F};
 8000b7a:	4a62      	ldr	r2, [pc, #392]	; (8000d04 <Send_MIDINoteOn_2+0x200>)
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	6812      	ldr	r2, [r2, #0]
 8000b82:	4611      	mov	r1, r2
 8000b84:	8019      	strh	r1, [r3, #0]
 8000b86:	3302      	adds	r3, #2
 8000b88:	0c12      	lsrs	r2, r2, #16
 8000b8a:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_G4[3] = {0x90, 0x43, 0x7F};
 8000b8c:	4a5e      	ldr	r2, [pc, #376]	; (8000d08 <Send_MIDINoteOn_2+0x204>)
 8000b8e:	f107 0318 	add.w	r3, r7, #24
 8000b92:	6812      	ldr	r2, [r2, #0]
 8000b94:	4611      	mov	r1, r2
 8000b96:	8019      	strh	r1, [r3, #0]
 8000b98:	3302      	adds	r3, #2
 8000b9a:	0c12      	lsrs	r2, r2, #16
 8000b9c:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Gsos4[3] = {0x90, 0x44, 0x7F};
 8000b9e:	4a5b      	ldr	r2, [pc, #364]	; (8000d0c <Send_MIDINoteOn_2+0x208>)
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	6812      	ldr	r2, [r2, #0]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	8019      	strh	r1, [r3, #0]
 8000baa:	3302      	adds	r3, #2
 8000bac:	0c12      	lsrs	r2, r2, #16
 8000bae:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_A4[3] = {0x90, 0x45, 0x7F};
 8000bb0:	4a57      	ldr	r2, [pc, #348]	; (8000d10 <Send_MIDINoteOn_2+0x20c>)
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	6812      	ldr	r2, [r2, #0]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	8019      	strh	r1, [r3, #0]
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	0c12      	lsrs	r2, r2, #16
 8000bc0:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Asos4[3] = {0x90, 0x46, 0x7F};
 8000bc2:	4a54      	ldr	r2, [pc, #336]	; (8000d14 <Send_MIDINoteOn_2+0x210>)
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	6812      	ldr	r2, [r2, #0]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	8019      	strh	r1, [r3, #0]
 8000bce:	3302      	adds	r3, #2
 8000bd0:	0c12      	lsrs	r2, r2, #16
 8000bd2:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_B4[3] = {0x90, 0x47, 0x7F};
 8000bd4:	4a50      	ldr	r2, [pc, #320]	; (8000d18 <Send_MIDINoteOn_2+0x214>)
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	6812      	ldr	r2, [r2, #0]
 8000bdc:	4611      	mov	r1, r2
 8000bde:	8019      	strh	r1, [r3, #0]
 8000be0:	3302      	adds	r3, #2
 8000be2:	0c12      	lsrs	r2, r2, #16
 8000be4:	701a      	strb	r2, [r3, #0]

	switch (control)
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b0b      	cmp	r3, #11
 8000bea:	d87b      	bhi.n	8000ce4 <Send_MIDINoteOn_2+0x1e0>
 8000bec:	a201      	add	r2, pc, #4	; (adr r2, 8000bf4 <Send_MIDINoteOn_2+0xf0>)
 8000bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf2:	bf00      	nop
 8000bf4:	08000c25 	.word	0x08000c25
 8000bf8:	08000c35 	.word	0x08000c35
 8000bfc:	08000c45 	.word	0x08000c45
 8000c00:	08000c55 	.word	0x08000c55
 8000c04:	08000c65 	.word	0x08000c65
 8000c08:	08000c75 	.word	0x08000c75
 8000c0c:	08000c85 	.word	0x08000c85
 8000c10:	08000c95 	.word	0x08000c95
 8000c14:	08000ca5 	.word	0x08000ca5
 8000c18:	08000cb5 	.word	0x08000cb5
 8000c1c:	08000cc5 	.word	0x08000cc5
 8000c20:	08000cd5 	.word	0x08000cd5
	{
	case 0:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_C4, 3, 100);
 8000c24:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000c28:	2364      	movs	r3, #100	; 0x64
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	483b      	ldr	r0, [pc, #236]	; (8000d1c <Send_MIDINoteOn_2+0x218>)
 8000c2e:	f001 fd74 	bl	800271a <HAL_UART_Transmit>
		break;
 8000c32:	e057      	b.n	8000ce4 <Send_MIDINoteOn_2+0x1e0>
	case 1:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Csos4, 3, 100);
 8000c34:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000c38:	2364      	movs	r3, #100	; 0x64
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	4837      	ldr	r0, [pc, #220]	; (8000d1c <Send_MIDINoteOn_2+0x218>)
 8000c3e:	f001 fd6c 	bl	800271a <HAL_UART_Transmit>
		break;
 8000c42:	e04f      	b.n	8000ce4 <Send_MIDINoteOn_2+0x1e0>
	case 2:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_D4, 3, 100);
 8000c44:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000c48:	2364      	movs	r3, #100	; 0x64
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	4833      	ldr	r0, [pc, #204]	; (8000d1c <Send_MIDINoteOn_2+0x218>)
 8000c4e:	f001 fd64 	bl	800271a <HAL_UART_Transmit>
		break;
 8000c52:	e047      	b.n	8000ce4 <Send_MIDINoteOn_2+0x1e0>
	case 3:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Dsos4, 3, 100);
 8000c54:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000c58:	2364      	movs	r3, #100	; 0x64
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	482f      	ldr	r0, [pc, #188]	; (8000d1c <Send_MIDINoteOn_2+0x218>)
 8000c5e:	f001 fd5c 	bl	800271a <HAL_UART_Transmit>
		break;
 8000c62:	e03f      	b.n	8000ce4 <Send_MIDINoteOn_2+0x1e0>
	case 4:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_E4, 3, 100);
 8000c64:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000c68:	2364      	movs	r3, #100	; 0x64
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	482b      	ldr	r0, [pc, #172]	; (8000d1c <Send_MIDINoteOn_2+0x218>)
 8000c6e:	f001 fd54 	bl	800271a <HAL_UART_Transmit>
		break;
 8000c72:	e037      	b.n	8000ce4 <Send_MIDINoteOn_2+0x1e0>
	case 5:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_F4, 3, 100);
 8000c74:	f107 0120 	add.w	r1, r7, #32
 8000c78:	2364      	movs	r3, #100	; 0x64
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	4827      	ldr	r0, [pc, #156]	; (8000d1c <Send_MIDINoteOn_2+0x218>)
 8000c7e:	f001 fd4c 	bl	800271a <HAL_UART_Transmit>
		break;
 8000c82:	e02f      	b.n	8000ce4 <Send_MIDINoteOn_2+0x1e0>
	case 6:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Fsos4, 3, 100);
 8000c84:	f107 011c 	add.w	r1, r7, #28
 8000c88:	2364      	movs	r3, #100	; 0x64
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	4823      	ldr	r0, [pc, #140]	; (8000d1c <Send_MIDINoteOn_2+0x218>)
 8000c8e:	f001 fd44 	bl	800271a <HAL_UART_Transmit>
		break;
 8000c92:	e027      	b.n	8000ce4 <Send_MIDINoteOn_2+0x1e0>

	case 7:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_G4, 3, 100);
 8000c94:	f107 0118 	add.w	r1, r7, #24
 8000c98:	2364      	movs	r3, #100	; 0x64
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	481f      	ldr	r0, [pc, #124]	; (8000d1c <Send_MIDINoteOn_2+0x218>)
 8000c9e:	f001 fd3c 	bl	800271a <HAL_UART_Transmit>
		break;
 8000ca2:	e01f      	b.n	8000ce4 <Send_MIDINoteOn_2+0x1e0>

	case 8:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Gsos4, 3, 100);
 8000ca4:	f107 0114 	add.w	r1, r7, #20
 8000ca8:	2364      	movs	r3, #100	; 0x64
 8000caa:	2203      	movs	r2, #3
 8000cac:	481b      	ldr	r0, [pc, #108]	; (8000d1c <Send_MIDINoteOn_2+0x218>)
 8000cae:	f001 fd34 	bl	800271a <HAL_UART_Transmit>
		break;
 8000cb2:	e017      	b.n	8000ce4 <Send_MIDINoteOn_2+0x1e0>

	case 9:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_A4, 3, 100);
 8000cb4:	f107 0110 	add.w	r1, r7, #16
 8000cb8:	2364      	movs	r3, #100	; 0x64
 8000cba:	2203      	movs	r2, #3
 8000cbc:	4817      	ldr	r0, [pc, #92]	; (8000d1c <Send_MIDINoteOn_2+0x218>)
 8000cbe:	f001 fd2c 	bl	800271a <HAL_UART_Transmit>
		break;
 8000cc2:	e00f      	b.n	8000ce4 <Send_MIDINoteOn_2+0x1e0>

	case 10:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Asos4, 3, 100);
 8000cc4:	f107 010c 	add.w	r1, r7, #12
 8000cc8:	2364      	movs	r3, #100	; 0x64
 8000cca:	2203      	movs	r2, #3
 8000ccc:	4813      	ldr	r0, [pc, #76]	; (8000d1c <Send_MIDINoteOn_2+0x218>)
 8000cce:	f001 fd24 	bl	800271a <HAL_UART_Transmit>
		break;
 8000cd2:	e007      	b.n	8000ce4 <Send_MIDINoteOn_2+0x1e0>

	case 11:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_B4, 3, 100);
 8000cd4:	f107 0108 	add.w	r1, r7, #8
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	2203      	movs	r2, #3
 8000cdc:	480f      	ldr	r0, [pc, #60]	; (8000d1c <Send_MIDINoteOn_2+0x218>)
 8000cde:	f001 fd1c 	bl	800271a <HAL_UART_Transmit>
		break;
 8000ce2:	bf00      	nop
	}
}
 8000ce4:	bf00      	nop
 8000ce6:	3738      	adds	r7, #56	; 0x38
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	08002ed4 	.word	0x08002ed4
 8000cf0:	08002ed8 	.word	0x08002ed8
 8000cf4:	08002edc 	.word	0x08002edc
 8000cf8:	08002ee0 	.word	0x08002ee0
 8000cfc:	08002ee4 	.word	0x08002ee4
 8000d00:	08002ee8 	.word	0x08002ee8
 8000d04:	08002eec 	.word	0x08002eec
 8000d08:	08002ef0 	.word	0x08002ef0
 8000d0c:	08002ef4 	.word	0x08002ef4
 8000d10:	08002ef8 	.word	0x08002ef8
 8000d14:	08002efc 	.word	0x08002efc
 8000d18:	08002f00 	.word	0x08002f00
 8000d1c:	2000008c 	.word	0x2000008c

08000d20 <Send_MIDINoteOff_2>:

void Send_MIDINoteOff_2(uint8_t control){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08e      	sub	sp, #56	; 0x38
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
	//Mensajes de MIDI NoteOff -> velocidad 0
	uint8_t MIDI_C4[3] = {0x90, 0x3C, 0x00};
 8000d2a:	4a77      	ldr	r2, [pc, #476]	; (8000f08 <Send_MIDINoteOff_2+0x1e8>)
 8000d2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d30:	6812      	ldr	r2, [r2, #0]
 8000d32:	4611      	mov	r1, r2
 8000d34:	8019      	strh	r1, [r3, #0]
 8000d36:	3302      	adds	r3, #2
 8000d38:	0c12      	lsrs	r2, r2, #16
 8000d3a:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Csos4[3] = {0x90, 0x3D, 0x00};
 8000d3c:	4a73      	ldr	r2, [pc, #460]	; (8000f0c <Send_MIDINoteOff_2+0x1ec>)
 8000d3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d42:	6812      	ldr	r2, [r2, #0]
 8000d44:	4611      	mov	r1, r2
 8000d46:	8019      	strh	r1, [r3, #0]
 8000d48:	3302      	adds	r3, #2
 8000d4a:	0c12      	lsrs	r2, r2, #16
 8000d4c:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_D4[3] = {0x90, 0x3E, 0x00};
 8000d4e:	4a70      	ldr	r2, [pc, #448]	; (8000f10 <Send_MIDINoteOff_2+0x1f0>)
 8000d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d54:	6812      	ldr	r2, [r2, #0]
 8000d56:	4611      	mov	r1, r2
 8000d58:	8019      	strh	r1, [r3, #0]
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	0c12      	lsrs	r2, r2, #16
 8000d5e:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Dsos4[3] = {0x90, 0x3F, 0x00};
 8000d60:	4a6c      	ldr	r2, [pc, #432]	; (8000f14 <Send_MIDINoteOff_2+0x1f4>)
 8000d62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	4611      	mov	r1, r2
 8000d6a:	8019      	strh	r1, [r3, #0]
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	0c12      	lsrs	r2, r2, #16
 8000d70:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_E4[3] = {0x90, 0x40, 0x00};
 8000d72:	4a69      	ldr	r2, [pc, #420]	; (8000f18 <Send_MIDINoteOff_2+0x1f8>)
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	6812      	ldr	r2, [r2, #0]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	8019      	strh	r1, [r3, #0]
 8000d7e:	3302      	adds	r3, #2
 8000d80:	0c12      	lsrs	r2, r2, #16
 8000d82:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_F4[3] = {0x90, 0x41, 0x00};
 8000d84:	4a65      	ldr	r2, [pc, #404]	; (8000f1c <Send_MIDINoteOff_2+0x1fc>)
 8000d86:	f107 0320 	add.w	r3, r7, #32
 8000d8a:	6812      	ldr	r2, [r2, #0]
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	8019      	strh	r1, [r3, #0]
 8000d90:	3302      	adds	r3, #2
 8000d92:	0c12      	lsrs	r2, r2, #16
 8000d94:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Fsos4[3] = {0x90, 0x42, 0x00};
 8000d96:	4a62      	ldr	r2, [pc, #392]	; (8000f20 <Send_MIDINoteOff_2+0x200>)
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	6812      	ldr	r2, [r2, #0]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	8019      	strh	r1, [r3, #0]
 8000da2:	3302      	adds	r3, #2
 8000da4:	0c12      	lsrs	r2, r2, #16
 8000da6:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_G4[3] = {0x90, 0x43, 0x00};
 8000da8:	4a5e      	ldr	r2, [pc, #376]	; (8000f24 <Send_MIDINoteOff_2+0x204>)
 8000daa:	f107 0318 	add.w	r3, r7, #24
 8000dae:	6812      	ldr	r2, [r2, #0]
 8000db0:	4611      	mov	r1, r2
 8000db2:	8019      	strh	r1, [r3, #0]
 8000db4:	3302      	adds	r3, #2
 8000db6:	0c12      	lsrs	r2, r2, #16
 8000db8:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Gsos4[3] = {0x90, 0x44, 0x00};
 8000dba:	4a5b      	ldr	r2, [pc, #364]	; (8000f28 <Send_MIDINoteOff_2+0x208>)
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	6812      	ldr	r2, [r2, #0]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	8019      	strh	r1, [r3, #0]
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	0c12      	lsrs	r2, r2, #16
 8000dca:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_A4[3] = {0x90, 0x45, 0x00};
 8000dcc:	4a57      	ldr	r2, [pc, #348]	; (8000f2c <Send_MIDINoteOff_2+0x20c>)
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	6812      	ldr	r2, [r2, #0]
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	8019      	strh	r1, [r3, #0]
 8000dd8:	3302      	adds	r3, #2
 8000dda:	0c12      	lsrs	r2, r2, #16
 8000ddc:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Asos4[3] = {0x90, 0x46, 0x00};
 8000dde:	4a54      	ldr	r2, [pc, #336]	; (8000f30 <Send_MIDINoteOff_2+0x210>)
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	6812      	ldr	r2, [r2, #0]
 8000de6:	4611      	mov	r1, r2
 8000de8:	8019      	strh	r1, [r3, #0]
 8000dea:	3302      	adds	r3, #2
 8000dec:	0c12      	lsrs	r2, r2, #16
 8000dee:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_B4[3] = {0x90, 0x47, 0x00};
 8000df0:	4a50      	ldr	r2, [pc, #320]	; (8000f34 <Send_MIDINoteOff_2+0x214>)
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	8019      	strh	r1, [r3, #0]
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	0c12      	lsrs	r2, r2, #16
 8000e00:	701a      	strb	r2, [r3, #0]

	switch (control)
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b0b      	cmp	r3, #11
 8000e06:	d87b      	bhi.n	8000f00 <Send_MIDINoteOff_2+0x1e0>
 8000e08:	a201      	add	r2, pc, #4	; (adr r2, 8000e10 <Send_MIDINoteOff_2+0xf0>)
 8000e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0e:	bf00      	nop
 8000e10:	08000e41 	.word	0x08000e41
 8000e14:	08000e51 	.word	0x08000e51
 8000e18:	08000e61 	.word	0x08000e61
 8000e1c:	08000e71 	.word	0x08000e71
 8000e20:	08000e81 	.word	0x08000e81
 8000e24:	08000e91 	.word	0x08000e91
 8000e28:	08000ea1 	.word	0x08000ea1
 8000e2c:	08000eb1 	.word	0x08000eb1
 8000e30:	08000ec1 	.word	0x08000ec1
 8000e34:	08000ed1 	.word	0x08000ed1
 8000e38:	08000ee1 	.word	0x08000ee1
 8000e3c:	08000ef1 	.word	0x08000ef1
	{
	case 0:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_C4, 3, 100);
 8000e40:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000e44:	2364      	movs	r3, #100	; 0x64
 8000e46:	2203      	movs	r2, #3
 8000e48:	483b      	ldr	r0, [pc, #236]	; (8000f38 <Send_MIDINoteOff_2+0x218>)
 8000e4a:	f001 fc66 	bl	800271a <HAL_UART_Transmit>
		break;
 8000e4e:	e057      	b.n	8000f00 <Send_MIDINoteOff_2+0x1e0>
	case 1:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Csos4, 3, 100);
 8000e50:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000e54:	2364      	movs	r3, #100	; 0x64
 8000e56:	2203      	movs	r2, #3
 8000e58:	4837      	ldr	r0, [pc, #220]	; (8000f38 <Send_MIDINoteOff_2+0x218>)
 8000e5a:	f001 fc5e 	bl	800271a <HAL_UART_Transmit>
		break;
 8000e5e:	e04f      	b.n	8000f00 <Send_MIDINoteOff_2+0x1e0>
	case 2:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_D4, 3, 100);
 8000e60:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000e64:	2364      	movs	r3, #100	; 0x64
 8000e66:	2203      	movs	r2, #3
 8000e68:	4833      	ldr	r0, [pc, #204]	; (8000f38 <Send_MIDINoteOff_2+0x218>)
 8000e6a:	f001 fc56 	bl	800271a <HAL_UART_Transmit>
		break;
 8000e6e:	e047      	b.n	8000f00 <Send_MIDINoteOff_2+0x1e0>
	case 3:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Dsos4, 3, 100);
 8000e70:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000e74:	2364      	movs	r3, #100	; 0x64
 8000e76:	2203      	movs	r2, #3
 8000e78:	482f      	ldr	r0, [pc, #188]	; (8000f38 <Send_MIDINoteOff_2+0x218>)
 8000e7a:	f001 fc4e 	bl	800271a <HAL_UART_Transmit>
		break;
 8000e7e:	e03f      	b.n	8000f00 <Send_MIDINoteOff_2+0x1e0>
	case 4:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_E4, 3, 100);
 8000e80:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000e84:	2364      	movs	r3, #100	; 0x64
 8000e86:	2203      	movs	r2, #3
 8000e88:	482b      	ldr	r0, [pc, #172]	; (8000f38 <Send_MIDINoteOff_2+0x218>)
 8000e8a:	f001 fc46 	bl	800271a <HAL_UART_Transmit>
		break;
 8000e8e:	e037      	b.n	8000f00 <Send_MIDINoteOff_2+0x1e0>
	case 5:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_F4, 3, 100);
 8000e90:	f107 0120 	add.w	r1, r7, #32
 8000e94:	2364      	movs	r3, #100	; 0x64
 8000e96:	2203      	movs	r2, #3
 8000e98:	4827      	ldr	r0, [pc, #156]	; (8000f38 <Send_MIDINoteOff_2+0x218>)
 8000e9a:	f001 fc3e 	bl	800271a <HAL_UART_Transmit>
		break;
 8000e9e:	e02f      	b.n	8000f00 <Send_MIDINoteOff_2+0x1e0>
	case 6:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Fsos4, 3, 100);
 8000ea0:	f107 011c 	add.w	r1, r7, #28
 8000ea4:	2364      	movs	r3, #100	; 0x64
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	4823      	ldr	r0, [pc, #140]	; (8000f38 <Send_MIDINoteOff_2+0x218>)
 8000eaa:	f001 fc36 	bl	800271a <HAL_UART_Transmit>
		break;
 8000eae:	e027      	b.n	8000f00 <Send_MIDINoteOff_2+0x1e0>

	case 7:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_G4, 3, 100);
 8000eb0:	f107 0118 	add.w	r1, r7, #24
 8000eb4:	2364      	movs	r3, #100	; 0x64
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	481f      	ldr	r0, [pc, #124]	; (8000f38 <Send_MIDINoteOff_2+0x218>)
 8000eba:	f001 fc2e 	bl	800271a <HAL_UART_Transmit>
		break;
 8000ebe:	e01f      	b.n	8000f00 <Send_MIDINoteOff_2+0x1e0>

	case 8:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Gsos4, 3, 100);
 8000ec0:	f107 0114 	add.w	r1, r7, #20
 8000ec4:	2364      	movs	r3, #100	; 0x64
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	481b      	ldr	r0, [pc, #108]	; (8000f38 <Send_MIDINoteOff_2+0x218>)
 8000eca:	f001 fc26 	bl	800271a <HAL_UART_Transmit>
		break;
 8000ece:	e017      	b.n	8000f00 <Send_MIDINoteOff_2+0x1e0>

	case 9:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_A4, 3, 100);
 8000ed0:	f107 0110 	add.w	r1, r7, #16
 8000ed4:	2364      	movs	r3, #100	; 0x64
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	4817      	ldr	r0, [pc, #92]	; (8000f38 <Send_MIDINoteOff_2+0x218>)
 8000eda:	f001 fc1e 	bl	800271a <HAL_UART_Transmit>
		break;
 8000ede:	e00f      	b.n	8000f00 <Send_MIDINoteOff_2+0x1e0>

	case 10:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Asos4, 3, 100);
 8000ee0:	f107 010c 	add.w	r1, r7, #12
 8000ee4:	2364      	movs	r3, #100	; 0x64
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	4813      	ldr	r0, [pc, #76]	; (8000f38 <Send_MIDINoteOff_2+0x218>)
 8000eea:	f001 fc16 	bl	800271a <HAL_UART_Transmit>
		break;
 8000eee:	e007      	b.n	8000f00 <Send_MIDINoteOff_2+0x1e0>

	case 11:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_B4, 3, 100);
 8000ef0:	f107 0108 	add.w	r1, r7, #8
 8000ef4:	2364      	movs	r3, #100	; 0x64
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	480f      	ldr	r0, [pc, #60]	; (8000f38 <Send_MIDINoteOff_2+0x218>)
 8000efa:	f001 fc0e 	bl	800271a <HAL_UART_Transmit>
		break;
 8000efe:	bf00      	nop
	}
}
 8000f00:	bf00      	nop
 8000f02:	3738      	adds	r7, #56	; 0x38
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	08002f04 	.word	0x08002f04
 8000f0c:	08002f08 	.word	0x08002f08
 8000f10:	08002f0c 	.word	0x08002f0c
 8000f14:	08002f10 	.word	0x08002f10
 8000f18:	08002f14 	.word	0x08002f14
 8000f1c:	08002f18 	.word	0x08002f18
 8000f20:	08002f1c 	.word	0x08002f1c
 8000f24:	08002f20 	.word	0x08002f20
 8000f28:	08002f24 	.word	0x08002f24
 8000f2c:	08002f28 	.word	0x08002f28
 8000f30:	08002f2c 	.word	0x08002f2c
 8000f34:	08002f30 	.word	0x08002f30
 8000f38:	2000008c 	.word	0x2000008c

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f40:	f000 fa74 	bl	800142c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f44:	f000 f80a 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f48:	f000 f8ca 	bl	80010e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f4c:	f000 f874 	bl	8001038 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f50:	f000 f89c 	bl	800108c <MX_USART3_UART_Init>
//	  WriteControl(9);
//	  sprintf(msg, "La lectura es %d \n\r",HAL_GPIO_ReadPin(GPIOA, I1_Pin));
//	  sprintf(msg, "La lectura es %d \n\r",HAL_GPIO_ReadPin(GPIOA, I2_Pin));
//	  printf(msg);

	  BucleMIDI();
 8000f54:	f7ff fad4 	bl	8000500 <BucleMIDI>
 8000f58:	e7fc      	b.n	8000f54 <main+0x18>
	...

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	; 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	2234      	movs	r2, #52	; 0x34
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 ff4a 	bl	8002e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <SystemClock_Config+0xd4>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	4a29      	ldr	r2, [pc, #164]	; (8001030 <SystemClock_Config+0xd4>)
 8000f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <SystemClock_Config+0xd4>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <SystemClock_Config+0xd8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fa8:	4a22      	ldr	r2, [pc, #136]	; (8001034 <SystemClock_Config+0xd8>)
 8000faa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b20      	ldr	r3, [pc, #128]	; (8001034 <SystemClock_Config+0xd8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fd0:	2310      	movs	r3, #16
 8000fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fd4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fd8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 f8aa 	bl	8002144 <HAL_RCC_OscConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ff6:	f000 f907 	bl	8001208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffe:	2302      	movs	r3, #2
 8001000:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	2102      	movs	r1, #2
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fd4a 	bl	8001ab0 <HAL_RCC_ClockConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001022:	f000 f8f1 	bl	8001208 <Error_Handler>
  }
}
 8001026:	bf00      	nop
 8001028:	3750      	adds	r7, #80	; 0x50
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40007000 	.word	0x40007000

08001038 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <MX_USART2_UART_Init+0x50>)
 8001040:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 8001044:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001048:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 800105e:	220c      	movs	r2, #12
 8001060:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 8001070:	f001 fb06 	bl	8002680 <HAL_UART_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800107a:	f000 f8c5 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000048 	.word	0x20000048
 8001088:	40004400 	.word	0x40004400

0800108c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_USART3_UART_Init+0x50>)
 8001094:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 31250; //MIDI
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 8001098:	f647 2212 	movw	r2, #31250	; 0x7a12
 800109c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010c4:	f001 fadc 	bl	8002680 <HAL_UART_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010ce:	f000 f89b 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000008c 	.word	0x2000008c
 80010dc:	40004800 	.word	0x40004800

080010e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <MX_GPIO_Init+0x118>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a3e      	ldr	r2, [pc, #248]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b3c      	ldr	r3, [pc, #240]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a37      	ldr	r2, [pc, #220]	; (80011f8 <MX_GPIO_Init+0x118>)
 800111c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a30      	ldr	r2, [pc, #192]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a29      	ldr	r2, [pc, #164]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <MX_GPIO_Init+0x118>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|IS2_Pin|S3_Pin|OUT_MODE_Pin
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 800116c:	4823      	ldr	r0, [pc, #140]	; (80011fc <MX_GPIO_Init+0x11c>)
 800116e:	f000 fc85 	bl	8001a7c <HAL_GPIO_WritePin>
                          |S0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S2_Pin|S1_Pin|IS1_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 618c 	mov.w	r1, #1120	; 0x460
 8001178:	4821      	ldr	r0, [pc, #132]	; (8001200 <MX_GPIO_Init+0x120>)
 800117a:	f000 fc7f 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800117e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001184:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	481b      	ldr	r0, [pc, #108]	; (8001204 <MX_GPIO_Init+0x124>)
 8001196:	f000 fac5 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : I1_Pin I2_Pin */
  GPIO_InitStruct.Pin = I1_Pin|I2_Pin;
 800119a:	2303      	movs	r3, #3
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4813      	ldr	r0, [pc, #76]	; (80011fc <MX_GPIO_Init+0x11c>)
 80011ae:	f000 fab9 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin IS2_Pin S3_Pin OUT_MODE_Pin
                           S0_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|IS2_Pin|S3_Pin|OUT_MODE_Pin
 80011b2:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
 80011b6:	617b      	str	r3, [r7, #20]
                          |S0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	480c      	ldr	r0, [pc, #48]	; (80011fc <MX_GPIO_Init+0x11c>)
 80011cc:	f000 faaa 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin IS1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin|IS1_Pin;
 80011d0:	f44f 638c 	mov.w	r3, #1120	; 0x460
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_GPIO_Init+0x120>)
 80011ea:	f000 fa9b 	bl	8001724 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400
 8001204:	40020800 	.word	0x40020800

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
}
 800120e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001210:	e7fe      	b.n	8001210 <Error_Handler+0x8>
	...

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_MspInit+0x4c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <HAL_MspInit+0x4c>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001228:	6453      	str	r3, [r2, #68]	; 0x44
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <HAL_MspInit+0x4c>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_MspInit+0x4c>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a08      	ldr	r2, [pc, #32]	; (8001260 <HAL_MspInit+0x4c>)
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_MspInit+0x4c>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001252:	2007      	movs	r0, #7
 8001254:	f000 fa32 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800

08001264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a32      	ldr	r2, [pc, #200]	; (800134c <HAL_UART_MspInit+0xe8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12c      	bne.n	80012e0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	4b31      	ldr	r3, [pc, #196]	; (8001350 <HAL_UART_MspInit+0xec>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a30      	ldr	r2, [pc, #192]	; (8001350 <HAL_UART_MspInit+0xec>)
 8001290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <HAL_UART_MspInit+0xec>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <HAL_UART_MspInit+0xec>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a29      	ldr	r2, [pc, #164]	; (8001350 <HAL_UART_MspInit+0xec>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b27      	ldr	r3, [pc, #156]	; (8001350 <HAL_UART_MspInit+0xec>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012be:	230c      	movs	r3, #12
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ce:	2307      	movs	r3, #7
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	481e      	ldr	r0, [pc, #120]	; (8001354 <HAL_UART_MspInit+0xf0>)
 80012da:	f000 fa23 	bl	8001724 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012de:	e031      	b.n	8001344 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <HAL_UART_MspInit+0xf4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d12c      	bne.n	8001344 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_UART_MspInit+0xec>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <HAL_UART_MspInit+0xec>)
 80012f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_UART_MspInit+0xec>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_UART_MspInit+0xec>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a10      	ldr	r2, [pc, #64]	; (8001350 <HAL_UART_MspInit+0xec>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_UART_MspInit+0xec>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001322:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001334:	2307      	movs	r3, #7
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <HAL_UART_MspInit+0xf8>)
 8001340:	f000 f9f0 	bl	8001724 <HAL_GPIO_Init>
}
 8001344:	bf00      	nop
 8001346:	3730      	adds	r7, #48	; 0x30
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40004400 	.word	0x40004400
 8001350:	40023800 	.word	0x40023800
 8001354:	40020000 	.word	0x40020000
 8001358:	40004800 	.word	0x40004800
 800135c:	40020800 	.word	0x40020800

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ac:	f000 f890 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001410 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013de:	490e      	ldr	r1, [pc, #56]	; (8001418 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e0:	4a0e      	ldr	r2, [pc, #56]	; (800141c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f4:	4c0b      	ldr	r4, [pc, #44]	; (8001424 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001402:	f7ff ffd7 	bl	80013b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001406:	f001 fd05 	bl	8002e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140a:	f7ff fd97 	bl	8000f3c <main>
  bx  lr    
 800140e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001410:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800141c:	08002f5c 	.word	0x08002f5c
  ldr r2, =_sbss
 8001420:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001424:	200000d4 	.word	0x200000d4

08001428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC_IRQHandler>
	...

0800142c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <HAL_Init+0x40>)
 8001436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800143a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0a      	ldr	r2, [pc, #40]	; (800146c <HAL_Init+0x40>)
 8001442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a07      	ldr	r2, [pc, #28]	; (800146c <HAL_Init+0x40>)
 800144e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001454:	2003      	movs	r0, #3
 8001456:	f000 f931 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145a:	2000      	movs	r0, #0
 800145c:	f000 f808 	bl	8001470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001460:	f7ff fed8 	bl	8001214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023c00 	.word	0x40023c00

08001470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_InitTick+0x54>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_InitTick+0x58>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f93b 	bl	800170a <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d80a      	bhi.n	80014ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f000 f911 	bl	80016d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4a06      	ldr	r2, [pc, #24]	; (80014cc <HAL_InitTick+0x5c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000004 	.word	0x20000004

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008
 80014f4:	200000d0 	.word	0x200000d0

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	200000d0 	.word	0x200000d0

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffde 	bl	80014f8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008

08001558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff47 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff5c 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff8e 	bl	8001610 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff5d 	bl	80015bc <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ffb0 	bl	8001678 <SysTick_Config>
 8001718:	4603      	mov	r3, r0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	e165      	b.n	8001a0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001740:	2201      	movs	r2, #1
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	429a      	cmp	r2, r3
 800175a:	f040 8154 	bne.w	8001a06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d005      	beq.n	8001776 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001772:	2b02      	cmp	r3, #2
 8001774:	d130      	bne.n	80017d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ac:	2201      	movs	r2, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 0201 	and.w	r2, r3, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d017      	beq.n	8001814 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d123      	bne.n	8001868 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	08da      	lsrs	r2, r3, #3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3208      	adds	r2, #8
 8001828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	220f      	movs	r2, #15
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	08da      	lsrs	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3208      	adds	r2, #8
 8001862:	69b9      	ldr	r1, [r7, #24]
 8001864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0203 	and.w	r2, r3, #3
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80ae 	beq.w	8001a06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b5d      	ldr	r3, [pc, #372]	; (8001a24 <HAL_GPIO_Init+0x300>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a5c      	ldr	r2, [pc, #368]	; (8001a24 <HAL_GPIO_Init+0x300>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b5a      	ldr	r3, [pc, #360]	; (8001a24 <HAL_GPIO_Init+0x300>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c6:	4a58      	ldr	r2, [pc, #352]	; (8001a28 <HAL_GPIO_Init+0x304>)
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	220f      	movs	r2, #15
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4f      	ldr	r2, [pc, #316]	; (8001a2c <HAL_GPIO_Init+0x308>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d025      	beq.n	800193e <HAL_GPIO_Init+0x21a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4e      	ldr	r2, [pc, #312]	; (8001a30 <HAL_GPIO_Init+0x30c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d01f      	beq.n	800193a <HAL_GPIO_Init+0x216>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4d      	ldr	r2, [pc, #308]	; (8001a34 <HAL_GPIO_Init+0x310>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d019      	beq.n	8001936 <HAL_GPIO_Init+0x212>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4c      	ldr	r2, [pc, #304]	; (8001a38 <HAL_GPIO_Init+0x314>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d013      	beq.n	8001932 <HAL_GPIO_Init+0x20e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4b      	ldr	r2, [pc, #300]	; (8001a3c <HAL_GPIO_Init+0x318>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d00d      	beq.n	800192e <HAL_GPIO_Init+0x20a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4a      	ldr	r2, [pc, #296]	; (8001a40 <HAL_GPIO_Init+0x31c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d007      	beq.n	800192a <HAL_GPIO_Init+0x206>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a49      	ldr	r2, [pc, #292]	; (8001a44 <HAL_GPIO_Init+0x320>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d101      	bne.n	8001926 <HAL_GPIO_Init+0x202>
 8001922:	2306      	movs	r3, #6
 8001924:	e00c      	b.n	8001940 <HAL_GPIO_Init+0x21c>
 8001926:	2307      	movs	r3, #7
 8001928:	e00a      	b.n	8001940 <HAL_GPIO_Init+0x21c>
 800192a:	2305      	movs	r3, #5
 800192c:	e008      	b.n	8001940 <HAL_GPIO_Init+0x21c>
 800192e:	2304      	movs	r3, #4
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x21c>
 8001932:	2303      	movs	r3, #3
 8001934:	e004      	b.n	8001940 <HAL_GPIO_Init+0x21c>
 8001936:	2302      	movs	r3, #2
 8001938:	e002      	b.n	8001940 <HAL_GPIO_Init+0x21c>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_GPIO_Init+0x21c>
 800193e:	2300      	movs	r3, #0
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f002 0203 	and.w	r2, r2, #3
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	4093      	lsls	r3, r2
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001950:	4935      	ldr	r1, [pc, #212]	; (8001a28 <HAL_GPIO_Init+0x304>)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195e:	4b3a      	ldr	r3, [pc, #232]	; (8001a48 <HAL_GPIO_Init+0x324>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001982:	4a31      	ldr	r2, [pc, #196]	; (8001a48 <HAL_GPIO_Init+0x324>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001988:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_GPIO_Init+0x324>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ac:	4a26      	ldr	r2, [pc, #152]	; (8001a48 <HAL_GPIO_Init+0x324>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019b2:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <HAL_GPIO_Init+0x324>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d6:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <HAL_GPIO_Init+0x324>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019dc:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_GPIO_Init+0x324>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a00:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <HAL_GPIO_Init+0x324>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	2b0f      	cmp	r3, #15
 8001a10:	f67f ae96 	bls.w	8001740 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	40020400 	.word	0x40020400
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020c00 	.word	0x40020c00
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40021400 	.word	0x40021400
 8001a44:	40021800 	.word	0x40021800
 8001a48:	40013c00 	.word	0x40013c00

08001a4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	887b      	ldrh	r3, [r7, #2]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
 8001a68:	e001      	b.n	8001a6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a98:	e003      	b.n	8001aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	041a      	lsls	r2, r3, #16
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	619a      	str	r2, [r3, #24]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0cc      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d90c      	bls.n	8001aec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b65      	ldr	r3, [pc, #404]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0b8      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b04:	4b59      	ldr	r3, [pc, #356]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4a58      	ldr	r2, [pc, #352]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a52      	ldr	r2, [pc, #328]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b28:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	494d      	ldr	r1, [pc, #308]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d044      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d119      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e07f      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d003      	beq.n	8001b6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6e:	4b3f      	ldr	r3, [pc, #252]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e06f      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7e:	4b3b      	ldr	r3, [pc, #236]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e067      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8e:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f023 0203 	bic.w	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4934      	ldr	r1, [pc, #208]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba0:	f7ff fcaa 	bl	80014f8 <HAL_GetTick>
 8001ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	e00a      	b.n	8001bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba8:	f7ff fca6 	bl	80014f8 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e04f      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 020c 	and.w	r2, r3, #12
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d1eb      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d20c      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e032      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4916      	ldr	r1, [pc, #88]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d009      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	490e      	ldr	r1, [pc, #56]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c36:	f000 f855 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	490a      	ldr	r1, [pc, #40]	; (8001c70 <HAL_RCC_ClockConfig+0x1c0>)
 8001c48:	5ccb      	ldrb	r3, [r1, r3]
 8001c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fc0a 	bl	8001470 <HAL_InitTick>

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	08002f34 	.word	0x08002f34
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000004 	.word	0x20000004

08001c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000

08001c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c98:	f7ff fff0 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	0a9b      	lsrs	r3, r3, #10
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	4903      	ldr	r1, [pc, #12]	; (8001cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	08002f44 	.word	0x08002f44

08001cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cc0:	f7ff ffdc 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	0b5b      	lsrs	r3, r3, #13
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4903      	ldr	r1, [pc, #12]	; (8001ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	08002f44 	.word	0x08002f44

08001ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ce8:	b0ae      	sub	sp, #184	; 0xb8
 8001cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d0a:	4bcb      	ldr	r3, [pc, #812]	; (8002038 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	f200 8206 	bhi.w	8002124 <HAL_RCC_GetSysClockFreq+0x440>
 8001d18:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1e:	bf00      	nop
 8001d20:	08001d55 	.word	0x08001d55
 8001d24:	08002125 	.word	0x08002125
 8001d28:	08002125 	.word	0x08002125
 8001d2c:	08002125 	.word	0x08002125
 8001d30:	08001d5d 	.word	0x08001d5d
 8001d34:	08002125 	.word	0x08002125
 8001d38:	08002125 	.word	0x08002125
 8001d3c:	08002125 	.word	0x08002125
 8001d40:	08001d65 	.word	0x08001d65
 8001d44:	08002125 	.word	0x08002125
 8001d48:	08002125 	.word	0x08002125
 8001d4c:	08002125 	.word	0x08002125
 8001d50:	08001f55 	.word	0x08001f55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d54:	4bb9      	ldr	r3, [pc, #740]	; (800203c <HAL_RCC_GetSysClockFreq+0x358>)
 8001d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001d5a:	e1e7      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d5c:	4bb8      	ldr	r3, [pc, #736]	; (8002040 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d62:	e1e3      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d64:	4bb4      	ldr	r3, [pc, #720]	; (8002038 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d70:	4bb1      	ldr	r3, [pc, #708]	; (8002038 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d071      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7c:	4bae      	ldr	r3, [pc, #696]	; (8002038 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	099b      	lsrs	r3, r3, #6
 8001d82:	2200      	movs	r2, #0
 8001d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d88:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001da2:	4622      	mov	r2, r4
 8001da4:	462b      	mov	r3, r5
 8001da6:	f04f 0000 	mov.w	r0, #0
 8001daa:	f04f 0100 	mov.w	r1, #0
 8001dae:	0159      	lsls	r1, r3, #5
 8001db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001db4:	0150      	lsls	r0, r2, #5
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4621      	mov	r1, r4
 8001dbc:	1a51      	subs	r1, r2, r1
 8001dbe:	6439      	str	r1, [r7, #64]	; 0x40
 8001dc0:	4629      	mov	r1, r5
 8001dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8001dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001dd4:	4649      	mov	r1, r9
 8001dd6:	018b      	lsls	r3, r1, #6
 8001dd8:	4641      	mov	r1, r8
 8001dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dde:	4641      	mov	r1, r8
 8001de0:	018a      	lsls	r2, r1, #6
 8001de2:	4641      	mov	r1, r8
 8001de4:	1a51      	subs	r1, r2, r1
 8001de6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001de8:	4649      	mov	r1, r9
 8001dea:	eb63 0301 	sbc.w	r3, r3, r1
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001dfc:	4649      	mov	r1, r9
 8001dfe:	00cb      	lsls	r3, r1, #3
 8001e00:	4641      	mov	r1, r8
 8001e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e06:	4641      	mov	r1, r8
 8001e08:	00ca      	lsls	r2, r1, #3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4622      	mov	r2, r4
 8001e12:	189b      	adds	r3, r3, r2
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
 8001e16:	462b      	mov	r3, r5
 8001e18:	460a      	mov	r2, r1
 8001e1a:	eb42 0303 	adc.w	r3, r2, r3
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	024b      	lsls	r3, r1, #9
 8001e30:	4621      	mov	r1, r4
 8001e32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e36:	4621      	mov	r1, r4
 8001e38:	024a      	lsls	r2, r1, #9
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e42:	2200      	movs	r2, #0
 8001e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001e50:	f7fe f9d8 	bl	8000204 <__aeabi_uldivmod>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4613      	mov	r3, r2
 8001e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e5e:	e067      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
    	  pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e60:	4b75      	ldr	r3, [pc, #468]	; (8002038 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	099b      	lsrs	r3, r3, #6
 8001e66:	2200      	movs	r2, #0
 8001e68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e6c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e78:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001e82:	4622      	mov	r2, r4
 8001e84:	462b      	mov	r3, r5
 8001e86:	f04f 0000 	mov.w	r0, #0
 8001e8a:	f04f 0100 	mov.w	r1, #0
 8001e8e:	0159      	lsls	r1, r3, #5
 8001e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e94:	0150      	lsls	r0, r2, #5
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	1a51      	subs	r1, r2, r1
 8001e9e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001eb4:	4649      	mov	r1, r9
 8001eb6:	018b      	lsls	r3, r1, #6
 8001eb8:	4641      	mov	r1, r8
 8001eba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ebe:	4641      	mov	r1, r8
 8001ec0:	018a      	lsls	r2, r1, #6
 8001ec2:	4641      	mov	r1, r8
 8001ec4:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ec8:	4649      	mov	r1, r9
 8001eca:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001eda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ede:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ee2:	4692      	mov	sl, r2
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	eb1a 0303 	adds.w	r3, sl, r3
 8001eec:	623b      	str	r3, [r7, #32]
 8001eee:	462b      	mov	r3, r5
 8001ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f02:	4629      	mov	r1, r5
 8001f04:	028b      	lsls	r3, r1, #10
 8001f06:	4621      	mov	r1, r4
 8001f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	028a      	lsls	r2, r1, #10
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f18:	2200      	movs	r2, #0
 8001f1a:	673b      	str	r3, [r7, #112]	; 0x70
 8001f1c:	677a      	str	r2, [r7, #116]	; 0x74
 8001f1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001f22:	f7fe f96f 	bl	8000204 <__aeabi_uldivmod>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f30:	4b41      	ldr	r3, [pc, #260]	; (8002038 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	0c1b      	lsrs	r3, r3, #16
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f52:	e0eb      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f54:	4b38      	ldr	r3, [pc, #224]	; (8002038 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f60:	4b35      	ldr	r3, [pc, #212]	; (8002038 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d06b      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f6c:	4b32      	ldr	r3, [pc, #200]	; (8002038 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	099b      	lsrs	r3, r3, #6
 8001f72:	2200      	movs	r2, #0
 8001f74:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8001f80:	2300      	movs	r3, #0
 8001f82:	667b      	str	r3, [r7, #100]	; 0x64
 8001f84:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f88:	4622      	mov	r2, r4
 8001f8a:	462b      	mov	r3, r5
 8001f8c:	f04f 0000 	mov.w	r0, #0
 8001f90:	f04f 0100 	mov.w	r1, #0
 8001f94:	0159      	lsls	r1, r3, #5
 8001f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f9a:	0150      	lsls	r0, r2, #5
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	1a51      	subs	r1, r2, r1
 8001fa4:	61b9      	str	r1, [r7, #24]
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	eb63 0301 	sbc.w	r3, r3, r1
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001fba:	4659      	mov	r1, fp
 8001fbc:	018b      	lsls	r3, r1, #6
 8001fbe:	4651      	mov	r1, sl
 8001fc0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fc4:	4651      	mov	r1, sl
 8001fc6:	018a      	lsls	r2, r1, #6
 8001fc8:	4651      	mov	r1, sl
 8001fca:	ebb2 0801 	subs.w	r8, r2, r1
 8001fce:	4659      	mov	r1, fp
 8001fd0:	eb63 0901 	sbc.w	r9, r3, r1
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fe0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fe4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fe8:	4690      	mov	r8, r2
 8001fea:	4699      	mov	r9, r3
 8001fec:	4623      	mov	r3, r4
 8001fee:	eb18 0303 	adds.w	r3, r8, r3
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	462b      	mov	r3, r5
 8001ff6:	eb49 0303 	adc.w	r3, r9, r3
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002008:	4629      	mov	r1, r5
 800200a:	024b      	lsls	r3, r1, #9
 800200c:	4621      	mov	r1, r4
 800200e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002012:	4621      	mov	r1, r4
 8002014:	024a      	lsls	r2, r1, #9
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
 800201a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800201e:	2200      	movs	r2, #0
 8002020:	65bb      	str	r3, [r7, #88]	; 0x58
 8002022:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002024:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002028:	f7fe f8ec 	bl	8000204 <__aeabi_uldivmod>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4613      	mov	r3, r2
 8002032:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002036:	e065      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x420>
 8002038:	40023800 	.word	0x40023800
 800203c:	00f42400 	.word	0x00f42400
 8002040:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002044:	4b3d      	ldr	r3, [pc, #244]	; (800213c <HAL_RCC_GetSysClockFreq+0x458>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	2200      	movs	r2, #0
 800204c:	4618      	mov	r0, r3
 800204e:	4611      	mov	r1, r2
 8002050:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002054:	653b      	str	r3, [r7, #80]	; 0x50
 8002056:	2300      	movs	r3, #0
 8002058:	657b      	str	r3, [r7, #84]	; 0x54
 800205a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800205e:	4642      	mov	r2, r8
 8002060:	464b      	mov	r3, r9
 8002062:	f04f 0000 	mov.w	r0, #0
 8002066:	f04f 0100 	mov.w	r1, #0
 800206a:	0159      	lsls	r1, r3, #5
 800206c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002070:	0150      	lsls	r0, r2, #5
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4641      	mov	r1, r8
 8002078:	1a51      	subs	r1, r2, r1
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	4649      	mov	r1, r9
 800207e:	eb63 0301 	sbc.w	r3, r3, r1
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002090:	4659      	mov	r1, fp
 8002092:	018b      	lsls	r3, r1, #6
 8002094:	4651      	mov	r1, sl
 8002096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800209a:	4651      	mov	r1, sl
 800209c:	018a      	lsls	r2, r1, #6
 800209e:	4651      	mov	r1, sl
 80020a0:	1a54      	subs	r4, r2, r1
 80020a2:	4659      	mov	r1, fp
 80020a4:	eb63 0501 	sbc.w	r5, r3, r1
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	00eb      	lsls	r3, r5, #3
 80020b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020b6:	00e2      	lsls	r2, r4, #3
 80020b8:	4614      	mov	r4, r2
 80020ba:	461d      	mov	r5, r3
 80020bc:	4643      	mov	r3, r8
 80020be:	18e3      	adds	r3, r4, r3
 80020c0:	603b      	str	r3, [r7, #0]
 80020c2:	464b      	mov	r3, r9
 80020c4:	eb45 0303 	adc.w	r3, r5, r3
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020d6:	4629      	mov	r1, r5
 80020d8:	028b      	lsls	r3, r1, #10
 80020da:	4621      	mov	r1, r4
 80020dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020e0:	4621      	mov	r1, r4
 80020e2:	028a      	lsls	r2, r1, #10
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020ec:	2200      	movs	r2, #0
 80020ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80020f0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80020f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020f6:	f7fe f885 	bl	8000204 <__aeabi_uldivmod>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4613      	mov	r3, r2
 8002100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002104:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_RCC_GetSysClockFreq+0x458>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	0f1b      	lsrs	r3, r3, #28
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002112:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002122:	e003      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800212a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800212c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002130:	4618      	mov	r0, r3
 8002132:	37b8      	adds	r7, #184	; 0xb8
 8002134:	46bd      	mov	sp, r7
 8002136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800
 8002140:	00f42400 	.word	0x00f42400

08002144 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e28d      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8083 	beq.w	800226a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002164:	4b94      	ldr	r3, [pc, #592]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b04      	cmp	r3, #4
 800216e:	d019      	beq.n	80021a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002170:	4b91      	ldr	r3, [pc, #580]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002178:	2b08      	cmp	r3, #8
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800217c:	4b8e      	ldr	r3, [pc, #568]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002188:	d00c      	beq.n	80021a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218a:	4b8b      	ldr	r3, [pc, #556]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d112      	bne.n	80021bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002196:	4b88      	ldr	r3, [pc, #544]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a2:	d10b      	bne.n	80021bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	4b84      	ldr	r3, [pc, #528]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d05b      	beq.n	8002268 <HAL_RCC_OscConfig+0x124>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d157      	bne.n	8002268 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e25a      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c4:	d106      	bne.n	80021d4 <HAL_RCC_OscConfig+0x90>
 80021c6:	4b7c      	ldr	r3, [pc, #496]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a7b      	ldr	r2, [pc, #492]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e01d      	b.n	8002210 <HAL_RCC_OscConfig+0xcc>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0xb4>
 80021de:	4b76      	ldr	r3, [pc, #472]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a75      	ldr	r2, [pc, #468]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 80021e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b73      	ldr	r3, [pc, #460]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a72      	ldr	r2, [pc, #456]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0xcc>
 80021f8:	4b6f      	ldr	r3, [pc, #444]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a6e      	ldr	r2, [pc, #440]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b6c      	ldr	r3, [pc, #432]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a6b      	ldr	r2, [pc, #428]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 800220a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7ff f96e 	bl	80014f8 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002220:	f7ff f96a 	bl	80014f8 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e21f      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b61      	ldr	r3, [pc, #388]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0xdc>
 800223e:	e014      	b.n	800226a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7ff f95a 	bl	80014f8 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002248:	f7ff f956 	bl	80014f8 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e20b      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	4b57      	ldr	r3, [pc, #348]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x104>
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d06f      	beq.n	8002356 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002276:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b00      	cmp	r3, #0
 8002280:	d017      	beq.n	80022b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002282:	4b4d      	ldr	r3, [pc, #308]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800228a:	2b08      	cmp	r3, #8
 800228c:	d105      	bne.n	800229a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800228e:	4b4a      	ldr	r3, [pc, #296]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00b      	beq.n	80022b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229a:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d11c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a6:	4b44      	ldr	r3, [pc, #272]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d116      	bne.n	80022e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b2:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_RCC_OscConfig+0x186>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e1d3      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ca:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4937      	ldr	r1, [pc, #220]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022de:	e03a      	b.n	8002356 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d020      	beq.n	800232a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e8:	4b34      	ldr	r3, [pc, #208]	; (80023bc <HAL_RCC_OscConfig+0x278>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7ff f903 	bl	80014f8 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f6:	f7ff f8ff 	bl	80014f8 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e1b4      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002308:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002314:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4925      	ldr	r1, [pc, #148]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 8002324:	4313      	orrs	r3, r2
 8002326:	600b      	str	r3, [r1, #0]
 8002328:	e015      	b.n	8002356 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232a:	4b24      	ldr	r3, [pc, #144]	; (80023bc <HAL_RCC_OscConfig+0x278>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7ff f8e2 	bl	80014f8 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002338:	f7ff f8de 	bl	80014f8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e193      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d036      	beq.n	80023d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d016      	beq.n	8002398 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002370:	f7ff f8c2 	bl	80014f8 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002378:	f7ff f8be 	bl	80014f8 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e173      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_OscConfig+0x274>)
 800238c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x234>
 8002396:	e01b      	b.n	80023d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239e:	f7ff f8ab 	bl	80014f8 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	e00e      	b.n	80023c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a6:	f7ff f8a7 	bl	80014f8 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d907      	bls.n	80023c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e15c      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
 80023b8:	40023800 	.word	0x40023800
 80023bc:	42470000 	.word	0x42470000
 80023c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c4:	4b8a      	ldr	r3, [pc, #552]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 80023c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1ea      	bne.n	80023a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8097 	beq.w	800250c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e2:	4b83      	ldr	r3, [pc, #524]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10f      	bne.n	800240e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	4b7f      	ldr	r3, [pc, #508]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a7e      	ldr	r2, [pc, #504]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b7c      	ldr	r3, [pc, #496]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240a:	2301      	movs	r3, #1
 800240c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240e:	4b79      	ldr	r3, [pc, #484]	; (80025f4 <HAL_RCC_OscConfig+0x4b0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	2b00      	cmp	r3, #0
 8002418:	d118      	bne.n	800244c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241a:	4b76      	ldr	r3, [pc, #472]	; (80025f4 <HAL_RCC_OscConfig+0x4b0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a75      	ldr	r2, [pc, #468]	; (80025f4 <HAL_RCC_OscConfig+0x4b0>)
 8002420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002426:	f7ff f867 	bl	80014f8 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242e:	f7ff f863 	bl	80014f8 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e118      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002440:	4b6c      	ldr	r3, [pc, #432]	; (80025f4 <HAL_RCC_OscConfig+0x4b0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d106      	bne.n	8002462 <HAL_RCC_OscConfig+0x31e>
 8002454:	4b66      	ldr	r3, [pc, #408]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002458:	4a65      	ldr	r2, [pc, #404]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6713      	str	r3, [r2, #112]	; 0x70
 8002460:	e01c      	b.n	800249c <HAL_RCC_OscConfig+0x358>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b05      	cmp	r3, #5
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x340>
 800246a:	4b61      	ldr	r3, [pc, #388]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	4a60      	ldr	r2, [pc, #384]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 8002470:	f043 0304 	orr.w	r3, r3, #4
 8002474:	6713      	str	r3, [r2, #112]	; 0x70
 8002476:	4b5e      	ldr	r3, [pc, #376]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a5d      	ldr	r2, [pc, #372]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	e00b      	b.n	800249c <HAL_RCC_OscConfig+0x358>
 8002484:	4b5a      	ldr	r3, [pc, #360]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	4a59      	ldr	r2, [pc, #356]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 800248a:	f023 0301 	bic.w	r3, r3, #1
 800248e:	6713      	str	r3, [r2, #112]	; 0x70
 8002490:	4b57      	ldr	r3, [pc, #348]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	4a56      	ldr	r2, [pc, #344]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 8002496:	f023 0304 	bic.w	r3, r3, #4
 800249a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d015      	beq.n	80024d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7ff f828 	bl	80014f8 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7ff f824 	bl	80014f8 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e0d7      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c2:	4b4b      	ldr	r3, [pc, #300]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0ee      	beq.n	80024ac <HAL_RCC_OscConfig+0x368>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d0:	f7ff f812 	bl	80014f8 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d8:	f7ff f80e 	bl	80014f8 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e0c1      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ee:	4b40      	ldr	r3, [pc, #256]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1ee      	bne.n	80024d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d105      	bne.n	800250c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002500:	4b3b      	ldr	r3, [pc, #236]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	4a3a      	ldr	r2, [pc, #232]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 8002506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80ad 	beq.w	8002670 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002516:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b08      	cmp	r3, #8
 8002520:	d060      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d145      	bne.n	80025b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252a:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <HAL_RCC_OscConfig+0x4b4>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe ffe2 	bl	80014f8 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002538:	f7fe ffde 	bl	80014f8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e093      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254a:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69da      	ldr	r2, [r3, #28]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	019b      	lsls	r3, r3, #6
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256c:	085b      	lsrs	r3, r3, #1
 800256e:	3b01      	subs	r3, #1
 8002570:	041b      	lsls	r3, r3, #16
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	061b      	lsls	r3, r3, #24
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	071b      	lsls	r3, r3, #28
 8002582:	491b      	ldr	r1, [pc, #108]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002588:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_RCC_OscConfig+0x4b4>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7fe ffb3 	bl	80014f8 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002596:	f7fe ffaf 	bl	80014f8 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e064      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x452>
 80025b4:	e05c      	b.n	8002670 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_RCC_OscConfig+0x4b4>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe ff9c 	bl	80014f8 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe ff98 	bl	80014f8 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e04d      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_OscConfig+0x4ac>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x480>
 80025e2:	e045      	b.n	8002670 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e040      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40007000 	.word	0x40007000
 80025f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025fc:	4b1f      	ldr	r3, [pc, #124]	; (800267c <HAL_RCC_OscConfig+0x538>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d030      	beq.n	800266c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002614:	429a      	cmp	r2, r3
 8002616:	d129      	bne.n	800266c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d122      	bne.n	800266c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800262c:	4013      	ands	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002634:	4293      	cmp	r3, r2
 8002636:	d119      	bne.n	800266c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	3b01      	subs	r3, #1
 8002646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d10f      	bne.n	800266c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d107      	bne.n	800266c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800

08002680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e03f      	b.n	8002712 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe fddc 	bl	8001264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2224      	movs	r2, #36	; 0x24
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f929 	bl	800291c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b08a      	sub	sp, #40	; 0x28
 800271e:	af02      	add	r7, sp, #8
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	603b      	str	r3, [r7, #0]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b20      	cmp	r3, #32
 8002738:	d17c      	bne.n	8002834 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <HAL_UART_Transmit+0x2c>
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e075      	b.n	8002836 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_UART_Transmit+0x3e>
 8002754:	2302      	movs	r3, #2
 8002756:	e06e      	b.n	8002836 <HAL_UART_Transmit+0x11c>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2221      	movs	r2, #33	; 0x21
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800276e:	f7fe fec3 	bl	80014f8 <HAL_GetTick>
 8002772:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	88fa      	ldrh	r2, [r7, #6]
 8002778:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	88fa      	ldrh	r2, [r7, #6]
 800277e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002788:	d108      	bne.n	800279c <HAL_UART_Transmit+0x82>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d104      	bne.n	800279c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	e003      	b.n	80027a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80027ac:	e02a      	b.n	8002804 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2200      	movs	r2, #0
 80027b6:	2180      	movs	r1, #128	; 0x80
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 f840 	bl	800283e <UART_WaitOnFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e036      	b.n	8002836 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10b      	bne.n	80027e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	3302      	adds	r3, #2
 80027e2:	61bb      	str	r3, [r7, #24]
 80027e4:	e007      	b.n	80027f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3301      	adds	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1cf      	bne.n	80027ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2200      	movs	r2, #0
 8002816:	2140      	movs	r1, #64	; 0x40
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f810 	bl	800283e <UART_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e006      	b.n	8002836 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b090      	sub	sp, #64	; 0x40
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	4613      	mov	r3, r2
 800284c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800284e:	e050      	b.n	80028f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002856:	d04c      	beq.n	80028f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <UART_WaitOnFlagUntilTimeout+0x30>
 800285e:	f7fe fe4b 	bl	80014f8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800286a:	429a      	cmp	r2, r3
 800286c:	d241      	bcs.n	80028f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	330c      	adds	r3, #12
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	e853 3f00 	ldrex	r3, [r3]
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	330c      	adds	r3, #12
 800288c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800288e:	637a      	str	r2, [r7, #52]	; 0x34
 8002890:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002892:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002896:	e841 2300 	strex	r3, r2, [r1]
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e5      	bne.n	800286e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3314      	adds	r3, #20
 80028a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	e853 3f00 	ldrex	r3, [r3]
 80028b0:	613b      	str	r3, [r7, #16]
   return(result);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3314      	adds	r3, #20
 80028c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028c2:	623a      	str	r2, [r7, #32]
 80028c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c6:	69f9      	ldr	r1, [r7, #28]
 80028c8:	6a3a      	ldr	r2, [r7, #32]
 80028ca:	e841 2300 	strex	r3, r2, [r1]
 80028ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1e5      	bne.n	80028a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e00f      	b.n	8002912 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4013      	ands	r3, r2
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	429a      	cmp	r2, r3
 8002900:	bf0c      	ite	eq
 8002902:	2301      	moveq	r3, #1
 8002904:	2300      	movne	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	429a      	cmp	r2, r3
 800290e:	d09f      	beq.n	8002850 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3740      	adds	r7, #64	; 0x40
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800291c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002920:	b0c0      	sub	sp, #256	; 0x100
 8002922:	af00      	add	r7, sp, #0
 8002924:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002938:	68d9      	ldr	r1, [r3, #12]
 800293a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	ea40 0301 	orr.w	r3, r0, r1
 8002944:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	431a      	orrs	r2, r3
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	431a      	orrs	r2, r3
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002974:	f021 010c 	bic.w	r1, r1, #12
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002982:	430b      	orrs	r3, r1
 8002984:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002996:	6999      	ldr	r1, [r3, #24]
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	ea40 0301 	orr.w	r3, r0, r1
 80029a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b8f      	ldr	r3, [pc, #572]	; (8002be8 <UART_SetConfig+0x2cc>)
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d005      	beq.n	80029bc <UART_SetConfig+0xa0>
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4b8d      	ldr	r3, [pc, #564]	; (8002bec <UART_SetConfig+0x2d0>)
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d104      	bne.n	80029c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029bc:	f7ff f97e 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 80029c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029c4:	e003      	b.n	80029ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029c6:	f7ff f965 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
 80029ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d8:	f040 810c 	bne.w	8002bf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029e0:	2200      	movs	r2, #0
 80029e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029ee:	4622      	mov	r2, r4
 80029f0:	462b      	mov	r3, r5
 80029f2:	1891      	adds	r1, r2, r2
 80029f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80029f6:	415b      	adcs	r3, r3
 80029f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029fe:	4621      	mov	r1, r4
 8002a00:	eb12 0801 	adds.w	r8, r2, r1
 8002a04:	4629      	mov	r1, r5
 8002a06:	eb43 0901 	adc.w	r9, r3, r1
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a1e:	4690      	mov	r8, r2
 8002a20:	4699      	mov	r9, r3
 8002a22:	4623      	mov	r3, r4
 8002a24:	eb18 0303 	adds.w	r3, r8, r3
 8002a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a2c:	462b      	mov	r3, r5
 8002a2e:	eb49 0303 	adc.w	r3, r9, r3
 8002a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	18db      	adds	r3, r3, r3
 8002a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8002a50:	4613      	mov	r3, r2
 8002a52:	eb42 0303 	adc.w	r3, r2, r3
 8002a56:	657b      	str	r3, [r7, #84]	; 0x54
 8002a58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a60:	f7fd fbd0 	bl	8000204 <__aeabi_uldivmod>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4b61      	ldr	r3, [pc, #388]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	011c      	lsls	r4, r3, #4
 8002a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a84:	4642      	mov	r2, r8
 8002a86:	464b      	mov	r3, r9
 8002a88:	1891      	adds	r1, r2, r2
 8002a8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a8c:	415b      	adcs	r3, r3
 8002a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a94:	4641      	mov	r1, r8
 8002a96:	eb12 0a01 	adds.w	sl, r2, r1
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	eb43 0b01 	adc.w	fp, r3, r1
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002aac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ab4:	4692      	mov	sl, r2
 8002ab6:	469b      	mov	fp, r3
 8002ab8:	4643      	mov	r3, r8
 8002aba:	eb1a 0303 	adds.w	r3, sl, r3
 8002abe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ac2:	464b      	mov	r3, r9
 8002ac4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ad8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002adc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	18db      	adds	r3, r3, r3
 8002ae4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	eb42 0303 	adc.w	r3, r2, r3
 8002aec:	647b      	str	r3, [r7, #68]	; 0x44
 8002aee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002af2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002af6:	f7fd fb85 	bl	8000204 <__aeabi_uldivmod>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002b02:	fba3 2301 	umull	r2, r3, r3, r1
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2264      	movs	r2, #100	; 0x64
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	1acb      	subs	r3, r1, r3
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b16:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002b18:	fba3 2302 	umull	r2, r3, r3, r2
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b24:	441c      	add	r4, r3
 8002b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b38:	4642      	mov	r2, r8
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	1891      	adds	r1, r2, r2
 8002b3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b40:	415b      	adcs	r3, r3
 8002b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b48:	4641      	mov	r1, r8
 8002b4a:	1851      	adds	r1, r2, r1
 8002b4c:	6339      	str	r1, [r7, #48]	; 0x30
 8002b4e:	4649      	mov	r1, r9
 8002b50:	414b      	adcs	r3, r1
 8002b52:	637b      	str	r3, [r7, #52]	; 0x34
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b60:	4659      	mov	r1, fp
 8002b62:	00cb      	lsls	r3, r1, #3
 8002b64:	4651      	mov	r1, sl
 8002b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	00ca      	lsls	r2, r1, #3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	4603      	mov	r3, r0
 8002b74:	4642      	mov	r2, r8
 8002b76:	189b      	adds	r3, r3, r2
 8002b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b7c:	464b      	mov	r3, r9
 8002b7e:	460a      	mov	r2, r1
 8002b80:	eb42 0303 	adc.w	r3, r2, r3
 8002b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	18db      	adds	r3, r3, r3
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	eb42 0303 	adc.w	r3, r2, r3
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002baa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bb2:	f7fd fb27 	bl	8000204 <__aeabi_uldivmod>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	2164      	movs	r1, #100	; 0x64
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	3332      	adds	r3, #50	; 0x32
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <UART_SetConfig+0x2d4>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	f003 0207 	and.w	r2, r3, #7
 8002bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4422      	add	r2, r4
 8002be2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002be4:	e106      	b.n	8002df4 <UART_SetConfig+0x4d8>
 8002be6:	bf00      	nop
 8002be8:	40011000 	.word	0x40011000
 8002bec:	40011400 	.word	0x40011400
 8002bf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c06:	4642      	mov	r2, r8
 8002c08:	464b      	mov	r3, r9
 8002c0a:	1891      	adds	r1, r2, r2
 8002c0c:	6239      	str	r1, [r7, #32]
 8002c0e:	415b      	adcs	r3, r3
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
 8002c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c16:	4641      	mov	r1, r8
 8002c18:	1854      	adds	r4, r2, r1
 8002c1a:	4649      	mov	r1, r9
 8002c1c:	eb43 0501 	adc.w	r5, r3, r1
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	00eb      	lsls	r3, r5, #3
 8002c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c2e:	00e2      	lsls	r2, r4, #3
 8002c30:	4614      	mov	r4, r2
 8002c32:	461d      	mov	r5, r3
 8002c34:	4643      	mov	r3, r8
 8002c36:	18e3      	adds	r3, r4, r3
 8002c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	eb45 0303 	adc.w	r3, r5, r3
 8002c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c62:	4629      	mov	r1, r5
 8002c64:	008b      	lsls	r3, r1, #2
 8002c66:	4621      	mov	r1, r4
 8002c68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	008a      	lsls	r2, r1, #2
 8002c70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c74:	f7fd fac6 	bl	8000204 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4b60      	ldr	r3, [pc, #384]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	011c      	lsls	r4, r3, #4
 8002c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c98:	4642      	mov	r2, r8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	1891      	adds	r1, r2, r2
 8002c9e:	61b9      	str	r1, [r7, #24]
 8002ca0:	415b      	adcs	r3, r3
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca8:	4641      	mov	r1, r8
 8002caa:	1851      	adds	r1, r2, r1
 8002cac:	6139      	str	r1, [r7, #16]
 8002cae:	4649      	mov	r1, r9
 8002cb0:	414b      	adcs	r3, r1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	00cb      	lsls	r3, r1, #3
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cca:	4651      	mov	r1, sl
 8002ccc:	00ca      	lsls	r2, r1, #3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	189b      	adds	r3, r3, r2
 8002cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cdc:	464b      	mov	r3, r9
 8002cde:	460a      	mov	r2, r1
 8002ce0:	eb42 0303 	adc.w	r3, r2, r3
 8002ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d00:	4649      	mov	r1, r9
 8002d02:	008b      	lsls	r3, r1, #2
 8002d04:	4641      	mov	r1, r8
 8002d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d0a:	4641      	mov	r1, r8
 8002d0c:	008a      	lsls	r2, r1, #2
 8002d0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d12:	f7fd fa77 	bl	8000204 <__aeabi_uldivmod>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4b38      	ldr	r3, [pc, #224]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2264      	movs	r2, #100	; 0x64
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	1acb      	subs	r3, r1, r3
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	3332      	adds	r3, #50	; 0x32
 8002d30:	4a33      	ldr	r2, [pc, #204]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d3c:	441c      	add	r4, r3
 8002d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d42:	2200      	movs	r2, #0
 8002d44:	673b      	str	r3, [r7, #112]	; 0x70
 8002d46:	677a      	str	r2, [r7, #116]	; 0x74
 8002d48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d4c:	4642      	mov	r2, r8
 8002d4e:	464b      	mov	r3, r9
 8002d50:	1891      	adds	r1, r2, r2
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	415b      	adcs	r3, r3
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	1851      	adds	r1, r2, r1
 8002d60:	6039      	str	r1, [r7, #0]
 8002d62:	4649      	mov	r1, r9
 8002d64:	414b      	adcs	r3, r1
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d74:	4659      	mov	r1, fp
 8002d76:	00cb      	lsls	r3, r1, #3
 8002d78:	4651      	mov	r1, sl
 8002d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d7e:	4651      	mov	r1, sl
 8002d80:	00ca      	lsls	r2, r1, #3
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	4642      	mov	r2, r8
 8002d8a:	189b      	adds	r3, r3, r2
 8002d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d8e:	464b      	mov	r3, r9
 8002d90:	460a      	mov	r2, r1
 8002d92:	eb42 0303 	adc.w	r3, r2, r3
 8002d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	663b      	str	r3, [r7, #96]	; 0x60
 8002da2:	667a      	str	r2, [r7, #100]	; 0x64
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002db0:	4649      	mov	r1, r9
 8002db2:	008b      	lsls	r3, r1, #2
 8002db4:	4641      	mov	r1, r8
 8002db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dba:	4641      	mov	r1, r8
 8002dbc:	008a      	lsls	r2, r1, #2
 8002dbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002dc2:	f7fd fa1f 	bl	8000204 <__aeabi_uldivmod>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd0:	095b      	lsrs	r3, r3, #5
 8002dd2:	2164      	movs	r1, #100	; 0x64
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	3332      	adds	r3, #50	; 0x32
 8002dde:	4a08      	ldr	r2, [pc, #32]	; (8002e00 <UART_SetConfig+0x4e4>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	f003 020f 	and.w	r2, r3, #15
 8002dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4422      	add	r2, r4
 8002df2:	609a      	str	r2, [r3, #8]
}
 8002df4:	bf00      	nop
 8002df6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e00:	51eb851f 	.word	0x51eb851f

08002e04 <memset>:
 8002e04:	4402      	add	r2, r0
 8002e06:	4603      	mov	r3, r0
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d100      	bne.n	8002e0e <memset+0xa>
 8002e0c:	4770      	bx	lr
 8002e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e12:	e7f9      	b.n	8002e08 <memset+0x4>

08002e14 <__libc_init_array>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	4d0d      	ldr	r5, [pc, #52]	; (8002e4c <__libc_init_array+0x38>)
 8002e18:	4c0d      	ldr	r4, [pc, #52]	; (8002e50 <__libc_init_array+0x3c>)
 8002e1a:	1b64      	subs	r4, r4, r5
 8002e1c:	10a4      	asrs	r4, r4, #2
 8002e1e:	2600      	movs	r6, #0
 8002e20:	42a6      	cmp	r6, r4
 8002e22:	d109      	bne.n	8002e38 <__libc_init_array+0x24>
 8002e24:	4d0b      	ldr	r5, [pc, #44]	; (8002e54 <__libc_init_array+0x40>)
 8002e26:	4c0c      	ldr	r4, [pc, #48]	; (8002e58 <__libc_init_array+0x44>)
 8002e28:	f000 f818 	bl	8002e5c <_init>
 8002e2c:	1b64      	subs	r4, r4, r5
 8002e2e:	10a4      	asrs	r4, r4, #2
 8002e30:	2600      	movs	r6, #0
 8002e32:	42a6      	cmp	r6, r4
 8002e34:	d105      	bne.n	8002e42 <__libc_init_array+0x2e>
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e3c:	4798      	blx	r3
 8002e3e:	3601      	adds	r6, #1
 8002e40:	e7ee      	b.n	8002e20 <__libc_init_array+0xc>
 8002e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e46:	4798      	blx	r3
 8002e48:	3601      	adds	r6, #1
 8002e4a:	e7f2      	b.n	8002e32 <__libc_init_array+0x1e>
 8002e4c:	08002f54 	.word	0x08002f54
 8002e50:	08002f54 	.word	0x08002f54
 8002e54:	08002f54 	.word	0x08002f54
 8002e58:	08002f58 	.word	0x08002f58

08002e5c <_init>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	bf00      	nop
 8002e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e62:	bc08      	pop	{r3}
 8002e64:	469e      	mov	lr, r3
 8002e66:	4770      	bx	lr

08002e68 <_fini>:
 8002e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6a:	bf00      	nop
 8002e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6e:	bc08      	pop	{r3}
 8002e70:	469e      	mov	lr, r3
 8002e72:	4770      	bx	lr
