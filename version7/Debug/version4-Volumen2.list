
version4-Volumen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d88  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002f4c  08002f4c  00012f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fcc  08002fcc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fd4  08002fd4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fd8  08002fd8  00012fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000010  08002fec  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002fec  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008787  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000173a  00000000  00000000  0002880a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  00029f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000557  00000000  00000000  0002a640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ee9  00000000  00000000  0002ab97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009a75  00000000  00000000  0004ba80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7ef8  00000000  00000000  000554f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001b34  00000000  00000000  0011d3f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0011ef24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002f34 	.word	0x08002f34

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08002f34 	.word	0x08002f34

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MIDILoop>:
uint8_t pulsado_anterior1[16] = {0}; //Guardamos el resultado anterior de cada valor de control de cada fila
uint8_t pulsado_anterior2[16] = {0};

uint8_t volumen = 0x7F;  // Inicializamos el volumen al maximo

void MIDILoop(){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
	for (uint8_t control=0; control<16; control++){ //Recorro 16 valores de control del mux: 0000 0000 hasta 0000 1111
 8000506:	2300      	movs	r3, #0
 8000508:	71fb      	strb	r3, [r7, #7]
 800050a:	e05b      	b.n	80005c4 <MIDILoop+0xc4>
		uint8_t pulsado = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	71bb      	strb	r3, [r7, #6]
		pulsado = IdentifyRow(control); //Por cada valor de control del Mux compruebo la entrada del Mux
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	4618      	mov	r0, r3
 8000514:	f000 f862 	bl	80005dc <IdentifyRow>
 8000518:	4603      	mov	r3, r0
 800051a:	71bb      	strb	r3, [r7, #6]
		if (pulsado & 0x01){ //compruebo si en la fila 1 (entrada) se ha pulsado
 800051c:	79bb      	ldrb	r3, [r7, #6]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	2b00      	cmp	r3, #0
 8000524:	d00c      	beq.n	8000540 <MIDILoop+0x40>
			if (pulsado_anterior1[control] != 1){
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	4a2a      	ldr	r2, [pc, #168]	; (80005d4 <MIDILoop+0xd4>)
 800052a:	5cd3      	ldrb	r3, [r2, r3]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d007      	beq.n	8000540 <MIDILoop+0x40>
				Send_MIDINoteOn_1_WithVolume(control);
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f96e 	bl	8000814 <Send_MIDINoteOn_1_WithVolume>
				pulsado_anterior1[control] = 1;
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <MIDILoop+0xd4>)
 800053c:	2101      	movs	r1, #1
 800053e:	54d1      	strb	r1, [r2, r3]
			}
		}
		if (!(pulsado & 0x01)){ //compruebo si en la fila 1 (entrada) se ha dejado de pulsar
 8000540:	79bb      	ldrb	r3, [r7, #6]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	2b00      	cmp	r3, #0
 8000548:	d10c      	bne.n	8000564 <MIDILoop+0x64>
			if (pulsado_anterior1[control] == 1){
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <MIDILoop+0xd4>)
 800054e:	5cd3      	ldrb	r3, [r2, r3]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d107      	bne.n	8000564 <MIDILoop+0x64>
				Send_MIDINoteOff_1(control);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fa4e 	bl	80009f8 <Send_MIDINoteOff_1>
				pulsado_anterior1[control] = 0;
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	4a1d      	ldr	r2, [pc, #116]	; (80005d4 <MIDILoop+0xd4>)
 8000560:	2100      	movs	r1, #0
 8000562:	54d1      	strb	r1, [r2, r3]
			}
		}
		if (pulsado & 0x02){ //compruebo si en la fila 1 (entrada) se ha pulsado
 8000564:	79bb      	ldrb	r3, [r7, #6]
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	2b00      	cmp	r3, #0
 800056c:	d00c      	beq.n	8000588 <MIDILoop+0x88>
			if (pulsado_anterior2[control] != 1){
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <MIDILoop+0xd8>)
 8000572:	5cd3      	ldrb	r3, [r2, r3]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d007      	beq.n	8000588 <MIDILoop+0x88>
				Send_MIDINoteOn_2WithVolume(control);
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fb4a 	bl	8000c14 <Send_MIDINoteOn_2WithVolume>
				pulsado_anterior2[control] = 1;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <MIDILoop+0xd8>)
 8000584:	2101      	movs	r1, #1
 8000586:	54d1      	strb	r1, [r2, r3]
			}
		}
		if (!(pulsado & 0x02)){ //compruebo si en la fila 2 (entrada) se ha dejado de pulsar
 8000588:	79bb      	ldrb	r3, [r7, #6]
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	2b00      	cmp	r3, #0
 8000590:	d10c      	bne.n	80005ac <MIDILoop+0xac>
			if (pulsado_anterior2[control] == 1){
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4a10      	ldr	r2, [pc, #64]	; (80005d8 <MIDILoop+0xd8>)
 8000596:	5cd3      	ldrb	r3, [r2, r3]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d107      	bne.n	80005ac <MIDILoop+0xac>
				Send_MIDINoteOff_2(control);
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fc2a 	bl	8000df8 <Send_MIDINoteOff_2>
				pulsado_anterior2[control] = 0;
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	4a0c      	ldr	r2, [pc, #48]	; (80005d8 <MIDILoop+0xd8>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	54d1      	strb	r1, [r2, r3]
			}
		}
		if ((pulsado & 0x04)){
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d003      	beq.n	80005be <MIDILoop+0xbe>
			ControlsUser(control);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f89f 	bl	80006fc <ControlsUser>
	for (uint8_t control=0; control<16; control++){ //Recorro 16 valores de control del mux: 0000 0000 hasta 0000 1111
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	3301      	adds	r3, #1
 80005c2:	71fb      	strb	r3, [r7, #7]
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b0f      	cmp	r3, #15
 80005c8:	d9a0      	bls.n	800050c <MIDILoop+0xc>
//			if(control==2){
//
//			}
//		}
	}
}
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000002c 	.word	0x2000002c
 80005d8:	2000003c 	.word	0x2000003c

080005dc <IdentifyRow>:

uint8_t IdentifyRow(uint8_t control){ //Comprobar la entrada del MUX (2 entradas)
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	WriteControl(control);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f83b 	bl	8000664 <WriteControl>
	HAL_Delay(0.030); //15 ns, tiempo de propagacion del MUX necesario
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 fffa 	bl	80015e8 <HAL_Delay>
	uint8_t pulsado = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
	uint8_t pulsado1 = false;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73bb      	strb	r3, [r7, #14]
	uint8_t pulsado2 = false;
 80005fc:	2300      	movs	r3, #0
 80005fe:	737b      	strb	r3, [r7, #13]
	uint8_t userControls = false;
 8000600:	2300      	movs	r3, #0
 8000602:	733b      	strb	r3, [r7, #12]
	pulsado1 = HAL_GPIO_ReadPin(I1_GPIO_Port, I1_Pin);  //Comprobar si se ha pulsado una nota en la fila 1
 8000604:	2101      	movs	r1, #1
 8000606:	4816      	ldr	r0, [pc, #88]	; (8000660 <IdentifyRow+0x84>)
 8000608:	f001 fa8c 	bl	8001b24 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	73bb      	strb	r3, [r7, #14]
	pulsado2 = HAL_GPIO_ReadPin(I2_GPIO_Port, I2_Pin); //Comprobar si se ha pulsado una nota en la fila 2
 8000610:	2102      	movs	r1, #2
 8000612:	4813      	ldr	r0, [pc, #76]	; (8000660 <IdentifyRow+0x84>)
 8000614:	f001 fa86 	bl	8001b24 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	737b      	strb	r3, [r7, #13]
	userControls = HAL_GPIO_ReadPin(I3_GPIO_Port, I3_Pin);
 800061c:	2110      	movs	r1, #16
 800061e:	4810      	ldr	r0, [pc, #64]	; (8000660 <IdentifyRow+0x84>)
 8000620:	f001 fa80 	bl	8001b24 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	733b      	strb	r3, [r7, #12]
	pulsado = ((pulsado1 & 0x01) | (pulsado2<<1 & 0x02) | (userControls<<2 & 0x04));
 8000628:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	b25a      	sxtb	r2, r3
 8000632:	7b7b      	ldrb	r3, [r7, #13]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	b25b      	sxtb	r3, r3
 8000638:	f003 0302 	and.w	r3, r3, #2
 800063c:	b25b      	sxtb	r3, r3
 800063e:	4313      	orrs	r3, r2
 8000640:	b25a      	sxtb	r2, r3
 8000642:	7b3b      	ldrb	r3, [r7, #12]
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	b25b      	sxtb	r3, r3
 8000648:	f003 0304 	and.w	r3, r3, #4
 800064c:	b25b      	sxtb	r3, r3
 800064e:	4313      	orrs	r3, r2
 8000650:	b25b      	sxtb	r3, r3
 8000652:	73fb      	strb	r3, [r7, #15]
	return pulsado;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40020000 	.word	0x40020000

08000664 <WriteControl>:

void WriteControl(uint8_t control){ //Escribir en el GPIO correspondiente los valores de control del MUX
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	uint8_t S0 = control & 0x01; //0000 0001
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
	uint8_t S1 = control & 0x02; //0000 0010
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 0302 	and.w	r3, r3, #2
 800067c:	73bb      	strb	r3, [r7, #14]
	uint8_t S2 = control & 0x04; //0000 0100
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f003 0304 	and.w	r3, r3, #4
 8000684:	737b      	strb	r3, [r7, #13]
	uint8_t S3 = control & 0x08; //0000 1000
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	f003 0308 	and.w	r3, r3, #8
 800068c:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, S0_Pin, S0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b00      	cmp	r3, #0
 8000692:	bf14      	ite	ne
 8000694:	2301      	movne	r3, #1
 8000696:	2300      	moveq	r3, #0
 8000698:	b2db      	uxtb	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a0:	4814      	ldr	r0, [pc, #80]	; (80006f4 <WriteControl+0x90>)
 80006a2:	f001 fa57 	bl	8001b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, S1_Pin, S1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	bf14      	ite	ne
 80006ac:	2301      	movne	r3, #1
 80006ae:	2300      	moveq	r3, #0
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	2120      	movs	r1, #32
 80006b6:	4810      	ldr	r0, [pc, #64]	; (80006f8 <WriteControl+0x94>)
 80006b8:	f001 fa4c 	bl	8001b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, S2_Pin, S2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006bc:	7b7b      	ldrb	r3, [r7, #13]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	bf14      	ite	ne
 80006c2:	2301      	movne	r3, #1
 80006c4:	2300      	moveq	r3, #0
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ce:	480a      	ldr	r0, [pc, #40]	; (80006f8 <WriteControl+0x94>)
 80006d0:	f001 fa40 	bl	8001b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, S3_Pin, S3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006d4:	7b3b      	ldrb	r3, [r7, #12]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	bf14      	ite	ne
 80006da:	2301      	movne	r3, #1
 80006dc:	2300      	moveq	r3, #0
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	461a      	mov	r2, r3
 80006e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <WriteControl+0x90>)
 80006e8:	f001 fa34 	bl	8001b54 <HAL_GPIO_WritePin>
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020400 	.word	0x40020400

080006fc <ControlsUser>:


void ControlsUser(uint8_t control){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	switch(control)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b02      	cmp	r3, #2
 800070a:	d00c      	beq.n	8000726 <ControlsUser+0x2a>
 800070c:	2b02      	cmp	r3, #2
 800070e:	dc0d      	bgt.n	800072c <ControlsUser+0x30>
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <ControlsUser+0x1e>
 8000714:	2b01      	cmp	r3, #1
 8000716:	d003      	beq.n	8000720 <ControlsUser+0x24>

	case 2:
		vibrato();
		break;
	}
}
 8000718:	e008      	b.n	800072c <ControlsUser+0x30>
		volumeDown();
 800071a:	f000 f81f 	bl	800075c <volumeDown>
		break;
 800071e:	e005      	b.n	800072c <ControlsUser+0x30>
		volumeUp();
 8000720:	f000 f808 	bl	8000734 <volumeUp>
		break;
 8000724:	e002      	b.n	800072c <ControlsUser+0x30>
		vibrato();
 8000726:	f000 f82d 	bl	8000784 <vibrato>
		break;
 800072a:	bf00      	nop
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <volumeUp>:

void volumeUp() {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
    if (volumen < 0x7F) {
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <volumeUp+0x24>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b7e      	cmp	r3, #126	; 0x7e
 800073e:	d808      	bhi.n	8000752 <volumeUp+0x1e>
        volumen++;
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <volumeUp+0x24>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	3301      	adds	r3, #1
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <volumeUp+0x24>)
 800074a:	701a      	strb	r2, [r3, #0]
        HAL_Delay(50);
 800074c:	2032      	movs	r0, #50	; 0x32
 800074e:	f000 ff4b 	bl	80015e8 <HAL_Delay>
    }
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000000 	.word	0x20000000

0800075c <volumeDown>:
void volumeDown() {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
    if (volumen > 0X00) {
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <volumeDown+0x24>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d008      	beq.n	800077a <volumeDown+0x1e>
        volumen--;
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <volumeDown+0x24>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	3b01      	subs	r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b03      	ldr	r3, [pc, #12]	; (8000780 <volumeDown+0x24>)
 8000772:	701a      	strb	r2, [r3, #0]
        HAL_Delay(50);
 8000774:	2032      	movs	r0, #50	; 0x32
 8000776:	f000 ff37 	bl	80015e8 <HAL_Delay>
    }
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000

08000784 <vibrato>:

//uint8_t anterior_vibrato = 0;
uint8_t vibrato_activo = 0;
uint8_t anterior_estado_contactovibrato = 0;

void vibrato(){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
	uint8_t vibratoOn[3] = {0xB0, 0x01, 0x7F};
 800078a:	4a1d      	ldr	r2, [pc, #116]	; (8000800 <vibrato+0x7c>)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	6812      	ldr	r2, [r2, #0]
 8000790:	4611      	mov	r1, r2
 8000792:	8019      	strh	r1, [r3, #0]
 8000794:	3302      	adds	r3, #2
 8000796:	0c12      	lsrs	r2, r2, #16
 8000798:	701a      	strb	r2, [r3, #0]
	uint8_t vibratoOff[3] = {0xB0, 0x01, 0x00};
 800079a:	4a1a      	ldr	r2, [pc, #104]	; (8000804 <vibrato+0x80>)
 800079c:	463b      	mov	r3, r7
 800079e:	6812      	ldr	r2, [r2, #0]
 80007a0:	4611      	mov	r1, r2
 80007a2:	8019      	strh	r1, [r3, #0]
 80007a4:	3302      	adds	r3, #2
 80007a6:	0c12      	lsrs	r2, r2, #16
 80007a8:	701a      	strb	r2, [r3, #0]

	uint8_t estado_contacto = HAL_GPIO_ReadPin(I3_GPIO_Port, I3_Pin);
 80007aa:	2110      	movs	r1, #16
 80007ac:	4816      	ldr	r0, [pc, #88]	; (8000808 <vibrato+0x84>)
 80007ae:	f001 f9b9 	bl	8001b24 <HAL_GPIO_ReadPin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]

		if(estado_contacto){
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d01d      	beq.n	80007f8 <vibrato+0x74>
            vibrato_activo = !vibrato_activo;
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <vibrato+0x88>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	bf0c      	ite	eq
 80007c4:	2301      	moveq	r3, #1
 80007c6:	2300      	movne	r3, #0
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <vibrato+0x88>)
 80007ce:	701a      	strb	r2, [r3, #0]
            if (vibrato_activo) {
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <vibrato+0x88>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d006      	beq.n	80007e6 <vibrato+0x62>
            	HAL_UART_Transmit(&huart3, (uint8_t*)&vibratoOn, 3, 100);
 80007d8:	1d39      	adds	r1, r7, #4
 80007da:	2364      	movs	r3, #100	; 0x64
 80007dc:	2203      	movs	r2, #3
 80007de:	480c      	ldr	r0, [pc, #48]	; (8000810 <vibrato+0x8c>)
 80007e0:	f002 f807 	bl	80027f2 <HAL_UART_Transmit>
 80007e4:	e005      	b.n	80007f2 <vibrato+0x6e>
            } else {
            	HAL_UART_Transmit(&huart3, (uint8_t*)&vibratoOff, 3, 100);
 80007e6:	4639      	mov	r1, r7
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	2203      	movs	r2, #3
 80007ec:	4808      	ldr	r0, [pc, #32]	; (8000810 <vibrato+0x8c>)
 80007ee:	f002 f800 	bl	80027f2 <HAL_UART_Transmit>
            }
            HAL_Delay(123);
 80007f2:	207b      	movs	r0, #123	; 0x7b
 80007f4:	f000 fef8 	bl	80015e8 <HAL_Delay>
//		anterior_vibrato = 1;
//	}else{
//		HAL_UART_Transmit(&huart3, (uint8_t*)&vibratoOff, 3, 100);
//		anterior_vibrato = 0;
//	}
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	08002f4c 	.word	0x08002f4c
 8000804:	08002f50 	.word	0x08002f50
 8000808:	40020000 	.word	0x40020000
 800080c:	2000004c 	.word	0x2000004c
 8000810:	20000094 	.word	0x20000094

08000814 <Send_MIDINoteOn_1_WithVolume>:
//	uint8_t vibratoOn[3] = {0x90, 0x01, 0x7F};
//	HAL_UART_Transmit(&huart3, (uint8_t*)&vibratoOn, 3, 100);
//}


void Send_MIDINoteOn_1_WithVolume(uint8_t control){ //Enviar código MIDI NoteOn de la fila 1 correspondiente a cada nota en funcion del codigo de control
 8000814:	b580      	push	{r7, lr}
 8000816:	b08e      	sub	sp, #56	; 0x38
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	//Mensajes de MIDI NoteON: canal MIDI 1, octava 3 y valocidad máxima
	uint8_t MIDI_C3[3] = {0x90, 0x30, volumen};
 800081e:	2390      	movs	r3, #144	; 0x90
 8000820:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000824:	2330      	movs	r3, #48	; 0x30
 8000826:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800082a:	4b71      	ldr	r3, [pc, #452]	; (80009f0 <Send_MIDINoteOn_1_WithVolume+0x1dc>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t MIDI_Csos3[3] = {0x90, 0x31, volumen};
 8000832:	2390      	movs	r3, #144	; 0x90
 8000834:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000838:	2331      	movs	r3, #49	; 0x31
 800083a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800083e:	4b6c      	ldr	r3, [pc, #432]	; (80009f0 <Send_MIDINoteOn_1_WithVolume+0x1dc>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t MIDI_D3[3] = {0x90, 0x32, volumen};
 8000846:	2390      	movs	r3, #144	; 0x90
 8000848:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800084c:	2332      	movs	r3, #50	; 0x32
 800084e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000852:	4b67      	ldr	r3, [pc, #412]	; (80009f0 <Send_MIDINoteOn_1_WithVolume+0x1dc>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t MIDI_Dsos3[3] = {0x90, 0x33, volumen};
 800085a:	2390      	movs	r3, #144	; 0x90
 800085c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000860:	2333      	movs	r3, #51	; 0x33
 8000862:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000866:	4b62      	ldr	r3, [pc, #392]	; (80009f0 <Send_MIDINoteOn_1_WithVolume+0x1dc>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t MIDI_E3[3] = {0x90, 0x34, volumen};
 800086e:	2390      	movs	r3, #144	; 0x90
 8000870:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000874:	2334      	movs	r3, #52	; 0x34
 8000876:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800087a:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <Send_MIDINoteOn_1_WithVolume+0x1dc>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MIDI_F3[3] = {0x90, 0x35, volumen};
 8000882:	2390      	movs	r3, #144	; 0x90
 8000884:	f887 3020 	strb.w	r3, [r7, #32]
 8000888:	2335      	movs	r3, #53	; 0x35
 800088a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800088e:	4b58      	ldr	r3, [pc, #352]	; (80009f0 <Send_MIDINoteOn_1_WithVolume+0x1dc>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t MIDI_Fsos3[3] = {0x90, 0x36, volumen};
 8000896:	2390      	movs	r3, #144	; 0x90
 8000898:	773b      	strb	r3, [r7, #28]
 800089a:	2336      	movs	r3, #54	; 0x36
 800089c:	777b      	strb	r3, [r7, #29]
 800089e:	4b54      	ldr	r3, [pc, #336]	; (80009f0 <Send_MIDINoteOn_1_WithVolume+0x1dc>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	77bb      	strb	r3, [r7, #30]
	uint8_t MIDI_G3[3] = {0x90, 0x37, volumen};
 80008a4:	2390      	movs	r3, #144	; 0x90
 80008a6:	763b      	strb	r3, [r7, #24]
 80008a8:	2337      	movs	r3, #55	; 0x37
 80008aa:	767b      	strb	r3, [r7, #25]
 80008ac:	4b50      	ldr	r3, [pc, #320]	; (80009f0 <Send_MIDINoteOn_1_WithVolume+0x1dc>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	76bb      	strb	r3, [r7, #26]
	uint8_t MIDI_Gsos3[3] = {0x90, 0x38, volumen};
 80008b2:	2390      	movs	r3, #144	; 0x90
 80008b4:	753b      	strb	r3, [r7, #20]
 80008b6:	2338      	movs	r3, #56	; 0x38
 80008b8:	757b      	strb	r3, [r7, #21]
 80008ba:	4b4d      	ldr	r3, [pc, #308]	; (80009f0 <Send_MIDINoteOn_1_WithVolume+0x1dc>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	75bb      	strb	r3, [r7, #22]
	uint8_t MIDI_A3[3] = {0x90, 0x39, volumen};
 80008c0:	2390      	movs	r3, #144	; 0x90
 80008c2:	743b      	strb	r3, [r7, #16]
 80008c4:	2339      	movs	r3, #57	; 0x39
 80008c6:	747b      	strb	r3, [r7, #17]
 80008c8:	4b49      	ldr	r3, [pc, #292]	; (80009f0 <Send_MIDINoteOn_1_WithVolume+0x1dc>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	74bb      	strb	r3, [r7, #18]
	uint8_t MIDI_Asos3[3] = {0x90, 0x3A, volumen};
 80008ce:	2390      	movs	r3, #144	; 0x90
 80008d0:	733b      	strb	r3, [r7, #12]
 80008d2:	233a      	movs	r3, #58	; 0x3a
 80008d4:	737b      	strb	r3, [r7, #13]
 80008d6:	4b46      	ldr	r3, [pc, #280]	; (80009f0 <Send_MIDINoteOn_1_WithVolume+0x1dc>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	73bb      	strb	r3, [r7, #14]
	uint8_t MIDI_B3[3] = {0x90, 0x3B, volumen};
 80008dc:	2390      	movs	r3, #144	; 0x90
 80008de:	723b      	strb	r3, [r7, #8]
 80008e0:	233b      	movs	r3, #59	; 0x3b
 80008e2:	727b      	strb	r3, [r7, #9]
 80008e4:	4b42      	ldr	r3, [pc, #264]	; (80009f0 <Send_MIDINoteOn_1_WithVolume+0x1dc>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	72bb      	strb	r3, [r7, #10]

	switch (control)
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b0b      	cmp	r3, #11
 80008ee:	d87b      	bhi.n	80009e8 <Send_MIDINoteOn_1_WithVolume+0x1d4>
 80008f0:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <Send_MIDINoteOn_1_WithVolume+0xe4>)
 80008f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f6:	bf00      	nop
 80008f8:	08000929 	.word	0x08000929
 80008fc:	08000939 	.word	0x08000939
 8000900:	08000949 	.word	0x08000949
 8000904:	08000959 	.word	0x08000959
 8000908:	08000969 	.word	0x08000969
 800090c:	08000979 	.word	0x08000979
 8000910:	08000989 	.word	0x08000989
 8000914:	08000999 	.word	0x08000999
 8000918:	080009a9 	.word	0x080009a9
 800091c:	080009b9 	.word	0x080009b9
 8000920:	080009c9 	.word	0x080009c9
 8000924:	080009d9 	.word	0x080009d9
	{
	case 0:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_C3, 3, 100);
 8000928:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	2203      	movs	r2, #3
 8000930:	4830      	ldr	r0, [pc, #192]	; (80009f4 <Send_MIDINoteOn_1_WithVolume+0x1e0>)
 8000932:	f001 ff5e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000936:	e057      	b.n	80009e8 <Send_MIDINoteOn_1_WithVolume+0x1d4>
	case 1:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Csos3, 3, 100);
 8000938:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800093c:	2364      	movs	r3, #100	; 0x64
 800093e:	2203      	movs	r2, #3
 8000940:	482c      	ldr	r0, [pc, #176]	; (80009f4 <Send_MIDINoteOn_1_WithVolume+0x1e0>)
 8000942:	f001 ff56 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000946:	e04f      	b.n	80009e8 <Send_MIDINoteOn_1_WithVolume+0x1d4>
	case 2:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_D3, 3, 100);
 8000948:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2203      	movs	r2, #3
 8000950:	4828      	ldr	r0, [pc, #160]	; (80009f4 <Send_MIDINoteOn_1_WithVolume+0x1e0>)
 8000952:	f001 ff4e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000956:	e047      	b.n	80009e8 <Send_MIDINoteOn_1_WithVolume+0x1d4>
	case 3:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Dsos3, 3, 100);
 8000958:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800095c:	2364      	movs	r3, #100	; 0x64
 800095e:	2203      	movs	r2, #3
 8000960:	4824      	ldr	r0, [pc, #144]	; (80009f4 <Send_MIDINoteOn_1_WithVolume+0x1e0>)
 8000962:	f001 ff46 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000966:	e03f      	b.n	80009e8 <Send_MIDINoteOn_1_WithVolume+0x1d4>
	case 4:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_E3, 3, 100);
 8000968:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800096c:	2364      	movs	r3, #100	; 0x64
 800096e:	2203      	movs	r2, #3
 8000970:	4820      	ldr	r0, [pc, #128]	; (80009f4 <Send_MIDINoteOn_1_WithVolume+0x1e0>)
 8000972:	f001 ff3e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000976:	e037      	b.n	80009e8 <Send_MIDINoteOn_1_WithVolume+0x1d4>
	case 5:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_F3, 3, 100);
 8000978:	f107 0120 	add.w	r1, r7, #32
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	2203      	movs	r2, #3
 8000980:	481c      	ldr	r0, [pc, #112]	; (80009f4 <Send_MIDINoteOn_1_WithVolume+0x1e0>)
 8000982:	f001 ff36 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000986:	e02f      	b.n	80009e8 <Send_MIDINoteOn_1_WithVolume+0x1d4>
	case 6:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Fsos3, 3, 100);
 8000988:	f107 011c 	add.w	r1, r7, #28
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2203      	movs	r2, #3
 8000990:	4818      	ldr	r0, [pc, #96]	; (80009f4 <Send_MIDINoteOn_1_WithVolume+0x1e0>)
 8000992:	f001 ff2e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000996:	e027      	b.n	80009e8 <Send_MIDINoteOn_1_WithVolume+0x1d4>

	case 7:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_G3, 3, 100);
 8000998:	f107 0118 	add.w	r1, r7, #24
 800099c:	2364      	movs	r3, #100	; 0x64
 800099e:	2203      	movs	r2, #3
 80009a0:	4814      	ldr	r0, [pc, #80]	; (80009f4 <Send_MIDINoteOn_1_WithVolume+0x1e0>)
 80009a2:	f001 ff26 	bl	80027f2 <HAL_UART_Transmit>
		break;
 80009a6:	e01f      	b.n	80009e8 <Send_MIDINoteOn_1_WithVolume+0x1d4>

	case 8:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Gsos3, 3, 100);
 80009a8:	f107 0114 	add.w	r1, r7, #20
 80009ac:	2364      	movs	r3, #100	; 0x64
 80009ae:	2203      	movs	r2, #3
 80009b0:	4810      	ldr	r0, [pc, #64]	; (80009f4 <Send_MIDINoteOn_1_WithVolume+0x1e0>)
 80009b2:	f001 ff1e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 80009b6:	e017      	b.n	80009e8 <Send_MIDINoteOn_1_WithVolume+0x1d4>

	case 9:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_A3, 3, 100);
 80009b8:	f107 0110 	add.w	r1, r7, #16
 80009bc:	2364      	movs	r3, #100	; 0x64
 80009be:	2203      	movs	r2, #3
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <Send_MIDINoteOn_1_WithVolume+0x1e0>)
 80009c2:	f001 ff16 	bl	80027f2 <HAL_UART_Transmit>
		break;
 80009c6:	e00f      	b.n	80009e8 <Send_MIDINoteOn_1_WithVolume+0x1d4>

	case 10:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Asos3, 3, 100);
 80009c8:	f107 010c 	add.w	r1, r7, #12
 80009cc:	2364      	movs	r3, #100	; 0x64
 80009ce:	2203      	movs	r2, #3
 80009d0:	4808      	ldr	r0, [pc, #32]	; (80009f4 <Send_MIDINoteOn_1_WithVolume+0x1e0>)
 80009d2:	f001 ff0e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 80009d6:	e007      	b.n	80009e8 <Send_MIDINoteOn_1_WithVolume+0x1d4>

	case 11:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_B3, 3, 100);
 80009d8:	f107 0108 	add.w	r1, r7, #8
 80009dc:	2364      	movs	r3, #100	; 0x64
 80009de:	2203      	movs	r2, #3
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <Send_MIDINoteOn_1_WithVolume+0x1e0>)
 80009e2:	f001 ff06 	bl	80027f2 <HAL_UART_Transmit>
		break;
 80009e6:	bf00      	nop
	}
}
 80009e8:	bf00      	nop
 80009ea:	3738      	adds	r7, #56	; 0x38
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000094 	.word	0x20000094

080009f8 <Send_MIDINoteOff_1>:


void Send_MIDINoteOff_1(uint8_t control){ //Enviar código MIDI NoteOff de la fila 1 correspondiente a cada nota en función del código de control
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	; 0x38
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
	//Mensajes de MIDI NoteOff -> velocidad 0
	uint8_t MIDI_C3[3] = {0x90, 0x30, 0x00};
 8000a02:	4a77      	ldr	r2, [pc, #476]	; (8000be0 <Send_MIDINoteOff_1+0x1e8>)
 8000a04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a08:	6812      	ldr	r2, [r2, #0]
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	8019      	strh	r1, [r3, #0]
 8000a0e:	3302      	adds	r3, #2
 8000a10:	0c12      	lsrs	r2, r2, #16
 8000a12:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Csos3[3] = {0x90, 0x31, 0x00};
 8000a14:	4a73      	ldr	r2, [pc, #460]	; (8000be4 <Send_MIDINoteOff_1+0x1ec>)
 8000a16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a1a:	6812      	ldr	r2, [r2, #0]
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	8019      	strh	r1, [r3, #0]
 8000a20:	3302      	adds	r3, #2
 8000a22:	0c12      	lsrs	r2, r2, #16
 8000a24:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_D3[3] = {0x90, 0x32, 0x00};
 8000a26:	4a70      	ldr	r2, [pc, #448]	; (8000be8 <Send_MIDINoteOff_1+0x1f0>)
 8000a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a2c:	6812      	ldr	r2, [r2, #0]
 8000a2e:	4611      	mov	r1, r2
 8000a30:	8019      	strh	r1, [r3, #0]
 8000a32:	3302      	adds	r3, #2
 8000a34:	0c12      	lsrs	r2, r2, #16
 8000a36:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Dsos3[3] = {0x90, 0x33, 0x00};
 8000a38:	4a6c      	ldr	r2, [pc, #432]	; (8000bec <Send_MIDINoteOff_1+0x1f4>)
 8000a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a3e:	6812      	ldr	r2, [r2, #0]
 8000a40:	4611      	mov	r1, r2
 8000a42:	8019      	strh	r1, [r3, #0]
 8000a44:	3302      	adds	r3, #2
 8000a46:	0c12      	lsrs	r2, r2, #16
 8000a48:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_E3[3] = {0x90, 0x34, 0x00};
 8000a4a:	4a69      	ldr	r2, [pc, #420]	; (8000bf0 <Send_MIDINoteOff_1+0x1f8>)
 8000a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a50:	6812      	ldr	r2, [r2, #0]
 8000a52:	4611      	mov	r1, r2
 8000a54:	8019      	strh	r1, [r3, #0]
 8000a56:	3302      	adds	r3, #2
 8000a58:	0c12      	lsrs	r2, r2, #16
 8000a5a:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_F3[3] = {0x90, 0x35, 0x00};
 8000a5c:	4a65      	ldr	r2, [pc, #404]	; (8000bf4 <Send_MIDINoteOff_1+0x1fc>)
 8000a5e:	f107 0320 	add.w	r3, r7, #32
 8000a62:	6812      	ldr	r2, [r2, #0]
 8000a64:	4611      	mov	r1, r2
 8000a66:	8019      	strh	r1, [r3, #0]
 8000a68:	3302      	adds	r3, #2
 8000a6a:	0c12      	lsrs	r2, r2, #16
 8000a6c:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Fsos3[3] = {0x90, 0x36, 0x00};
 8000a6e:	4a62      	ldr	r2, [pc, #392]	; (8000bf8 <Send_MIDINoteOff_1+0x200>)
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	6812      	ldr	r2, [r2, #0]
 8000a76:	4611      	mov	r1, r2
 8000a78:	8019      	strh	r1, [r3, #0]
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	0c12      	lsrs	r2, r2, #16
 8000a7e:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_G3[3] = {0x90, 0x37, 0x00};
 8000a80:	4a5e      	ldr	r2, [pc, #376]	; (8000bfc <Send_MIDINoteOff_1+0x204>)
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	6812      	ldr	r2, [r2, #0]
 8000a88:	4611      	mov	r1, r2
 8000a8a:	8019      	strh	r1, [r3, #0]
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	0c12      	lsrs	r2, r2, #16
 8000a90:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Gsos3[3] = {0x90, 0x38, 0x00};
 8000a92:	4a5b      	ldr	r2, [pc, #364]	; (8000c00 <Send_MIDINoteOff_1+0x208>)
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	8019      	strh	r1, [r3, #0]
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	0c12      	lsrs	r2, r2, #16
 8000aa2:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_A3[3] = {0x90, 0x39, 0x00};
 8000aa4:	4a57      	ldr	r2, [pc, #348]	; (8000c04 <Send_MIDINoteOff_1+0x20c>)
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	6812      	ldr	r2, [r2, #0]
 8000aac:	4611      	mov	r1, r2
 8000aae:	8019      	strh	r1, [r3, #0]
 8000ab0:	3302      	adds	r3, #2
 8000ab2:	0c12      	lsrs	r2, r2, #16
 8000ab4:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Asos3[3] = {0x90, 0x3A, 0x00};
 8000ab6:	4a54      	ldr	r2, [pc, #336]	; (8000c08 <Send_MIDINoteOff_1+0x210>)
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	6812      	ldr	r2, [r2, #0]
 8000abe:	4611      	mov	r1, r2
 8000ac0:	8019      	strh	r1, [r3, #0]
 8000ac2:	3302      	adds	r3, #2
 8000ac4:	0c12      	lsrs	r2, r2, #16
 8000ac6:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_B3[3] = {0x90, 0x3B, 0x00};
 8000ac8:	4a50      	ldr	r2, [pc, #320]	; (8000c0c <Send_MIDINoteOff_1+0x214>)
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	6812      	ldr	r2, [r2, #0]
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	8019      	strh	r1, [r3, #0]
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	0c12      	lsrs	r2, r2, #16
 8000ad8:	701a      	strb	r2, [r3, #0]

	switch (control)
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b0b      	cmp	r3, #11
 8000ade:	d87b      	bhi.n	8000bd8 <Send_MIDINoteOff_1+0x1e0>
 8000ae0:	a201      	add	r2, pc, #4	; (adr r2, 8000ae8 <Send_MIDINoteOff_1+0xf0>)
 8000ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae6:	bf00      	nop
 8000ae8:	08000b19 	.word	0x08000b19
 8000aec:	08000b29 	.word	0x08000b29
 8000af0:	08000b39 	.word	0x08000b39
 8000af4:	08000b49 	.word	0x08000b49
 8000af8:	08000b59 	.word	0x08000b59
 8000afc:	08000b69 	.word	0x08000b69
 8000b00:	08000b79 	.word	0x08000b79
 8000b04:	08000b89 	.word	0x08000b89
 8000b08:	08000b99 	.word	0x08000b99
 8000b0c:	08000ba9 	.word	0x08000ba9
 8000b10:	08000bb9 	.word	0x08000bb9
 8000b14:	08000bc9 	.word	0x08000bc9
	{
	case 0:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_C3, 3, 100);
 8000b18:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000b1c:	2364      	movs	r3, #100	; 0x64
 8000b1e:	2203      	movs	r2, #3
 8000b20:	483b      	ldr	r0, [pc, #236]	; (8000c10 <Send_MIDINoteOff_1+0x218>)
 8000b22:	f001 fe66 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000b26:	e057      	b.n	8000bd8 <Send_MIDINoteOff_1+0x1e0>
	case 1:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Csos3, 3, 100);
 8000b28:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000b2c:	2364      	movs	r3, #100	; 0x64
 8000b2e:	2203      	movs	r2, #3
 8000b30:	4837      	ldr	r0, [pc, #220]	; (8000c10 <Send_MIDINoteOff_1+0x218>)
 8000b32:	f001 fe5e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000b36:	e04f      	b.n	8000bd8 <Send_MIDINoteOff_1+0x1e0>
	case 2:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_D3, 3, 100);
 8000b38:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000b3c:	2364      	movs	r3, #100	; 0x64
 8000b3e:	2203      	movs	r2, #3
 8000b40:	4833      	ldr	r0, [pc, #204]	; (8000c10 <Send_MIDINoteOff_1+0x218>)
 8000b42:	f001 fe56 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000b46:	e047      	b.n	8000bd8 <Send_MIDINoteOff_1+0x1e0>
	case 3:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Dsos3, 3, 100);
 8000b48:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b4c:	2364      	movs	r3, #100	; 0x64
 8000b4e:	2203      	movs	r2, #3
 8000b50:	482f      	ldr	r0, [pc, #188]	; (8000c10 <Send_MIDINoteOff_1+0x218>)
 8000b52:	f001 fe4e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000b56:	e03f      	b.n	8000bd8 <Send_MIDINoteOff_1+0x1e0>
	case 4:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_E3, 3, 100);
 8000b58:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000b5c:	2364      	movs	r3, #100	; 0x64
 8000b5e:	2203      	movs	r2, #3
 8000b60:	482b      	ldr	r0, [pc, #172]	; (8000c10 <Send_MIDINoteOff_1+0x218>)
 8000b62:	f001 fe46 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000b66:	e037      	b.n	8000bd8 <Send_MIDINoteOff_1+0x1e0>
	case 5:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_F3, 3, 100);
 8000b68:	f107 0120 	add.w	r1, r7, #32
 8000b6c:	2364      	movs	r3, #100	; 0x64
 8000b6e:	2203      	movs	r2, #3
 8000b70:	4827      	ldr	r0, [pc, #156]	; (8000c10 <Send_MIDINoteOff_1+0x218>)
 8000b72:	f001 fe3e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000b76:	e02f      	b.n	8000bd8 <Send_MIDINoteOff_1+0x1e0>
	case 6:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Fsos3, 3, 100);
 8000b78:	f107 011c 	add.w	r1, r7, #28
 8000b7c:	2364      	movs	r3, #100	; 0x64
 8000b7e:	2203      	movs	r2, #3
 8000b80:	4823      	ldr	r0, [pc, #140]	; (8000c10 <Send_MIDINoteOff_1+0x218>)
 8000b82:	f001 fe36 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000b86:	e027      	b.n	8000bd8 <Send_MIDINoteOff_1+0x1e0>

	case 7:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_G3, 3, 100);
 8000b88:	f107 0118 	add.w	r1, r7, #24
 8000b8c:	2364      	movs	r3, #100	; 0x64
 8000b8e:	2203      	movs	r2, #3
 8000b90:	481f      	ldr	r0, [pc, #124]	; (8000c10 <Send_MIDINoteOff_1+0x218>)
 8000b92:	f001 fe2e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000b96:	e01f      	b.n	8000bd8 <Send_MIDINoteOff_1+0x1e0>

	case 8:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Gsos3, 3, 100);
 8000b98:	f107 0114 	add.w	r1, r7, #20
 8000b9c:	2364      	movs	r3, #100	; 0x64
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	481b      	ldr	r0, [pc, #108]	; (8000c10 <Send_MIDINoteOff_1+0x218>)
 8000ba2:	f001 fe26 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000ba6:	e017      	b.n	8000bd8 <Send_MIDINoteOff_1+0x1e0>

	case 9:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_A3, 3, 100);
 8000ba8:	f107 0110 	add.w	r1, r7, #16
 8000bac:	2364      	movs	r3, #100	; 0x64
 8000bae:	2203      	movs	r2, #3
 8000bb0:	4817      	ldr	r0, [pc, #92]	; (8000c10 <Send_MIDINoteOff_1+0x218>)
 8000bb2:	f001 fe1e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000bb6:	e00f      	b.n	8000bd8 <Send_MIDINoteOff_1+0x1e0>

	case 10:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Asos3, 3, 100);
 8000bb8:	f107 010c 	add.w	r1, r7, #12
 8000bbc:	2364      	movs	r3, #100	; 0x64
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	4813      	ldr	r0, [pc, #76]	; (8000c10 <Send_MIDINoteOff_1+0x218>)
 8000bc2:	f001 fe16 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000bc6:	e007      	b.n	8000bd8 <Send_MIDINoteOff_1+0x1e0>

	case 11:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_B3, 3, 100);
 8000bc8:	f107 0108 	add.w	r1, r7, #8
 8000bcc:	2364      	movs	r3, #100	; 0x64
 8000bce:	2203      	movs	r2, #3
 8000bd0:	480f      	ldr	r0, [pc, #60]	; (8000c10 <Send_MIDINoteOff_1+0x218>)
 8000bd2:	f001 fe0e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000bd6:	bf00      	nop
	}
}
 8000bd8:	bf00      	nop
 8000bda:	3738      	adds	r7, #56	; 0x38
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	08002f54 	.word	0x08002f54
 8000be4:	08002f58 	.word	0x08002f58
 8000be8:	08002f5c 	.word	0x08002f5c
 8000bec:	08002f60 	.word	0x08002f60
 8000bf0:	08002f64 	.word	0x08002f64
 8000bf4:	08002f68 	.word	0x08002f68
 8000bf8:	08002f6c 	.word	0x08002f6c
 8000bfc:	08002f70 	.word	0x08002f70
 8000c00:	08002f74 	.word	0x08002f74
 8000c04:	08002f78 	.word	0x08002f78
 8000c08:	08002f7c 	.word	0x08002f7c
 8000c0c:	08002f80 	.word	0x08002f80
 8000c10:	20000094 	.word	0x20000094

08000c14 <Send_MIDINoteOn_2WithVolume>:

void Send_MIDINoteOn_2WithVolume(uint8_t control){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08e      	sub	sp, #56	; 0x38
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	//Mensajes de MIDI NoteON: canal MIDI 1, octava 4 y valocidad máxima
	uint8_t MIDI_C4[3] = {0x90, 0x3C, volumen};
 8000c1e:	2390      	movs	r3, #144	; 0x90
 8000c20:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000c24:	233c      	movs	r3, #60	; 0x3c
 8000c26:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000c2a:	4b71      	ldr	r3, [pc, #452]	; (8000df0 <Send_MIDINoteOn_2WithVolume+0x1dc>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t MIDI_Csos4[3] = {0x90, 0x3D, volumen};
 8000c32:	2390      	movs	r3, #144	; 0x90
 8000c34:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000c38:	233d      	movs	r3, #61	; 0x3d
 8000c3a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8000c3e:	4b6c      	ldr	r3, [pc, #432]	; (8000df0 <Send_MIDINoteOn_2WithVolume+0x1dc>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t MIDI_D4[3] = {0x90, 0x3E, volumen};
 8000c46:	2390      	movs	r3, #144	; 0x90
 8000c48:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000c4c:	233e      	movs	r3, #62	; 0x3e
 8000c4e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000c52:	4b67      	ldr	r3, [pc, #412]	; (8000df0 <Send_MIDINoteOn_2WithVolume+0x1dc>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t MIDI_Dsos4[3] = {0x90, 0x3F, volumen};
 8000c5a:	2390      	movs	r3, #144	; 0x90
 8000c5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000c60:	233f      	movs	r3, #63	; 0x3f
 8000c62:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000c66:	4b62      	ldr	r3, [pc, #392]	; (8000df0 <Send_MIDINoteOn_2WithVolume+0x1dc>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t MIDI_E4[3] = {0x90, 0x40, volumen};
 8000c6e:	2390      	movs	r3, #144	; 0x90
 8000c70:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000c74:	2340      	movs	r3, #64	; 0x40
 8000c76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000c7a:	4b5d      	ldr	r3, [pc, #372]	; (8000df0 <Send_MIDINoteOn_2WithVolume+0x1dc>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MIDI_F4[3] = {0x90, 0x41, volumen};
 8000c82:	2390      	movs	r3, #144	; 0x90
 8000c84:	f887 3020 	strb.w	r3, [r7, #32]
 8000c88:	2341      	movs	r3, #65	; 0x41
 8000c8a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000c8e:	4b58      	ldr	r3, [pc, #352]	; (8000df0 <Send_MIDINoteOn_2WithVolume+0x1dc>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t MIDI_Fsos4[3] = {0x90, 0x42, volumen};
 8000c96:	2390      	movs	r3, #144	; 0x90
 8000c98:	773b      	strb	r3, [r7, #28]
 8000c9a:	2342      	movs	r3, #66	; 0x42
 8000c9c:	777b      	strb	r3, [r7, #29]
 8000c9e:	4b54      	ldr	r3, [pc, #336]	; (8000df0 <Send_MIDINoteOn_2WithVolume+0x1dc>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	77bb      	strb	r3, [r7, #30]
	uint8_t MIDI_G4[3] = {0x90, 0x43, volumen};
 8000ca4:	2390      	movs	r3, #144	; 0x90
 8000ca6:	763b      	strb	r3, [r7, #24]
 8000ca8:	2343      	movs	r3, #67	; 0x43
 8000caa:	767b      	strb	r3, [r7, #25]
 8000cac:	4b50      	ldr	r3, [pc, #320]	; (8000df0 <Send_MIDINoteOn_2WithVolume+0x1dc>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	76bb      	strb	r3, [r7, #26]
	uint8_t MIDI_Gsos4[3] = {0x90, 0x44, volumen};
 8000cb2:	2390      	movs	r3, #144	; 0x90
 8000cb4:	753b      	strb	r3, [r7, #20]
 8000cb6:	2344      	movs	r3, #68	; 0x44
 8000cb8:	757b      	strb	r3, [r7, #21]
 8000cba:	4b4d      	ldr	r3, [pc, #308]	; (8000df0 <Send_MIDINoteOn_2WithVolume+0x1dc>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	75bb      	strb	r3, [r7, #22]
	uint8_t MIDI_A4[3] = {0x90, 0x45, volumen};
 8000cc0:	2390      	movs	r3, #144	; 0x90
 8000cc2:	743b      	strb	r3, [r7, #16]
 8000cc4:	2345      	movs	r3, #69	; 0x45
 8000cc6:	747b      	strb	r3, [r7, #17]
 8000cc8:	4b49      	ldr	r3, [pc, #292]	; (8000df0 <Send_MIDINoteOn_2WithVolume+0x1dc>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	74bb      	strb	r3, [r7, #18]
	uint8_t MIDI_Asos4[3] = {0x90, 0x46, volumen};
 8000cce:	2390      	movs	r3, #144	; 0x90
 8000cd0:	733b      	strb	r3, [r7, #12]
 8000cd2:	2346      	movs	r3, #70	; 0x46
 8000cd4:	737b      	strb	r3, [r7, #13]
 8000cd6:	4b46      	ldr	r3, [pc, #280]	; (8000df0 <Send_MIDINoteOn_2WithVolume+0x1dc>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	73bb      	strb	r3, [r7, #14]
	uint8_t MIDI_B4[3] = {0x90, 0x47, volumen};
 8000cdc:	2390      	movs	r3, #144	; 0x90
 8000cde:	723b      	strb	r3, [r7, #8]
 8000ce0:	2347      	movs	r3, #71	; 0x47
 8000ce2:	727b      	strb	r3, [r7, #9]
 8000ce4:	4b42      	ldr	r3, [pc, #264]	; (8000df0 <Send_MIDINoteOn_2WithVolume+0x1dc>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	72bb      	strb	r3, [r7, #10]

	switch (control)
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b0b      	cmp	r3, #11
 8000cee:	d87b      	bhi.n	8000de8 <Send_MIDINoteOn_2WithVolume+0x1d4>
 8000cf0:	a201      	add	r2, pc, #4	; (adr r2, 8000cf8 <Send_MIDINoteOn_2WithVolume+0xe4>)
 8000cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf6:	bf00      	nop
 8000cf8:	08000d29 	.word	0x08000d29
 8000cfc:	08000d39 	.word	0x08000d39
 8000d00:	08000d49 	.word	0x08000d49
 8000d04:	08000d59 	.word	0x08000d59
 8000d08:	08000d69 	.word	0x08000d69
 8000d0c:	08000d79 	.word	0x08000d79
 8000d10:	08000d89 	.word	0x08000d89
 8000d14:	08000d99 	.word	0x08000d99
 8000d18:	08000da9 	.word	0x08000da9
 8000d1c:	08000db9 	.word	0x08000db9
 8000d20:	08000dc9 	.word	0x08000dc9
 8000d24:	08000dd9 	.word	0x08000dd9
	{
	case 0:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_C4, 3, 100);
 8000d28:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000d2c:	2364      	movs	r3, #100	; 0x64
 8000d2e:	2203      	movs	r2, #3
 8000d30:	4830      	ldr	r0, [pc, #192]	; (8000df4 <Send_MIDINoteOn_2WithVolume+0x1e0>)
 8000d32:	f001 fd5e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000d36:	e057      	b.n	8000de8 <Send_MIDINoteOn_2WithVolume+0x1d4>
	case 1:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Csos4, 3, 100);
 8000d38:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d3c:	2364      	movs	r3, #100	; 0x64
 8000d3e:	2203      	movs	r2, #3
 8000d40:	482c      	ldr	r0, [pc, #176]	; (8000df4 <Send_MIDINoteOn_2WithVolume+0x1e0>)
 8000d42:	f001 fd56 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000d46:	e04f      	b.n	8000de8 <Send_MIDINoteOn_2WithVolume+0x1d4>
	case 2:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_D4, 3, 100);
 8000d48:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000d4c:	2364      	movs	r3, #100	; 0x64
 8000d4e:	2203      	movs	r2, #3
 8000d50:	4828      	ldr	r0, [pc, #160]	; (8000df4 <Send_MIDINoteOn_2WithVolume+0x1e0>)
 8000d52:	f001 fd4e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000d56:	e047      	b.n	8000de8 <Send_MIDINoteOn_2WithVolume+0x1d4>
	case 3:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Dsos4, 3, 100);
 8000d58:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d5c:	2364      	movs	r3, #100	; 0x64
 8000d5e:	2203      	movs	r2, #3
 8000d60:	4824      	ldr	r0, [pc, #144]	; (8000df4 <Send_MIDINoteOn_2WithVolume+0x1e0>)
 8000d62:	f001 fd46 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000d66:	e03f      	b.n	8000de8 <Send_MIDINoteOn_2WithVolume+0x1d4>
	case 4:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_E4, 3, 100);
 8000d68:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000d6c:	2364      	movs	r3, #100	; 0x64
 8000d6e:	2203      	movs	r2, #3
 8000d70:	4820      	ldr	r0, [pc, #128]	; (8000df4 <Send_MIDINoteOn_2WithVolume+0x1e0>)
 8000d72:	f001 fd3e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000d76:	e037      	b.n	8000de8 <Send_MIDINoteOn_2WithVolume+0x1d4>
	case 5:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_F4, 3, 100);
 8000d78:	f107 0120 	add.w	r1, r7, #32
 8000d7c:	2364      	movs	r3, #100	; 0x64
 8000d7e:	2203      	movs	r2, #3
 8000d80:	481c      	ldr	r0, [pc, #112]	; (8000df4 <Send_MIDINoteOn_2WithVolume+0x1e0>)
 8000d82:	f001 fd36 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000d86:	e02f      	b.n	8000de8 <Send_MIDINoteOn_2WithVolume+0x1d4>
	case 6:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Fsos4, 3, 100);
 8000d88:	f107 011c 	add.w	r1, r7, #28
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2203      	movs	r2, #3
 8000d90:	4818      	ldr	r0, [pc, #96]	; (8000df4 <Send_MIDINoteOn_2WithVolume+0x1e0>)
 8000d92:	f001 fd2e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000d96:	e027      	b.n	8000de8 <Send_MIDINoteOn_2WithVolume+0x1d4>

	case 7:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_G4, 3, 100);
 8000d98:	f107 0118 	add.w	r1, r7, #24
 8000d9c:	2364      	movs	r3, #100	; 0x64
 8000d9e:	2203      	movs	r2, #3
 8000da0:	4814      	ldr	r0, [pc, #80]	; (8000df4 <Send_MIDINoteOn_2WithVolume+0x1e0>)
 8000da2:	f001 fd26 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000da6:	e01f      	b.n	8000de8 <Send_MIDINoteOn_2WithVolume+0x1d4>

	case 8:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Gsos4, 3, 100);
 8000da8:	f107 0114 	add.w	r1, r7, #20
 8000dac:	2364      	movs	r3, #100	; 0x64
 8000dae:	2203      	movs	r2, #3
 8000db0:	4810      	ldr	r0, [pc, #64]	; (8000df4 <Send_MIDINoteOn_2WithVolume+0x1e0>)
 8000db2:	f001 fd1e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000db6:	e017      	b.n	8000de8 <Send_MIDINoteOn_2WithVolume+0x1d4>

	case 9:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_A4, 3, 100);
 8000db8:	f107 0110 	add.w	r1, r7, #16
 8000dbc:	2364      	movs	r3, #100	; 0x64
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <Send_MIDINoteOn_2WithVolume+0x1e0>)
 8000dc2:	f001 fd16 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000dc6:	e00f      	b.n	8000de8 <Send_MIDINoteOn_2WithVolume+0x1d4>

	case 10:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Asos4, 3, 100);
 8000dc8:	f107 010c 	add.w	r1, r7, #12
 8000dcc:	2364      	movs	r3, #100	; 0x64
 8000dce:	2203      	movs	r2, #3
 8000dd0:	4808      	ldr	r0, [pc, #32]	; (8000df4 <Send_MIDINoteOn_2WithVolume+0x1e0>)
 8000dd2:	f001 fd0e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000dd6:	e007      	b.n	8000de8 <Send_MIDINoteOn_2WithVolume+0x1d4>

	case 11:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_B4, 3, 100);
 8000dd8:	f107 0108 	add.w	r1, r7, #8
 8000ddc:	2364      	movs	r3, #100	; 0x64
 8000dde:	2203      	movs	r2, #3
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <Send_MIDINoteOn_2WithVolume+0x1e0>)
 8000de2:	f001 fd06 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000de6:	bf00      	nop
	}
}
 8000de8:	bf00      	nop
 8000dea:	3738      	adds	r7, #56	; 0x38
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000094 	.word	0x20000094

08000df8 <Send_MIDINoteOff_2>:

void Send_MIDINoteOff_2(uint8_t control){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08e      	sub	sp, #56	; 0x38
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
	//Mensajes de MIDI NoteOff -> velocidad 0
	uint8_t MIDI_C4[3] = {0x90, 0x3C, 0x00};
 8000e02:	4a77      	ldr	r2, [pc, #476]	; (8000fe0 <Send_MIDINoteOff_2+0x1e8>)
 8000e04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	8019      	strh	r1, [r3, #0]
 8000e0e:	3302      	adds	r3, #2
 8000e10:	0c12      	lsrs	r2, r2, #16
 8000e12:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Csos4[3] = {0x90, 0x3D, 0x00};
 8000e14:	4a73      	ldr	r2, [pc, #460]	; (8000fe4 <Send_MIDINoteOff_2+0x1ec>)
 8000e16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e1a:	6812      	ldr	r2, [r2, #0]
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	8019      	strh	r1, [r3, #0]
 8000e20:	3302      	adds	r3, #2
 8000e22:	0c12      	lsrs	r2, r2, #16
 8000e24:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_D4[3] = {0x90, 0x3E, 0x00};
 8000e26:	4a70      	ldr	r2, [pc, #448]	; (8000fe8 <Send_MIDINoteOff_2+0x1f0>)
 8000e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	8019      	strh	r1, [r3, #0]
 8000e32:	3302      	adds	r3, #2
 8000e34:	0c12      	lsrs	r2, r2, #16
 8000e36:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Dsos4[3] = {0x90, 0x3F, 0x00};
 8000e38:	4a6c      	ldr	r2, [pc, #432]	; (8000fec <Send_MIDINoteOff_2+0x1f4>)
 8000e3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	4611      	mov	r1, r2
 8000e42:	8019      	strh	r1, [r3, #0]
 8000e44:	3302      	adds	r3, #2
 8000e46:	0c12      	lsrs	r2, r2, #16
 8000e48:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_E4[3] = {0x90, 0x40, 0x00};
 8000e4a:	4a69      	ldr	r2, [pc, #420]	; (8000ff0 <Send_MIDINoteOff_2+0x1f8>)
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	6812      	ldr	r2, [r2, #0]
 8000e52:	4611      	mov	r1, r2
 8000e54:	8019      	strh	r1, [r3, #0]
 8000e56:	3302      	adds	r3, #2
 8000e58:	0c12      	lsrs	r2, r2, #16
 8000e5a:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_F4[3] = {0x90, 0x41, 0x00};
 8000e5c:	4a65      	ldr	r2, [pc, #404]	; (8000ff4 <Send_MIDINoteOff_2+0x1fc>)
 8000e5e:	f107 0320 	add.w	r3, r7, #32
 8000e62:	6812      	ldr	r2, [r2, #0]
 8000e64:	4611      	mov	r1, r2
 8000e66:	8019      	strh	r1, [r3, #0]
 8000e68:	3302      	adds	r3, #2
 8000e6a:	0c12      	lsrs	r2, r2, #16
 8000e6c:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Fsos4[3] = {0x90, 0x42, 0x00};
 8000e6e:	4a62      	ldr	r2, [pc, #392]	; (8000ff8 <Send_MIDINoteOff_2+0x200>)
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	6812      	ldr	r2, [r2, #0]
 8000e76:	4611      	mov	r1, r2
 8000e78:	8019      	strh	r1, [r3, #0]
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	0c12      	lsrs	r2, r2, #16
 8000e7e:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_G4[3] = {0x90, 0x43, 0x00};
 8000e80:	4a5e      	ldr	r2, [pc, #376]	; (8000ffc <Send_MIDINoteOff_2+0x204>)
 8000e82:	f107 0318 	add.w	r3, r7, #24
 8000e86:	6812      	ldr	r2, [r2, #0]
 8000e88:	4611      	mov	r1, r2
 8000e8a:	8019      	strh	r1, [r3, #0]
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	0c12      	lsrs	r2, r2, #16
 8000e90:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Gsos4[3] = {0x90, 0x44, 0x00};
 8000e92:	4a5b      	ldr	r2, [pc, #364]	; (8001000 <Send_MIDINoteOff_2+0x208>)
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	8019      	strh	r1, [r3, #0]
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	0c12      	lsrs	r2, r2, #16
 8000ea2:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_A4[3] = {0x90, 0x45, 0x00};
 8000ea4:	4a57      	ldr	r2, [pc, #348]	; (8001004 <Send_MIDINoteOff_2+0x20c>)
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	6812      	ldr	r2, [r2, #0]
 8000eac:	4611      	mov	r1, r2
 8000eae:	8019      	strh	r1, [r3, #0]
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	0c12      	lsrs	r2, r2, #16
 8000eb4:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_Asos4[3] = {0x90, 0x46, 0x00};
 8000eb6:	4a54      	ldr	r2, [pc, #336]	; (8001008 <Send_MIDINoteOff_2+0x210>)
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	6812      	ldr	r2, [r2, #0]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	8019      	strh	r1, [r3, #0]
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	0c12      	lsrs	r2, r2, #16
 8000ec6:	701a      	strb	r2, [r3, #0]
	uint8_t MIDI_B4[3] = {0x90, 0x47, 0x00};
 8000ec8:	4a50      	ldr	r2, [pc, #320]	; (800100c <Send_MIDINoteOff_2+0x214>)
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	6812      	ldr	r2, [r2, #0]
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	8019      	strh	r1, [r3, #0]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	0c12      	lsrs	r2, r2, #16
 8000ed8:	701a      	strb	r2, [r3, #0]

	switch (control)
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b0b      	cmp	r3, #11
 8000ede:	d87b      	bhi.n	8000fd8 <Send_MIDINoteOff_2+0x1e0>
 8000ee0:	a201      	add	r2, pc, #4	; (adr r2, 8000ee8 <Send_MIDINoteOff_2+0xf0>)
 8000ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee6:	bf00      	nop
 8000ee8:	08000f19 	.word	0x08000f19
 8000eec:	08000f29 	.word	0x08000f29
 8000ef0:	08000f39 	.word	0x08000f39
 8000ef4:	08000f49 	.word	0x08000f49
 8000ef8:	08000f59 	.word	0x08000f59
 8000efc:	08000f69 	.word	0x08000f69
 8000f00:	08000f79 	.word	0x08000f79
 8000f04:	08000f89 	.word	0x08000f89
 8000f08:	08000f99 	.word	0x08000f99
 8000f0c:	08000fa9 	.word	0x08000fa9
 8000f10:	08000fb9 	.word	0x08000fb9
 8000f14:	08000fc9 	.word	0x08000fc9
	{
	case 0:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_C4, 3, 100);
 8000f18:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000f1c:	2364      	movs	r3, #100	; 0x64
 8000f1e:	2203      	movs	r2, #3
 8000f20:	483b      	ldr	r0, [pc, #236]	; (8001010 <Send_MIDINoteOff_2+0x218>)
 8000f22:	f001 fc66 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000f26:	e057      	b.n	8000fd8 <Send_MIDINoteOff_2+0x1e0>
	case 1:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Csos4, 3, 100);
 8000f28:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000f2c:	2364      	movs	r3, #100	; 0x64
 8000f2e:	2203      	movs	r2, #3
 8000f30:	4837      	ldr	r0, [pc, #220]	; (8001010 <Send_MIDINoteOff_2+0x218>)
 8000f32:	f001 fc5e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000f36:	e04f      	b.n	8000fd8 <Send_MIDINoteOff_2+0x1e0>
	case 2:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_D4, 3, 100);
 8000f38:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000f3c:	2364      	movs	r3, #100	; 0x64
 8000f3e:	2203      	movs	r2, #3
 8000f40:	4833      	ldr	r0, [pc, #204]	; (8001010 <Send_MIDINoteOff_2+0x218>)
 8000f42:	f001 fc56 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000f46:	e047      	b.n	8000fd8 <Send_MIDINoteOff_2+0x1e0>
	case 3:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Dsos4, 3, 100);
 8000f48:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f4c:	2364      	movs	r3, #100	; 0x64
 8000f4e:	2203      	movs	r2, #3
 8000f50:	482f      	ldr	r0, [pc, #188]	; (8001010 <Send_MIDINoteOff_2+0x218>)
 8000f52:	f001 fc4e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000f56:	e03f      	b.n	8000fd8 <Send_MIDINoteOff_2+0x1e0>
	case 4:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_E4, 3, 100);
 8000f58:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000f5c:	2364      	movs	r3, #100	; 0x64
 8000f5e:	2203      	movs	r2, #3
 8000f60:	482b      	ldr	r0, [pc, #172]	; (8001010 <Send_MIDINoteOff_2+0x218>)
 8000f62:	f001 fc46 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000f66:	e037      	b.n	8000fd8 <Send_MIDINoteOff_2+0x1e0>
	case 5:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_F4, 3, 100);
 8000f68:	f107 0120 	add.w	r1, r7, #32
 8000f6c:	2364      	movs	r3, #100	; 0x64
 8000f6e:	2203      	movs	r2, #3
 8000f70:	4827      	ldr	r0, [pc, #156]	; (8001010 <Send_MIDINoteOff_2+0x218>)
 8000f72:	f001 fc3e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000f76:	e02f      	b.n	8000fd8 <Send_MIDINoteOff_2+0x1e0>
	case 6:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Fsos4, 3, 100);
 8000f78:	f107 011c 	add.w	r1, r7, #28
 8000f7c:	2364      	movs	r3, #100	; 0x64
 8000f7e:	2203      	movs	r2, #3
 8000f80:	4823      	ldr	r0, [pc, #140]	; (8001010 <Send_MIDINoteOff_2+0x218>)
 8000f82:	f001 fc36 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000f86:	e027      	b.n	8000fd8 <Send_MIDINoteOff_2+0x1e0>

	case 7:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_G4, 3, 100);
 8000f88:	f107 0118 	add.w	r1, r7, #24
 8000f8c:	2364      	movs	r3, #100	; 0x64
 8000f8e:	2203      	movs	r2, #3
 8000f90:	481f      	ldr	r0, [pc, #124]	; (8001010 <Send_MIDINoteOff_2+0x218>)
 8000f92:	f001 fc2e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000f96:	e01f      	b.n	8000fd8 <Send_MIDINoteOff_2+0x1e0>

	case 8:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Gsos4, 3, 100);
 8000f98:	f107 0114 	add.w	r1, r7, #20
 8000f9c:	2364      	movs	r3, #100	; 0x64
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	481b      	ldr	r0, [pc, #108]	; (8001010 <Send_MIDINoteOff_2+0x218>)
 8000fa2:	f001 fc26 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000fa6:	e017      	b.n	8000fd8 <Send_MIDINoteOff_2+0x1e0>

	case 9:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_A4, 3, 100);
 8000fa8:	f107 0110 	add.w	r1, r7, #16
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	2203      	movs	r2, #3
 8000fb0:	4817      	ldr	r0, [pc, #92]	; (8001010 <Send_MIDINoteOff_2+0x218>)
 8000fb2:	f001 fc1e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000fb6:	e00f      	b.n	8000fd8 <Send_MIDINoteOff_2+0x1e0>

	case 10:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_Asos4, 3, 100);
 8000fb8:	f107 010c 	add.w	r1, r7, #12
 8000fbc:	2364      	movs	r3, #100	; 0x64
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	4813      	ldr	r0, [pc, #76]	; (8001010 <Send_MIDINoteOff_2+0x218>)
 8000fc2:	f001 fc16 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000fc6:	e007      	b.n	8000fd8 <Send_MIDINoteOff_2+0x1e0>

	case 11:
		HAL_UART_Transmit(&huart3, (uint8_t*)&MIDI_B4, 3, 100);
 8000fc8:	f107 0108 	add.w	r1, r7, #8
 8000fcc:	2364      	movs	r3, #100	; 0x64
 8000fce:	2203      	movs	r2, #3
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <Send_MIDINoteOff_2+0x218>)
 8000fd2:	f001 fc0e 	bl	80027f2 <HAL_UART_Transmit>
		break;
 8000fd6:	bf00      	nop
	}
}
 8000fd8:	bf00      	nop
 8000fda:	3738      	adds	r7, #56	; 0x38
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	08002f84 	.word	0x08002f84
 8000fe4:	08002f88 	.word	0x08002f88
 8000fe8:	08002f8c 	.word	0x08002f8c
 8000fec:	08002f90 	.word	0x08002f90
 8000ff0:	08002f94 	.word	0x08002f94
 8000ff4:	08002f98 	.word	0x08002f98
 8000ff8:	08002f9c 	.word	0x08002f9c
 8000ffc:	08002fa0 	.word	0x08002fa0
 8001000:	08002fa4 	.word	0x08002fa4
 8001004:	08002fa8 	.word	0x08002fa8
 8001008:	08002fac 	.word	0x08002fac
 800100c:	08002fb0 	.word	0x08002fb0
 8001010:	20000094 	.word	0x20000094

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f000 fa74 	bl	8001504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101c:	f000 f80a 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001020:	f000 f8ca 	bl	80011b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001024:	f000 f874 	bl	8001110 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001028:	f000 f89c 	bl	8001164 <MX_USART3_UART_Init>
//	  WriteControl(9);
//	  sprintf(msg, "La lectura es %d \n\r",HAL_GPIO_ReadPin(GPIOA, I1_Pin));
//	  sprintf(msg, "La lectura es %d \n\r",HAL_GPIO_ReadPin(GPIOA, I2_Pin));
//	  printf(msg);

	  MIDILoop();
 800102c:	f7ff fa68 	bl	8000500 <MIDILoop>
 8001030:	e7fc      	b.n	800102c <main+0x18>
	...

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	; 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	2234      	movs	r2, #52	; 0x34
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f001 ff4a 	bl	8002edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <SystemClock_Config+0xd4>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a29      	ldr	r2, [pc, #164]	; (8001108 <SystemClock_Config+0xd4>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <SystemClock_Config+0xd4>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <SystemClock_Config+0xd8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001080:	4a22      	ldr	r2, [pc, #136]	; (800110c <SystemClock_Config+0xd8>)
 8001082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <SystemClock_Config+0xd8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001094:	2302      	movs	r3, #2
 8001096:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001098:	2301      	movs	r3, #1
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109c:	2310      	movs	r3, #16
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a0:	2302      	movs	r3, #2
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010a8:	2310      	movs	r3, #16
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010b2:	2304      	movs	r3, #4
 80010b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4618      	mov	r0, r3
 80010c4:	f001 f8aa 	bl	800221c <HAL_RCC_OscConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010ce:	f000 f907 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d2:	230f      	movs	r3, #15
 80010d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d6:	2302      	movs	r3, #2
 80010d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	2102      	movs	r1, #2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fd4a 	bl	8001b88 <HAL_RCC_ClockConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010fa:	f000 f8f1 	bl	80012e0 <Error_Handler>
  }
}
 80010fe:	bf00      	nop
 8001100:	3750      	adds	r7, #80	; 0x50
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <MX_USART2_UART_Init+0x50>)
 8001118:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <MX_USART2_UART_Init+0x4c>)
 800111c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001120:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_USART2_UART_Init+0x4c>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001136:	220c      	movs	r2, #12
 8001138:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <MX_USART2_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001148:	f001 fb06 	bl	8002758 <HAL_UART_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001152:	f000 f8c5 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000050 	.word	0x20000050
 8001160:	40004400 	.word	0x40004400

08001164 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USART3_UART_Init+0x4c>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_USART3_UART_Init+0x50>)
 800116c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 31250;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_USART3_UART_Init+0x4c>)
 8001170:	f647 2212 	movw	r2, #31250	; 0x7a12
 8001174:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USART3_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USART3_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USART3_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USART3_UART_Init+0x4c>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USART3_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USART3_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USART3_UART_Init+0x4c>)
 800119c:	f001 fadc 	bl	8002758 <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011a6:	f000 f89b 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000094 	.word	0x20000094
 80011b4:	40004800 	.word	0x40004800

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <MX_GPIO_Init+0x118>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a3e      	ldr	r2, [pc, #248]	; (80012d0 <MX_GPIO_Init+0x118>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b3c      	ldr	r3, [pc, #240]	; (80012d0 <MX_GPIO_Init+0x118>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <MX_GPIO_Init+0x118>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a37      	ldr	r2, [pc, #220]	; (80012d0 <MX_GPIO_Init+0x118>)
 80011f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <MX_GPIO_Init+0x118>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <MX_GPIO_Init+0x118>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a30      	ldr	r2, [pc, #192]	; (80012d0 <MX_GPIO_Init+0x118>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <MX_GPIO_Init+0x118>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <MX_GPIO_Init+0x118>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a29      	ldr	r2, [pc, #164]	; (80012d0 <MX_GPIO_Init+0x118>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <MX_GPIO_Init+0x118>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|IS3_Pin|IS2_Pin|S3_Pin
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001244:	4823      	ldr	r0, [pc, #140]	; (80012d4 <MX_GPIO_Init+0x11c>)
 8001246:	f000 fc85 	bl	8001b54 <HAL_GPIO_WritePin>
                          |OUT_MODE_Pin|S0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S2_Pin|S1_Pin|IS1_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 618c 	mov.w	r1, #1120	; 0x460
 8001250:	4821      	ldr	r0, [pc, #132]	; (80012d8 <MX_GPIO_Init+0x120>)
 8001252:	f000 fc7f 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800125c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	481b      	ldr	r0, [pc, #108]	; (80012dc <MX_GPIO_Init+0x124>)
 800126e:	f000 fac5 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pins : I1_Pin I2_Pin I3_Pin */
  GPIO_InitStruct.Pin = I1_Pin|I2_Pin|I3_Pin;
 8001272:	2313      	movs	r3, #19
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800127a:	2302      	movs	r3, #2
 800127c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	4813      	ldr	r0, [pc, #76]	; (80012d4 <MX_GPIO_Init+0x11c>)
 8001286:	f000 fab9 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin IS3_Pin IS2_Pin S3_Pin
                           OUT_MODE_Pin S0_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|IS3_Pin|IS2_Pin|S3_Pin
 800128a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800128e:	617b      	str	r3, [r7, #20]
                          |OUT_MODE_Pin|S0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	480c      	ldr	r0, [pc, #48]	; (80012d4 <MX_GPIO_Init+0x11c>)
 80012a4:	f000 faaa 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin IS1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin|IS1_Pin;
 80012a8:	f44f 638c 	mov.w	r3, #1120	; 0x460
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_GPIO_Init+0x120>)
 80012c2:	f000 fa9b 	bl	80017fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020800 	.word	0x40020800

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <Error_Handler+0x8>
	...

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <HAL_MspInit+0x4c>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <HAL_MspInit+0x4c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_MspInit+0x4c>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_MspInit+0x4c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800132a:	2007      	movs	r0, #7
 800132c:	f000 fa32 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800

0800133c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08c      	sub	sp, #48	; 0x30
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a32      	ldr	r2, [pc, #200]	; (8001424 <HAL_UART_MspInit+0xe8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d12c      	bne.n	80013b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	4b31      	ldr	r3, [pc, #196]	; (8001428 <HAL_UART_MspInit+0xec>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a30      	ldr	r2, [pc, #192]	; (8001428 <HAL_UART_MspInit+0xec>)
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <HAL_UART_MspInit+0xec>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <HAL_UART_MspInit+0xec>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a29      	ldr	r2, [pc, #164]	; (8001428 <HAL_UART_MspInit+0xec>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b27      	ldr	r3, [pc, #156]	; (8001428 <HAL_UART_MspInit+0xec>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001396:	230c      	movs	r3, #12
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013a6:	2307      	movs	r3, #7
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	481e      	ldr	r0, [pc, #120]	; (800142c <HAL_UART_MspInit+0xf0>)
 80013b2:	f000 fa23 	bl	80017fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013b6:	e031      	b.n	800141c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <HAL_UART_MspInit+0xf4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d12c      	bne.n	800141c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <HAL_UART_MspInit+0xec>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <HAL_UART_MspInit+0xec>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_UART_MspInit+0xec>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HAL_UART_MspInit+0xec>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a10      	ldr	r2, [pc, #64]	; (8001428 <HAL_UART_MspInit+0xec>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_UART_MspInit+0xec>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800140c:	2307      	movs	r3, #7
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	4807      	ldr	r0, [pc, #28]	; (8001434 <HAL_UART_MspInit+0xf8>)
 8001418:	f000 f9f0 	bl	80017fc <HAL_GPIO_Init>
}
 800141c:	bf00      	nop
 800141e:	3730      	adds	r7, #48	; 0x30
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40004400 	.word	0x40004400
 8001428:	40023800 	.word	0x40023800
 800142c:	40020000 	.word	0x40020000
 8001430:	40004800 	.word	0x40004800
 8001434:	40020800 	.word	0x40020800

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800143c:	e7fe      	b.n	800143c <NMI_Handler+0x4>

0800143e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <MemManage_Handler+0x4>

0800144a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <BusFault_Handler+0x4>

08001450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <UsageFault_Handler+0x4>

08001456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001484:	f000 f890 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <SystemInit+0x20>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <SystemInit+0x20>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014b6:	490e      	ldr	r1, [pc, #56]	; (80014f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014b8:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014cc:	4c0b      	ldr	r4, [pc, #44]	; (80014fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014da:	f7ff ffd7 	bl	800148c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014de:	f001 fd05 	bl	8002eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e2:	f7ff fd97 	bl	8001014 <main>
  bx  lr    
 80014e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014f4:	08002fdc 	.word	0x08002fdc
  ldr r2, =_sbss
 80014f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014fc:	200000dc 	.word	0x200000dc

08001500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC_IRQHandler>
	...

08001504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_Init+0x40>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <HAL_Init+0x40>)
 800150e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_Init+0x40>)
 800151a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800151e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a07      	ldr	r2, [pc, #28]	; (8001544 <HAL_Init+0x40>)
 8001526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152c:	2003      	movs	r0, #3
 800152e:	f000 f931 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001532:	2000      	movs	r0, #0
 8001534:	f000 f808 	bl	8001548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001538:	f7ff fed8 	bl	80012ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023c00 	.word	0x40023c00

08001548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_InitTick+0x54>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x58>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f93b 	bl	80017e2 <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00e      	b.n	8001594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d80a      	bhi.n	8001592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f000 f911 	bl	80017aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <HAL_InitTick+0x5c>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000004 	.word	0x20000004
 80015a0:	2000000c 	.word	0x2000000c
 80015a4:	20000008 	.word	0x20000008

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	2000000c 	.word	0x2000000c
 80015cc:	200000d8 	.word	0x200000d8

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	200000d8 	.word	0x200000d8

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff ffee 	bl	80015d0 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffde 	bl	80015d0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000000c 	.word	0x2000000c

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	; (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001760:	d301      	bcc.n	8001766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001762:	2301      	movs	r3, #1
 8001764:	e00f      	b.n	8001786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <SysTick_Config+0x40>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176e:	210f      	movs	r1, #15
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f7ff ff8e 	bl	8001694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <SysTick_Config+0x40>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <SysTick_Config+0x40>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff47 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017bc:	f7ff ff5c 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7ff ff8e 	bl	80016e8 <NVIC_EncodePriority>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff5d 	bl	8001694 <__NVIC_SetPriority>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffb0 	bl	8001750 <SysTick_Config>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	e165      	b.n	8001ae4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001818:	2201      	movs	r2, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 8154 	bne.w	8001ade <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d005      	beq.n	800184e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800184a:	2b02      	cmp	r3, #2
 800184c:	d130      	bne.n	80018b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001884:	2201      	movs	r2, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 0201 	and.w	r2, r3, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d017      	beq.n	80018ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d123      	bne.n	8001940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	08da      	lsrs	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3208      	adds	r2, #8
 800193a:	69b9      	ldr	r1, [r7, #24]
 800193c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0203 	and.w	r2, r3, #3
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80ae 	beq.w	8001ade <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b5d      	ldr	r3, [pc, #372]	; (8001afc <HAL_GPIO_Init+0x300>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a5c      	ldr	r2, [pc, #368]	; (8001afc <HAL_GPIO_Init+0x300>)
 800198c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b5a      	ldr	r3, [pc, #360]	; (8001afc <HAL_GPIO_Init+0x300>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800199e:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <HAL_GPIO_Init+0x304>)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4f      	ldr	r2, [pc, #316]	; (8001b04 <HAL_GPIO_Init+0x308>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d025      	beq.n	8001a16 <HAL_GPIO_Init+0x21a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4e      	ldr	r2, [pc, #312]	; (8001b08 <HAL_GPIO_Init+0x30c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01f      	beq.n	8001a12 <HAL_GPIO_Init+0x216>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4d      	ldr	r2, [pc, #308]	; (8001b0c <HAL_GPIO_Init+0x310>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d019      	beq.n	8001a0e <HAL_GPIO_Init+0x212>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4c      	ldr	r2, [pc, #304]	; (8001b10 <HAL_GPIO_Init+0x314>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d013      	beq.n	8001a0a <HAL_GPIO_Init+0x20e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4b      	ldr	r2, [pc, #300]	; (8001b14 <HAL_GPIO_Init+0x318>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00d      	beq.n	8001a06 <HAL_GPIO_Init+0x20a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4a      	ldr	r2, [pc, #296]	; (8001b18 <HAL_GPIO_Init+0x31c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d007      	beq.n	8001a02 <HAL_GPIO_Init+0x206>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a49      	ldr	r2, [pc, #292]	; (8001b1c <HAL_GPIO_Init+0x320>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d101      	bne.n	80019fe <HAL_GPIO_Init+0x202>
 80019fa:	2306      	movs	r3, #6
 80019fc:	e00c      	b.n	8001a18 <HAL_GPIO_Init+0x21c>
 80019fe:	2307      	movs	r3, #7
 8001a00:	e00a      	b.n	8001a18 <HAL_GPIO_Init+0x21c>
 8001a02:	2305      	movs	r3, #5
 8001a04:	e008      	b.n	8001a18 <HAL_GPIO_Init+0x21c>
 8001a06:	2304      	movs	r3, #4
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x21c>
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e004      	b.n	8001a18 <HAL_GPIO_Init+0x21c>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e002      	b.n	8001a18 <HAL_GPIO_Init+0x21c>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_GPIO_Init+0x21c>
 8001a16:	2300      	movs	r3, #0
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	f002 0203 	and.w	r2, r2, #3
 8001a1e:	0092      	lsls	r2, r2, #2
 8001a20:	4093      	lsls	r3, r2
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a28:	4935      	ldr	r1, [pc, #212]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	3302      	adds	r3, #2
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a36:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <HAL_GPIO_Init+0x324>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a5a:	4a31      	ldr	r2, [pc, #196]	; (8001b20 <HAL_GPIO_Init+0x324>)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a60:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <HAL_GPIO_Init+0x324>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a84:	4a26      	ldr	r2, [pc, #152]	; (8001b20 <HAL_GPIO_Init+0x324>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a8a:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <HAL_GPIO_Init+0x324>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aae:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <HAL_GPIO_Init+0x324>)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <HAL_GPIO_Init+0x324>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad8:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <HAL_GPIO_Init+0x324>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	2b0f      	cmp	r3, #15
 8001ae8:	f67f ae96 	bls.w	8001818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40013800 	.word	0x40013800
 8001b04:	40020000 	.word	0x40020000
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	40020800 	.word	0x40020800
 8001b10:	40020c00 	.word	0x40020c00
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40021400 	.word	0x40021400
 8001b1c:	40021800 	.word	0x40021800
 8001b20:	40013c00 	.word	0x40013c00

08001b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	e001      	b.n	8001b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
 8001b60:	4613      	mov	r3, r2
 8001b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b64:	787b      	ldrb	r3, [r7, #1]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b70:	e003      	b.n	8001b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b72:	887b      	ldrh	r3, [r7, #2]
 8001b74:	041a      	lsls	r2, r3, #16
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	619a      	str	r2, [r3, #24]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0cc      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b68      	ldr	r3, [pc, #416]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d90c      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b65      	ldr	r3, [pc, #404]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b63      	ldr	r3, [pc, #396]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0b8      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d020      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bdc:	4b59      	ldr	r3, [pc, #356]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf4:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a52      	ldr	r2, [pc, #328]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c00:	4b50      	ldr	r3, [pc, #320]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	494d      	ldr	r1, [pc, #308]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d044      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d119      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e07f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d003      	beq.n	8001c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c46:	4b3f      	ldr	r3, [pc, #252]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e06f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c56:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e067      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c66:	4b37      	ldr	r3, [pc, #220]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f023 0203 	bic.w	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4934      	ldr	r1, [pc, #208]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c78:	f7ff fcaa 	bl	80015d0 <HAL_GetTick>
 8001c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c80:	f7ff fca6 	bl	80015d0 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e04f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 020c 	and.w	r2, r3, #12
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d1eb      	bne.n	8001c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d20c      	bcs.n	8001cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e032      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4916      	ldr	r1, [pc, #88]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cfa:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	490e      	ldr	r1, [pc, #56]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d0e:	f000 f855 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	490a      	ldr	r1, [pc, #40]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	5ccb      	ldrb	r3, [r1, r3]
 8001d22:	fa22 f303 	lsr.w	r3, r2, r3
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fc0a 	bl	8001548 <HAL_InitTick>

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023c00 	.word	0x40023c00
 8001d44:	40023800 	.word	0x40023800
 8001d48:	08002fb4 	.word	0x08002fb4
 8001d4c:	20000004 	.word	0x20000004
 8001d50:	20000008 	.word	0x20000008

08001d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000004 	.word	0x20000004

08001d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d70:	f7ff fff0 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	0a9b      	lsrs	r3, r3, #10
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4903      	ldr	r1, [pc, #12]	; (8001d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	08002fc4 	.word	0x08002fc4

08001d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d98:	f7ff ffdc 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	0b5b      	lsrs	r3, r3, #13
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	4903      	ldr	r1, [pc, #12]	; (8001db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001daa:	5ccb      	ldrb	r3, [r1, r3]
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40023800 	.word	0x40023800
 8001db8:	08002fc4 	.word	0x08002fc4

08001dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc0:	b0ae      	sub	sp, #184	; 0xb8
 8001dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de2:	4bcb      	ldr	r3, [pc, #812]	; (8002110 <HAL_RCC_GetSysClockFreq+0x354>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b0c      	cmp	r3, #12
 8001dec:	f200 8206 	bhi.w	80021fc <HAL_RCC_GetSysClockFreq+0x440>
 8001df0:	a201      	add	r2, pc, #4	; (adr r2, 8001df8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df6:	bf00      	nop
 8001df8:	08001e2d 	.word	0x08001e2d
 8001dfc:	080021fd 	.word	0x080021fd
 8001e00:	080021fd 	.word	0x080021fd
 8001e04:	080021fd 	.word	0x080021fd
 8001e08:	08001e35 	.word	0x08001e35
 8001e0c:	080021fd 	.word	0x080021fd
 8001e10:	080021fd 	.word	0x080021fd
 8001e14:	080021fd 	.word	0x080021fd
 8001e18:	08001e3d 	.word	0x08001e3d
 8001e1c:	080021fd 	.word	0x080021fd
 8001e20:	080021fd 	.word	0x080021fd
 8001e24:	080021fd 	.word	0x080021fd
 8001e28:	0800202d 	.word	0x0800202d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e2c:	4bb9      	ldr	r3, [pc, #740]	; (8002114 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001e32:	e1e7      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e34:	4bb8      	ldr	r3, [pc, #736]	; (8002118 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e3a:	e1e3      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e3c:	4bb4      	ldr	r3, [pc, #720]	; (8002110 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e48:	4bb1      	ldr	r3, [pc, #708]	; (8002110 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d071      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e54:	4bae      	ldr	r3, [pc, #696]	; (8002110 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e60:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e70:	2300      	movs	r3, #0
 8001e72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e7a:	4622      	mov	r2, r4
 8001e7c:	462b      	mov	r3, r5
 8001e7e:	f04f 0000 	mov.w	r0, #0
 8001e82:	f04f 0100 	mov.w	r1, #0
 8001e86:	0159      	lsls	r1, r3, #5
 8001e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e8c:	0150      	lsls	r0, r2, #5
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4621      	mov	r1, r4
 8001e94:	1a51      	subs	r1, r2, r1
 8001e96:	6439      	str	r1, [r7, #64]	; 0x40
 8001e98:	4629      	mov	r1, r5
 8001e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001eac:	4649      	mov	r1, r9
 8001eae:	018b      	lsls	r3, r1, #6
 8001eb0:	4641      	mov	r1, r8
 8001eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eb6:	4641      	mov	r1, r8
 8001eb8:	018a      	lsls	r2, r1, #6
 8001eba:	4641      	mov	r1, r8
 8001ebc:	1a51      	subs	r1, r2, r1
 8001ebe:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ec0:	4649      	mov	r1, r9
 8001ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001ed4:	4649      	mov	r1, r9
 8001ed6:	00cb      	lsls	r3, r1, #3
 8001ed8:	4641      	mov	r1, r8
 8001eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ede:	4641      	mov	r1, r8
 8001ee0:	00ca      	lsls	r2, r1, #3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4622      	mov	r2, r4
 8001eea:	189b      	adds	r3, r3, r2
 8001eec:	633b      	str	r3, [r7, #48]	; 0x30
 8001eee:	462b      	mov	r3, r5
 8001ef0:	460a      	mov	r2, r1
 8001ef2:	eb42 0303 	adc.w	r3, r2, r3
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f04:	4629      	mov	r1, r5
 8001f06:	024b      	lsls	r3, r1, #9
 8001f08:	4621      	mov	r1, r4
 8001f0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f0e:	4621      	mov	r1, r4
 8001f10:	024a      	lsls	r2, r1, #9
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f24:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001f28:	f7fe f96c 	bl	8000204 <__aeabi_uldivmod>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4613      	mov	r3, r2
 8001f32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f36:	e067      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f38:	4b75      	ldr	r3, [pc, #468]	; (8002110 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	099b      	lsrs	r3, r3, #6
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f44:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001f48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f50:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f52:	2300      	movs	r3, #0
 8001f54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f56:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001f5a:	4622      	mov	r2, r4
 8001f5c:	462b      	mov	r3, r5
 8001f5e:	f04f 0000 	mov.w	r0, #0
 8001f62:	f04f 0100 	mov.w	r1, #0
 8001f66:	0159      	lsls	r1, r3, #5
 8001f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f6c:	0150      	lsls	r0, r2, #5
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4621      	mov	r1, r4
 8001f74:	1a51      	subs	r1, r2, r1
 8001f76:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f78:	4629      	mov	r1, r5
 8001f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001f8c:	4649      	mov	r1, r9
 8001f8e:	018b      	lsls	r3, r1, #6
 8001f90:	4641      	mov	r1, r8
 8001f92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f96:	4641      	mov	r1, r8
 8001f98:	018a      	lsls	r2, r1, #6
 8001f9a:	4641      	mov	r1, r8
 8001f9c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fa0:	4649      	mov	r1, r9
 8001fa2:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fb2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fba:	4692      	mov	sl, r2
 8001fbc:	469b      	mov	fp, r3
 8001fbe:	4623      	mov	r3, r4
 8001fc0:	eb1a 0303 	adds.w	r3, sl, r3
 8001fc4:	623b      	str	r3, [r7, #32]
 8001fc6:	462b      	mov	r3, r5
 8001fc8:	eb4b 0303 	adc.w	r3, fp, r3
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001fda:	4629      	mov	r1, r5
 8001fdc:	028b      	lsls	r3, r1, #10
 8001fde:	4621      	mov	r1, r4
 8001fe0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fe4:	4621      	mov	r1, r4
 8001fe6:	028a      	lsls	r2, r1, #10
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	673b      	str	r3, [r7, #112]	; 0x70
 8001ff4:	677a      	str	r2, [r7, #116]	; 0x74
 8001ff6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001ffa:	f7fe f903 	bl	8000204 <__aeabi_uldivmod>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4613      	mov	r3, r2
 8002004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002008:	4b41      	ldr	r3, [pc, #260]	; (8002110 <HAL_RCC_GetSysClockFreq+0x354>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	0c1b      	lsrs	r3, r3, #16
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	3301      	adds	r3, #1
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800201a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800201e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002022:	fbb2 f3f3 	udiv	r3, r2, r3
 8002026:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800202a:	e0eb      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800202c:	4b38      	ldr	r3, [pc, #224]	; (8002110 <HAL_RCC_GetSysClockFreq+0x354>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002034:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002038:	4b35      	ldr	r3, [pc, #212]	; (8002110 <HAL_RCC_GetSysClockFreq+0x354>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d06b      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002044:	4b32      	ldr	r3, [pc, #200]	; (8002110 <HAL_RCC_GetSysClockFreq+0x354>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	2200      	movs	r2, #0
 800204c:	66bb      	str	r3, [r7, #104]	; 0x68
 800204e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002050:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002056:	663b      	str	r3, [r7, #96]	; 0x60
 8002058:	2300      	movs	r3, #0
 800205a:	667b      	str	r3, [r7, #100]	; 0x64
 800205c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002060:	4622      	mov	r2, r4
 8002062:	462b      	mov	r3, r5
 8002064:	f04f 0000 	mov.w	r0, #0
 8002068:	f04f 0100 	mov.w	r1, #0
 800206c:	0159      	lsls	r1, r3, #5
 800206e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002072:	0150      	lsls	r0, r2, #5
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4621      	mov	r1, r4
 800207a:	1a51      	subs	r1, r2, r1
 800207c:	61b9      	str	r1, [r7, #24]
 800207e:	4629      	mov	r1, r5
 8002080:	eb63 0301 	sbc.w	r3, r3, r1
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002092:	4659      	mov	r1, fp
 8002094:	018b      	lsls	r3, r1, #6
 8002096:	4651      	mov	r1, sl
 8002098:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800209c:	4651      	mov	r1, sl
 800209e:	018a      	lsls	r2, r1, #6
 80020a0:	4651      	mov	r1, sl
 80020a2:	ebb2 0801 	subs.w	r8, r2, r1
 80020a6:	4659      	mov	r1, fp
 80020a8:	eb63 0901 	sbc.w	r9, r3, r1
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020c0:	4690      	mov	r8, r2
 80020c2:	4699      	mov	r9, r3
 80020c4:	4623      	mov	r3, r4
 80020c6:	eb18 0303 	adds.w	r3, r8, r3
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	462b      	mov	r3, r5
 80020ce:	eb49 0303 	adc.w	r3, r9, r3
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80020e0:	4629      	mov	r1, r5
 80020e2:	024b      	lsls	r3, r1, #9
 80020e4:	4621      	mov	r1, r4
 80020e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020ea:	4621      	mov	r1, r4
 80020ec:	024a      	lsls	r2, r1, #9
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020f6:	2200      	movs	r2, #0
 80020f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80020fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002100:	f7fe f880 	bl	8000204 <__aeabi_uldivmod>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4613      	mov	r3, r2
 800210a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800210e:	e065      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x420>
 8002110:	40023800 	.word	0x40023800
 8002114:	00f42400 	.word	0x00f42400
 8002118:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211c:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <HAL_RCC_GetSysClockFreq+0x458>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	099b      	lsrs	r3, r3, #6
 8002122:	2200      	movs	r2, #0
 8002124:	4618      	mov	r0, r3
 8002126:	4611      	mov	r1, r2
 8002128:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800212c:	653b      	str	r3, [r7, #80]	; 0x50
 800212e:	2300      	movs	r3, #0
 8002130:	657b      	str	r3, [r7, #84]	; 0x54
 8002132:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002136:	4642      	mov	r2, r8
 8002138:	464b      	mov	r3, r9
 800213a:	f04f 0000 	mov.w	r0, #0
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	0159      	lsls	r1, r3, #5
 8002144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002148:	0150      	lsls	r0, r2, #5
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4641      	mov	r1, r8
 8002150:	1a51      	subs	r1, r2, r1
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	4649      	mov	r1, r9
 8002156:	eb63 0301 	sbc.w	r3, r3, r1
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002168:	4659      	mov	r1, fp
 800216a:	018b      	lsls	r3, r1, #6
 800216c:	4651      	mov	r1, sl
 800216e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002172:	4651      	mov	r1, sl
 8002174:	018a      	lsls	r2, r1, #6
 8002176:	4651      	mov	r1, sl
 8002178:	1a54      	subs	r4, r2, r1
 800217a:	4659      	mov	r1, fp
 800217c:	eb63 0501 	sbc.w	r5, r3, r1
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	00eb      	lsls	r3, r5, #3
 800218a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800218e:	00e2      	lsls	r2, r4, #3
 8002190:	4614      	mov	r4, r2
 8002192:	461d      	mov	r5, r3
 8002194:	4643      	mov	r3, r8
 8002196:	18e3      	adds	r3, r4, r3
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	464b      	mov	r3, r9
 800219c:	eb45 0303 	adc.w	r3, r5, r3
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ae:	4629      	mov	r1, r5
 80021b0:	028b      	lsls	r3, r1, #10
 80021b2:	4621      	mov	r1, r4
 80021b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021b8:	4621      	mov	r1, r4
 80021ba:	028a      	lsls	r2, r1, #10
 80021bc:	4610      	mov	r0, r2
 80021be:	4619      	mov	r1, r3
 80021c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021c4:	2200      	movs	r2, #0
 80021c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80021c8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80021ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021ce:	f7fe f819 	bl	8000204 <__aeabi_uldivmod>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4613      	mov	r3, r2
 80021d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_RCC_GetSysClockFreq+0x458>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	0f1b      	lsrs	r3, r3, #28
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80021ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021fa:	e003      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_RCC_GetSysClockFreq+0x45c>)
 80021fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002202:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002204:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002208:	4618      	mov	r0, r3
 800220a:	37b8      	adds	r7, #184	; 0xb8
 800220c:	46bd      	mov	sp, r7
 800220e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	00f42400 	.word	0x00f42400

0800221c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e28d      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8083 	beq.w	8002342 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800223c:	4b94      	ldr	r3, [pc, #592]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b04      	cmp	r3, #4
 8002246:	d019      	beq.n	800227c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002248:	4b91      	ldr	r3, [pc, #580]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002250:	2b08      	cmp	r3, #8
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002254:	4b8e      	ldr	r3, [pc, #568]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002260:	d00c      	beq.n	800227c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002262:	4b8b      	ldr	r3, [pc, #556]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800226a:	2b0c      	cmp	r3, #12
 800226c:	d112      	bne.n	8002294 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800226e:	4b88      	ldr	r3, [pc, #544]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800227a:	d10b      	bne.n	8002294 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	4b84      	ldr	r3, [pc, #528]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d05b      	beq.n	8002340 <HAL_RCC_OscConfig+0x124>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d157      	bne.n	8002340 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e25a      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229c:	d106      	bne.n	80022ac <HAL_RCC_OscConfig+0x90>
 800229e:	4b7c      	ldr	r3, [pc, #496]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a7b      	ldr	r2, [pc, #492]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e01d      	b.n	80022e8 <HAL_RCC_OscConfig+0xcc>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0xb4>
 80022b6:	4b76      	ldr	r3, [pc, #472]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a75      	ldr	r2, [pc, #468]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 80022bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b73      	ldr	r3, [pc, #460]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a72      	ldr	r2, [pc, #456]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e00b      	b.n	80022e8 <HAL_RCC_OscConfig+0xcc>
 80022d0:	4b6f      	ldr	r3, [pc, #444]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a6e      	ldr	r2, [pc, #440]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 80022d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b6c      	ldr	r3, [pc, #432]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a6b      	ldr	r2, [pc, #428]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 80022e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d013      	beq.n	8002318 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7ff f96e 	bl	80015d0 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f8:	f7ff f96a 	bl	80015d0 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e21f      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	4b61      	ldr	r3, [pc, #388]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0xdc>
 8002316:	e014      	b.n	8002342 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7ff f95a 	bl	80015d0 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002320:	f7ff f956 	bl	80015d0 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	; 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e20b      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002332:	4b57      	ldr	r3, [pc, #348]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x104>
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d06f      	beq.n	800242e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800234e:	4b50      	ldr	r3, [pc, #320]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b00      	cmp	r3, #0
 8002358:	d017      	beq.n	800238a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800235a:	4b4d      	ldr	r3, [pc, #308]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002362:	2b08      	cmp	r3, #8
 8002364:	d105      	bne.n	8002372 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002366:	4b4a      	ldr	r3, [pc, #296]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800237a:	2b0c      	cmp	r3, #12
 800237c:	d11c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800237e:	4b44      	ldr	r3, [pc, #272]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d116      	bne.n	80023b8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	4b41      	ldr	r3, [pc, #260]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_RCC_OscConfig+0x186>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e1d3      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a2:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4937      	ldr	r1, [pc, #220]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b6:	e03a      	b.n	800242e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d020      	beq.n	8002402 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c0:	4b34      	ldr	r3, [pc, #208]	; (8002494 <HAL_RCC_OscConfig+0x278>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7ff f903 	bl	80015d0 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ce:	f7ff f8ff 	bl	80015d0 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e1b4      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ec:	4b28      	ldr	r3, [pc, #160]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4925      	ldr	r1, [pc, #148]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]
 8002400:	e015      	b.n	800242e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <HAL_RCC_OscConfig+0x278>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7ff f8e2 	bl	80015d0 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002410:	f7ff f8de 	bl	80015d0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e193      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002422:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d036      	beq.n	80024a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d016      	beq.n	8002470 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002444:	2201      	movs	r2, #1
 8002446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002448:	f7ff f8c2 	bl	80015d0 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002450:	f7ff f8be 	bl	80015d0 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e173      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 8002464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x234>
 800246e:	e01b      	b.n	80024a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002476:	f7ff f8ab 	bl	80015d0 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247c:	e00e      	b.n	800249c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800247e:	f7ff f8a7 	bl	80015d0 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d907      	bls.n	800249c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e15c      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
 8002490:	40023800 	.word	0x40023800
 8002494:	42470000 	.word	0x42470000
 8002498:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249c:	4b8a      	ldr	r3, [pc, #552]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 800249e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1ea      	bne.n	800247e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 8097 	beq.w	80025e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ba:	4b83      	ldr	r3, [pc, #524]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10f      	bne.n	80024e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	4b7f      	ldr	r3, [pc, #508]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a7e      	ldr	r2, [pc, #504]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
 80024d6:	4b7c      	ldr	r3, [pc, #496]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e2:	2301      	movs	r3, #1
 80024e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e6:	4b79      	ldr	r3, [pc, #484]	; (80026cc <HAL_RCC_OscConfig+0x4b0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d118      	bne.n	8002524 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f2:	4b76      	ldr	r3, [pc, #472]	; (80026cc <HAL_RCC_OscConfig+0x4b0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a75      	ldr	r2, [pc, #468]	; (80026cc <HAL_RCC_OscConfig+0x4b0>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fe:	f7ff f867 	bl	80015d0 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002506:	f7ff f863 	bl	80015d0 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e118      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	4b6c      	ldr	r3, [pc, #432]	; (80026cc <HAL_RCC_OscConfig+0x4b0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x31e>
 800252c:	4b66      	ldr	r3, [pc, #408]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	4a65      	ldr	r2, [pc, #404]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6713      	str	r3, [r2, #112]	; 0x70
 8002538:	e01c      	b.n	8002574 <HAL_RCC_OscConfig+0x358>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b05      	cmp	r3, #5
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x340>
 8002542:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	4a60      	ldr	r2, [pc, #384]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 8002548:	f043 0304 	orr.w	r3, r3, #4
 800254c:	6713      	str	r3, [r2, #112]	; 0x70
 800254e:	4b5e      	ldr	r3, [pc, #376]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	4a5d      	ldr	r2, [pc, #372]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6713      	str	r3, [r2, #112]	; 0x70
 800255a:	e00b      	b.n	8002574 <HAL_RCC_OscConfig+0x358>
 800255c:	4b5a      	ldr	r3, [pc, #360]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	4a59      	ldr	r2, [pc, #356]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 8002562:	f023 0301 	bic.w	r3, r3, #1
 8002566:	6713      	str	r3, [r2, #112]	; 0x70
 8002568:	4b57      	ldr	r3, [pc, #348]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	4a56      	ldr	r2, [pc, #344]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 800256e:	f023 0304 	bic.w	r3, r3, #4
 8002572:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d015      	beq.n	80025a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257c:	f7ff f828 	bl	80015d0 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002582:	e00a      	b.n	800259a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002584:	f7ff f824 	bl	80015d0 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e0d7      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259a:	4b4b      	ldr	r3, [pc, #300]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0ee      	beq.n	8002584 <HAL_RCC_OscConfig+0x368>
 80025a6:	e014      	b.n	80025d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a8:	f7ff f812 	bl	80015d0 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b0:	f7ff f80e 	bl	80015d0 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e0c1      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c6:	4b40      	ldr	r3, [pc, #256]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1ee      	bne.n	80025b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d105      	bne.n	80025e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d8:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	4a3a      	ldr	r2, [pc, #232]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 80025de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80ad 	beq.w	8002748 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ee:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d060      	beq.n	80026bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d145      	bne.n	800268e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002602:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <HAL_RCC_OscConfig+0x4b4>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7fe ffe2 	bl	80015d0 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002610:	f7fe ffde 	bl	80015d0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e093      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002622:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	019b      	lsls	r3, r3, #6
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	3b01      	subs	r3, #1
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	061b      	lsls	r3, r3, #24
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	071b      	lsls	r3, r3, #28
 800265a:	491b      	ldr	r1, [pc, #108]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_RCC_OscConfig+0x4b4>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7fe ffb3 	bl	80015d0 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe ffaf 	bl	80015d0 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e064      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x452>
 800268c:	e05c      	b.n	8002748 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <HAL_RCC_OscConfig+0x4b4>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe ff9c 	bl	80015d0 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269c:	f7fe ff98 	bl	80015d0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e04d      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_OscConfig+0x4ac>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x480>
 80026ba:	e045      	b.n	8002748 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e040      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40007000 	.word	0x40007000
 80026d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026d4:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <HAL_RCC_OscConfig+0x538>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d030      	beq.n	8002744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d129      	bne.n	8002744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d122      	bne.n	8002744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002704:	4013      	ands	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800270a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800270c:	4293      	cmp	r3, r2
 800270e:	d119      	bne.n	8002744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	085b      	lsrs	r3, r3, #1
 800271c:	3b01      	subs	r3, #1
 800271e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d10f      	bne.n	8002744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002730:	429a      	cmp	r2, r3
 8002732:	d107      	bne.n	8002744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800

08002758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e03f      	b.n	80027ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe fddc 	bl	800133c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2224      	movs	r2, #36	; 0x24
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800279a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f929 	bl	80029f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b08a      	sub	sp, #40	; 0x28
 80027f6:	af02      	add	r7, sp, #8
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b20      	cmp	r3, #32
 8002810:	d17c      	bne.n	800290c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <HAL_UART_Transmit+0x2c>
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e075      	b.n	800290e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_UART_Transmit+0x3e>
 800282c:	2302      	movs	r3, #2
 800282e:	e06e      	b.n	800290e <HAL_UART_Transmit+0x11c>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2221      	movs	r2, #33	; 0x21
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002846:	f7fe fec3 	bl	80015d0 <HAL_GetTick>
 800284a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	88fa      	ldrh	r2, [r7, #6]
 8002850:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	88fa      	ldrh	r2, [r7, #6]
 8002856:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002860:	d108      	bne.n	8002874 <HAL_UART_Transmit+0x82>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d104      	bne.n	8002874 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	e003      	b.n	800287c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002878:	2300      	movs	r3, #0
 800287a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002884:	e02a      	b.n	80028dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2200      	movs	r2, #0
 800288e:	2180      	movs	r1, #128	; 0x80
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f840 	bl	8002916 <UART_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e036      	b.n	800290e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10b      	bne.n	80028be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	3302      	adds	r3, #2
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	e007      	b.n	80028ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	3301      	adds	r3, #1
 80028cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1cf      	bne.n	8002886 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2200      	movs	r2, #0
 80028ee:	2140      	movs	r1, #64	; 0x40
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 f810 	bl	8002916 <UART_WaitOnFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e006      	b.n	800290e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	e000      	b.n	800290e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800290c:	2302      	movs	r3, #2
  }
}
 800290e:	4618      	mov	r0, r3
 8002910:	3720      	adds	r7, #32
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b090      	sub	sp, #64	; 0x40
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	4613      	mov	r3, r2
 8002924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002926:	e050      	b.n	80029ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800292a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292e:	d04c      	beq.n	80029ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002932:	2b00      	cmp	r3, #0
 8002934:	d007      	beq.n	8002946 <UART_WaitOnFlagUntilTimeout+0x30>
 8002936:	f7fe fe4b 	bl	80015d0 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002942:	429a      	cmp	r2, r3
 8002944:	d241      	bcs.n	80029ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	330c      	adds	r3, #12
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	e853 3f00 	ldrex	r3, [r3]
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800295c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	330c      	adds	r3, #12
 8002964:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002966:	637a      	str	r2, [r7, #52]	; 0x34
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800296c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800296e:	e841 2300 	strex	r3, r2, [r1]
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1e5      	bne.n	8002946 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3314      	adds	r3, #20
 8002980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	e853 3f00 	ldrex	r3, [r3]
 8002988:	613b      	str	r3, [r7, #16]
   return(result);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	f023 0301 	bic.w	r3, r3, #1
 8002990:	63bb      	str	r3, [r7, #56]	; 0x38
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3314      	adds	r3, #20
 8002998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800299a:	623a      	str	r2, [r7, #32]
 800299c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299e:	69f9      	ldr	r1, [r7, #28]
 80029a0:	6a3a      	ldr	r2, [r7, #32]
 80029a2:	e841 2300 	strex	r3, r2, [r1]
 80029a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1e5      	bne.n	800297a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e00f      	b.n	80029ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4013      	ands	r3, r2
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	bf0c      	ite	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	2300      	movne	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d09f      	beq.n	8002928 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3740      	adds	r7, #64	; 0x40
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f8:	b0c0      	sub	sp, #256	; 0x100
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a10:	68d9      	ldr	r1, [r3, #12]
 8002a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	ea40 0301 	orr.w	r3, r0, r1
 8002a1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a4c:	f021 010c 	bic.w	r1, r1, #12
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a5a:	430b      	orrs	r3, r1
 8002a5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6e:	6999      	ldr	r1, [r3, #24]
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	ea40 0301 	orr.w	r3, r0, r1
 8002a7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4b8f      	ldr	r3, [pc, #572]	; (8002cc0 <UART_SetConfig+0x2cc>)
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d005      	beq.n	8002a94 <UART_SetConfig+0xa0>
 8002a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4b8d      	ldr	r3, [pc, #564]	; (8002cc4 <UART_SetConfig+0x2d0>)
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d104      	bne.n	8002a9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a94:	f7ff f97e 	bl	8001d94 <HAL_RCC_GetPCLK2Freq>
 8002a98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a9c:	e003      	b.n	8002aa6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a9e:	f7ff f965 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 8002aa2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab0:	f040 810c 	bne.w	8002ccc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002abe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ac2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	462b      	mov	r3, r5
 8002aca:	1891      	adds	r1, r2, r2
 8002acc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ace:	415b      	adcs	r3, r3
 8002ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ad2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	eb12 0801 	adds.w	r8, r2, r1
 8002adc:	4629      	mov	r1, r5
 8002ade:	eb43 0901 	adc.w	r9, r3, r1
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002af6:	4690      	mov	r8, r2
 8002af8:	4699      	mov	r9, r3
 8002afa:	4623      	mov	r3, r4
 8002afc:	eb18 0303 	adds.w	r3, r8, r3
 8002b00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b04:	462b      	mov	r3, r5
 8002b06:	eb49 0303 	adc.w	r3, r9, r3
 8002b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b22:	460b      	mov	r3, r1
 8002b24:	18db      	adds	r3, r3, r3
 8002b26:	653b      	str	r3, [r7, #80]	; 0x50
 8002b28:	4613      	mov	r3, r2
 8002b2a:	eb42 0303 	adc.w	r3, r2, r3
 8002b2e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b38:	f7fd fb64 	bl	8000204 <__aeabi_uldivmod>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4b61      	ldr	r3, [pc, #388]	; (8002cc8 <UART_SetConfig+0x2d4>)
 8002b42:	fba3 2302 	umull	r2, r3, r3, r2
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	011c      	lsls	r4, r3, #4
 8002b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b5c:	4642      	mov	r2, r8
 8002b5e:	464b      	mov	r3, r9
 8002b60:	1891      	adds	r1, r2, r2
 8002b62:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b64:	415b      	adcs	r3, r3
 8002b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	eb12 0a01 	adds.w	sl, r2, r1
 8002b72:	4649      	mov	r1, r9
 8002b74:	eb43 0b01 	adc.w	fp, r3, r1
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b8c:	4692      	mov	sl, r2
 8002b8e:	469b      	mov	fp, r3
 8002b90:	4643      	mov	r3, r8
 8002b92:	eb1a 0303 	adds.w	r3, sl, r3
 8002b96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b9a:	464b      	mov	r3, r9
 8002b9c:	eb4b 0303 	adc.w	r3, fp, r3
 8002ba0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	18db      	adds	r3, r3, r3
 8002bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	eb42 0303 	adc.w	r3, r2, r3
 8002bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8002bc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002bce:	f7fd fb19 	bl	8000204 <__aeabi_uldivmod>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <UART_SetConfig+0x2d4>)
 8002bda:	fba3 2301 	umull	r2, r3, r3, r1
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	2264      	movs	r2, #100	; 0x64
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	1acb      	subs	r3, r1, r3
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002bee:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <UART_SetConfig+0x2d4>)
 8002bf0:	fba3 2302 	umull	r2, r3, r3, r2
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bfc:	441c      	add	r4, r3
 8002bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c02:	2200      	movs	r2, #0
 8002c04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c10:	4642      	mov	r2, r8
 8002c12:	464b      	mov	r3, r9
 8002c14:	1891      	adds	r1, r2, r2
 8002c16:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c18:	415b      	adcs	r3, r3
 8002c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c20:	4641      	mov	r1, r8
 8002c22:	1851      	adds	r1, r2, r1
 8002c24:	6339      	str	r1, [r7, #48]	; 0x30
 8002c26:	4649      	mov	r1, r9
 8002c28:	414b      	adcs	r3, r1
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c38:	4659      	mov	r1, fp
 8002c3a:	00cb      	lsls	r3, r1, #3
 8002c3c:	4651      	mov	r1, sl
 8002c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c42:	4651      	mov	r1, sl
 8002c44:	00ca      	lsls	r2, r1, #3
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4642      	mov	r2, r8
 8002c4e:	189b      	adds	r3, r3, r2
 8002c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c54:	464b      	mov	r3, r9
 8002c56:	460a      	mov	r2, r1
 8002c58:	eb42 0303 	adc.w	r3, r2, r3
 8002c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c74:	460b      	mov	r3, r1
 8002c76:	18db      	adds	r3, r3, r3
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	eb42 0303 	adc.w	r3, r2, r3
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c8a:	f7fd fabb 	bl	8000204 <__aeabi_uldivmod>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <UART_SetConfig+0x2d4>)
 8002c94:	fba3 1302 	umull	r1, r3, r3, r2
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	2164      	movs	r1, #100	; 0x64
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	3332      	adds	r3, #50	; 0x32
 8002ca6:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <UART_SetConfig+0x2d4>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	f003 0207 	and.w	r2, r3, #7
 8002cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4422      	add	r2, r4
 8002cba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cbc:	e106      	b.n	8002ecc <UART_SetConfig+0x4d8>
 8002cbe:	bf00      	nop
 8002cc0:	40011000 	.word	0x40011000
 8002cc4:	40011400 	.word	0x40011400
 8002cc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cd6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002cda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002cde:	4642      	mov	r2, r8
 8002ce0:	464b      	mov	r3, r9
 8002ce2:	1891      	adds	r1, r2, r2
 8002ce4:	6239      	str	r1, [r7, #32]
 8002ce6:	415b      	adcs	r3, r3
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cee:	4641      	mov	r1, r8
 8002cf0:	1854      	adds	r4, r2, r1
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	eb43 0501 	adc.w	r5, r3, r1
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	00eb      	lsls	r3, r5, #3
 8002d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d06:	00e2      	lsls	r2, r4, #3
 8002d08:	4614      	mov	r4, r2
 8002d0a:	461d      	mov	r5, r3
 8002d0c:	4643      	mov	r3, r8
 8002d0e:	18e3      	adds	r3, r4, r3
 8002d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d14:	464b      	mov	r3, r9
 8002d16:	eb45 0303 	adc.w	r3, r5, r3
 8002d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	008b      	lsls	r3, r1, #2
 8002d3e:	4621      	mov	r1, r4
 8002d40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d44:	4621      	mov	r1, r4
 8002d46:	008a      	lsls	r2, r1, #2
 8002d48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d4c:	f7fd fa5a 	bl	8000204 <__aeabi_uldivmod>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4b60      	ldr	r3, [pc, #384]	; (8002ed8 <UART_SetConfig+0x4e4>)
 8002d56:	fba3 2302 	umull	r2, r3, r3, r2
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	011c      	lsls	r4, r3, #4
 8002d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d62:	2200      	movs	r2, #0
 8002d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d70:	4642      	mov	r2, r8
 8002d72:	464b      	mov	r3, r9
 8002d74:	1891      	adds	r1, r2, r2
 8002d76:	61b9      	str	r1, [r7, #24]
 8002d78:	415b      	adcs	r3, r3
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d80:	4641      	mov	r1, r8
 8002d82:	1851      	adds	r1, r2, r1
 8002d84:	6139      	str	r1, [r7, #16]
 8002d86:	4649      	mov	r1, r9
 8002d88:	414b      	adcs	r3, r1
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d98:	4659      	mov	r1, fp
 8002d9a:	00cb      	lsls	r3, r1, #3
 8002d9c:	4651      	mov	r1, sl
 8002d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002da2:	4651      	mov	r1, sl
 8002da4:	00ca      	lsls	r2, r1, #3
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	4642      	mov	r2, r8
 8002dae:	189b      	adds	r3, r3, r2
 8002db0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002db4:	464b      	mov	r3, r9
 8002db6:	460a      	mov	r2, r1
 8002db8:	eb42 0303 	adc.w	r3, r2, r3
 8002dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002dd8:	4649      	mov	r1, r9
 8002dda:	008b      	lsls	r3, r1, #2
 8002ddc:	4641      	mov	r1, r8
 8002dde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002de2:	4641      	mov	r1, r8
 8002de4:	008a      	lsls	r2, r1, #2
 8002de6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002dea:	f7fd fa0b 	bl	8000204 <__aeabi_uldivmod>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4611      	mov	r1, r2
 8002df4:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <UART_SetConfig+0x4e4>)
 8002df6:	fba3 2301 	umull	r2, r3, r3, r1
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	2264      	movs	r2, #100	; 0x64
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	1acb      	subs	r3, r1, r3
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	3332      	adds	r3, #50	; 0x32
 8002e08:	4a33      	ldr	r2, [pc, #204]	; (8002ed8 <UART_SetConfig+0x4e4>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e14:	441c      	add	r4, r3
 8002e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	673b      	str	r3, [r7, #112]	; 0x70
 8002e1e:	677a      	str	r2, [r7, #116]	; 0x74
 8002e20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e24:	4642      	mov	r2, r8
 8002e26:	464b      	mov	r3, r9
 8002e28:	1891      	adds	r1, r2, r2
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	415b      	adcs	r3, r3
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e34:	4641      	mov	r1, r8
 8002e36:	1851      	adds	r1, r2, r1
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	4649      	mov	r1, r9
 8002e3c:	414b      	adcs	r3, r1
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e4c:	4659      	mov	r1, fp
 8002e4e:	00cb      	lsls	r3, r1, #3
 8002e50:	4651      	mov	r1, sl
 8002e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e56:	4651      	mov	r1, sl
 8002e58:	00ca      	lsls	r2, r1, #3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4642      	mov	r2, r8
 8002e62:	189b      	adds	r3, r3, r2
 8002e64:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e66:	464b      	mov	r3, r9
 8002e68:	460a      	mov	r2, r1
 8002e6a:	eb42 0303 	adc.w	r3, r2, r3
 8002e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	663b      	str	r3, [r7, #96]	; 0x60
 8002e7a:	667a      	str	r2, [r7, #100]	; 0x64
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e88:	4649      	mov	r1, r9
 8002e8a:	008b      	lsls	r3, r1, #2
 8002e8c:	4641      	mov	r1, r8
 8002e8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e92:	4641      	mov	r1, r8
 8002e94:	008a      	lsls	r2, r1, #2
 8002e96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e9a:	f7fd f9b3 	bl	8000204 <__aeabi_uldivmod>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <UART_SetConfig+0x4e4>)
 8002ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	2164      	movs	r1, #100	; 0x64
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	3332      	adds	r3, #50	; 0x32
 8002eb6:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <UART_SetConfig+0x4e4>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	f003 020f 	and.w	r2, r3, #15
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4422      	add	r2, r4
 8002eca:	609a      	str	r2, [r3, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed8:	51eb851f 	.word	0x51eb851f

08002edc <memset>:
 8002edc:	4402      	add	r2, r0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d100      	bne.n	8002ee6 <memset+0xa>
 8002ee4:	4770      	bx	lr
 8002ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eea:	e7f9      	b.n	8002ee0 <memset+0x4>

08002eec <__libc_init_array>:
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	4d0d      	ldr	r5, [pc, #52]	; (8002f24 <__libc_init_array+0x38>)
 8002ef0:	4c0d      	ldr	r4, [pc, #52]	; (8002f28 <__libc_init_array+0x3c>)
 8002ef2:	1b64      	subs	r4, r4, r5
 8002ef4:	10a4      	asrs	r4, r4, #2
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	42a6      	cmp	r6, r4
 8002efa:	d109      	bne.n	8002f10 <__libc_init_array+0x24>
 8002efc:	4d0b      	ldr	r5, [pc, #44]	; (8002f2c <__libc_init_array+0x40>)
 8002efe:	4c0c      	ldr	r4, [pc, #48]	; (8002f30 <__libc_init_array+0x44>)
 8002f00:	f000 f818 	bl	8002f34 <_init>
 8002f04:	1b64      	subs	r4, r4, r5
 8002f06:	10a4      	asrs	r4, r4, #2
 8002f08:	2600      	movs	r6, #0
 8002f0a:	42a6      	cmp	r6, r4
 8002f0c:	d105      	bne.n	8002f1a <__libc_init_array+0x2e>
 8002f0e:	bd70      	pop	{r4, r5, r6, pc}
 8002f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f14:	4798      	blx	r3
 8002f16:	3601      	adds	r6, #1
 8002f18:	e7ee      	b.n	8002ef8 <__libc_init_array+0xc>
 8002f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f1e:	4798      	blx	r3
 8002f20:	3601      	adds	r6, #1
 8002f22:	e7f2      	b.n	8002f0a <__libc_init_array+0x1e>
 8002f24:	08002fd4 	.word	0x08002fd4
 8002f28:	08002fd4 	.word	0x08002fd4
 8002f2c:	08002fd4 	.word	0x08002fd4
 8002f30:	08002fd8 	.word	0x08002fd8

08002f34 <_init>:
 8002f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f36:	bf00      	nop
 8002f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f3a:	bc08      	pop	{r3}
 8002f3c:	469e      	mov	lr, r3
 8002f3e:	4770      	bx	lr

08002f40 <_fini>:
 8002f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f42:	bf00      	nop
 8002f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f46:	bc08      	pop	{r3}
 8002f48:	469e      	mov	lr, r3
 8002f4a:	4770      	bx	lr
