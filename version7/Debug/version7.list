
version7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f58  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800311c  0800311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800313c  0800313c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003144  08003144  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003144  08003144  00013144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003148  08003148  00013148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800314c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000010  0800315c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  0800315c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfa0  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cf1  00000000  00000000  0002d023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  0002ed18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b7  00000000  00000000  0002f978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021cbf  00000000  00000000  0003032f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eebb  00000000  00000000  00051fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0526  00000000  00000000  00060ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000340c  00000000  00000000  001313d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001347dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003104 	.word	0x08003104

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08003104 	.word	0x08003104

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MIDILoop>:

uint8_t volumeMax = 0x7F;
uint8_t volumeMin = 0X00;


void MIDILoop(){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
	for (uint8_t control=0; control<16; control++){ //Recorro 16 valores de control del mux: 0000 0000 hasta 0000 1111
 8000506:	2300      	movs	r3, #0
 8000508:	71fb      	strb	r3, [r7, #7]
 800050a:	e072      	b.n	80005f2 <MIDILoop+0xf2>
		uint8_t pulsado = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	71bb      	strb	r3, [r7, #6]
		pulsado = IdentifyRow(control); //Por cada valor de control del Mux compruebo la entrada del Mux
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	4618      	mov	r0, r3
 8000514:	f000 f87c 	bl	8000610 <IdentifyRow>
 8000518:	4603      	mov	r3, r0
 800051a:	71bb      	strb	r3, [r7, #6]
		if (pulsado & 0x01){ //compruebo si en la fila 1 (entrada) se ha pulsado (flag subida)
 800051c:	79bb      	ldrb	r3, [r7, #6]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	2b00      	cmp	r3, #0
 8000524:	d00c      	beq.n	8000540 <MIDILoop+0x40>
			if (pulsado_anterior1[control] != 1){
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	4a36      	ldr	r2, [pc, #216]	; (8000604 <MIDILoop+0x104>)
 800052a:	5cd3      	ldrb	r3, [r2, r3]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d007      	beq.n	8000540 <MIDILoop+0x40>
				Send_MIDINoteOn_1(control);
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fa0a 	bl	800094c <Send_MIDINoteOn_1>
				pulsado_anterior1[control] = 1;
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	4a32      	ldr	r2, [pc, #200]	; (8000604 <MIDILoop+0x104>)
 800053c:	2101      	movs	r1, #1
 800053e:	54d1      	strb	r1, [r2, r3]
			}
		}
		if (!(pulsado & 0x01)){ //compruebo si en la fila 1 (entrada) se ha dejado de pulsar (flag bajada)
 8000540:	79bb      	ldrb	r3, [r7, #6]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	2b00      	cmp	r3, #0
 8000548:	d10c      	bne.n	8000564 <MIDILoop+0x64>
			if (pulsado_anterior1[control] == 1){
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4a2d      	ldr	r2, [pc, #180]	; (8000604 <MIDILoop+0x104>)
 800054e:	5cd3      	ldrb	r3, [r2, r3]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d107      	bne.n	8000564 <MIDILoop+0x64>
				Send_MIDINoteOff_1(control);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fa1c 	bl	8000994 <Send_MIDINoteOff_1>
				pulsado_anterior1[control] = 0;
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	4a29      	ldr	r2, [pc, #164]	; (8000604 <MIDILoop+0x104>)
 8000560:	2100      	movs	r1, #0
 8000562:	54d1      	strb	r1, [r2, r3]
			}
		}
		if (pulsado & 0x02){ //compruebo si en la fila 1 (entrada) se ha pulsado
 8000564:	79bb      	ldrb	r3, [r7, #6]
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	2b00      	cmp	r3, #0
 800056c:	d00c      	beq.n	8000588 <MIDILoop+0x88>
			if (pulsado_anterior2[control] != 1){
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	4a25      	ldr	r2, [pc, #148]	; (8000608 <MIDILoop+0x108>)
 8000572:	5cd3      	ldrb	r3, [r2, r3]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d007      	beq.n	8000588 <MIDILoop+0x88>
				Send_MIDINoteOn_2(control);
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fa2c 	bl	80009d8 <Send_MIDINoteOn_2>
				pulsado_anterior2[control] = 1;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4a21      	ldr	r2, [pc, #132]	; (8000608 <MIDILoop+0x108>)
 8000584:	2101      	movs	r1, #1
 8000586:	54d1      	strb	r1, [r2, r3]
			}
		}
		if (!(pulsado & 0x02)){ //compruebo si en la fila 2 (entrada) se ha dejado de pulsar
 8000588:	79bb      	ldrb	r3, [r7, #6]
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	2b00      	cmp	r3, #0
 8000590:	d10c      	bne.n	80005ac <MIDILoop+0xac>
			if (pulsado_anterior2[control] == 1){
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <MIDILoop+0x108>)
 8000596:	5cd3      	ldrb	r3, [r2, r3]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d107      	bne.n	80005ac <MIDILoop+0xac>
				Send_MIDINoteOff_2(control);
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fa3e 	bl	8000a20 <Send_MIDINoteOff_2>
				pulsado_anterior2[control] = 0;
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	4a18      	ldr	r2, [pc, #96]	; (8000608 <MIDILoop+0x108>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	54d1      	strb	r1, [r2, r3]
			}
		}
		if (pulsado & 0x04){
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00c      	beq.n	80005d0 <MIDILoop+0xd0>
			if (pulsado_anterior3[control] != 1){
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	4a14      	ldr	r2, [pc, #80]	; (800060c <MIDILoop+0x10c>)
 80005ba:	5cd3      	ldrb	r3, [r2, r3]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d007      	beq.n	80005d0 <MIDILoop+0xd0>
				ControlsUser(control);
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f8b0 	bl	8000728 <ControlsUser>
				pulsado_anterior3[control] = 1;
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	4a10      	ldr	r2, [pc, #64]	; (800060c <MIDILoop+0x10c>)
 80005cc:	2101      	movs	r1, #1
 80005ce:	54d1      	strb	r1, [r2, r3]
			}
		}
		if (!(pulsado & 0x04)){ //flanco de bajada no hago nada
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d108      	bne.n	80005ec <MIDILoop+0xec>
			if (pulsado_anterior3[control] == 1){
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	4a0b      	ldr	r2, [pc, #44]	; (800060c <MIDILoop+0x10c>)
 80005de:	5cd3      	ldrb	r3, [r2, r3]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d103      	bne.n	80005ec <MIDILoop+0xec>
				pulsado_anterior3[control] = 0;
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	4a09      	ldr	r2, [pc, #36]	; (800060c <MIDILoop+0x10c>)
 80005e8:	2100      	movs	r1, #0
 80005ea:	54d1      	strb	r1, [r2, r3]
	for (uint8_t control=0; control<16; control++){ //Recorro 16 valores de control del mux: 0000 0000 hasta 0000 1111
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	3301      	adds	r3, #1
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d989      	bls.n	800050c <MIDILoop+0xc>
			}
		}
	}
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	2000002c 	.word	0x2000002c
 8000608:	2000003c 	.word	0x2000003c
 800060c:	2000004c 	.word	0x2000004c

08000610 <IdentifyRow>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	while(__HAL_TIM_GET_COUNTER(&htim1) < delay);
}


uint8_t IdentifyRow(uint8_t control){ //Comprobar la entrada del MUX (2 entradas)
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	WriteControl(control);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f837 	bl	8000690 <WriteControl>
//	HAL_Delay(0.030); // Hal_Delay toma uint32_t, 0.030 es float, comprobar
//	delay(100); //20 ns tiempo de propagacion del MUX necesario
	uint8_t pulsado = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	73fb      	strb	r3, [r7, #15]
	uint8_t pulsado1 = false;
 8000626:	2300      	movs	r3, #0
 8000628:	73bb      	strb	r3, [r7, #14]
	uint8_t pulsado2 = false;
 800062a:	2300      	movs	r3, #0
 800062c:	737b      	strb	r3, [r7, #13]
	uint8_t userControls = false;
 800062e:	2300      	movs	r3, #0
 8000630:	733b      	strb	r3, [r7, #12]
	pulsado1 = HAL_GPIO_ReadPin(I1_GPIO_Port, I1_Pin);  //Comprobar si se ha pulsado una nota en la fila 1
 8000632:	2101      	movs	r1, #1
 8000634:	4815      	ldr	r0, [pc, #84]	; (800068c <IdentifyRow+0x7c>)
 8000636:	f001 f80d 	bl	8001654 <HAL_GPIO_ReadPin>
 800063a:	4603      	mov	r3, r0
 800063c:	73bb      	strb	r3, [r7, #14]
	pulsado2 = HAL_GPIO_ReadPin(I2_GPIO_Port, I2_Pin); //Comprobar si se ha pulsado una nota en la fila 2
 800063e:	2102      	movs	r1, #2
 8000640:	4812      	ldr	r0, [pc, #72]	; (800068c <IdentifyRow+0x7c>)
 8000642:	f001 f807 	bl	8001654 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	737b      	strb	r3, [r7, #13]
	userControls = HAL_GPIO_ReadPin(I3_GPIO_Port, I3_Pin);
 800064a:	2110      	movs	r1, #16
 800064c:	480f      	ldr	r0, [pc, #60]	; (800068c <IdentifyRow+0x7c>)
 800064e:	f001 f801 	bl	8001654 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	733b      	strb	r3, [r7, #12]
	pulsado = ((pulsado1 & 0x01) | (pulsado2<<1 & 0x02) | (userControls<<2 & 0x04));
 8000656:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	b25a      	sxtb	r2, r3
 8000660:	7b7b      	ldrb	r3, [r7, #13]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	b25b      	sxtb	r3, r3
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	b25b      	sxtb	r3, r3
 800066c:	4313      	orrs	r3, r2
 800066e:	b25a      	sxtb	r2, r3
 8000670:	7b3b      	ldrb	r3, [r7, #12]
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	b25b      	sxtb	r3, r3
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	b25b      	sxtb	r3, r3
 800067c:	4313      	orrs	r3, r2
 800067e:	b25b      	sxtb	r3, r3
 8000680:	73fb      	strb	r3, [r7, #15]
	return pulsado;
 8000682:	7bfb      	ldrb	r3, [r7, #15]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40020000 	.word	0x40020000

08000690 <WriteControl>:

void WriteControl(uint8_t control){ //Escribir en el GPIO correspondiente los valores de control del MUX
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	uint8_t S0 = control & 0x01; //0000 0001
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	73fb      	strb	r3, [r7, #15]
	uint8_t S1 = control & 0x02; //0000 0010
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 0302 	and.w	r3, r3, #2
 80006a8:	73bb      	strb	r3, [r7, #14]
	uint8_t S2 = control & 0x04; //0000 0100
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]
	uint8_t S3 = control & 0x08; //0000 1000
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	f003 0308 	and.w	r3, r3, #8
 80006b8:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, S0_Pin, S0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	bf14      	ite	ne
 80006c0:	2301      	movne	r3, #1
 80006c2:	2300      	moveq	r3, #0
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006cc:	4814      	ldr	r0, [pc, #80]	; (8000720 <WriteControl+0x90>)
 80006ce:	f000 ffd9 	bl	8001684 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, S1_Pin, S1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006d2:	7bbb      	ldrb	r3, [r7, #14]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	bf14      	ite	ne
 80006d8:	2301      	movne	r3, #1
 80006da:	2300      	moveq	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	461a      	mov	r2, r3
 80006e0:	2120      	movs	r1, #32
 80006e2:	4810      	ldr	r0, [pc, #64]	; (8000724 <WriteControl+0x94>)
 80006e4:	f000 ffce 	bl	8001684 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, S2_Pin, S2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006e8:	7b7b      	ldrb	r3, [r7, #13]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	461a      	mov	r2, r3
 80006f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006fa:	480a      	ldr	r0, [pc, #40]	; (8000724 <WriteControl+0x94>)
 80006fc:	f000 ffc2 	bl	8001684 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, S3_Pin, S3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000700:	7b3b      	ldrb	r3, [r7, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	bf14      	ite	ne
 8000706:	2301      	movne	r3, #1
 8000708:	2300      	moveq	r3, #0
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <WriteControl+0x90>)
 8000714:	f000 ffb6 	bl	8001684 <HAL_GPIO_WritePin>
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40020000 	.word	0x40020000
 8000724:	40020400 	.word	0x40020400

08000728 <ControlsUser>:


void ControlsUser(uint8_t control){
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	switch(control)
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b04      	cmp	r3, #4
 8000736:	d81c      	bhi.n	8000772 <ControlsUser+0x4a>
 8000738:	a201      	add	r2, pc, #4	; (adr r2, 8000740 <ControlsUser+0x18>)
 800073a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073e:	bf00      	nop
 8000740:	08000755 	.word	0x08000755
 8000744:	0800075b 	.word	0x0800075b
 8000748:	08000761 	.word	0x08000761
 800074c:	08000767 	.word	0x08000767
 8000750:	0800076d 	.word	0x0800076d
	{
	case 0:
		Down();
 8000754:	f000 f84c 	bl	80007f0 <Down>
		break;
 8000758:	e00b      	b.n	8000772 <ControlsUser+0x4a>
	case 1:
		Up();
 800075a:	f000 f80f 	bl	800077c <Up>
		break;
 800075e:	e008      	b.n	8000772 <ControlsUser+0x4a>
	case 2:
		VolumeControl();
 8000760:	f000 f8c0 	bl	80008e4 <VolumeControl>
		break;
 8000764:	e005      	b.n	8000772 <ControlsUser+0x4a>
	case 3:
		Octavacion();
 8000766:	f000 f8d7 	bl	8000918 <Octavacion>
		break;
 800076a:	e002      	b.n	8000772 <ControlsUser+0x4a>
	case 4:
		Vibrato();
 800076c:	f000 f87a 	bl	8000864 <Vibrato>
	}
}
 8000770:	e7ff      	b.n	8000772 <ControlsUser+0x4a>
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop

0800077c <Up>:


void Up() {
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
	if(octavacion_activo){
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <Up+0x5c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00b      	beq.n	80007a0 <Up+0x24>
		note1 += 0x0C;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <Up+0x60>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	330c      	adds	r3, #12
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <Up+0x60>)
 8000792:	701a      	strb	r2, [r3, #0]
		note2 += 0x0C;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <Up+0x64>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	330c      	adds	r3, #12
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <Up+0x64>)
 800079e:	701a      	strb	r2, [r3, #0]
	}
	if(volumen_activo){
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <Up+0x68>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d012      	beq.n	80007ce <Up+0x52>
		if (volume < (volumeMax - 0x0A)) { //Para que no supere el volumen maximo permitido
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <Up+0x6c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <Up+0x70>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	3b0a      	subs	r3, #10
 80007b4:	429a      	cmp	r2, r3
 80007b6:	da06      	bge.n	80007c6 <Up+0x4a>
			volume += 0x0A; //Sumo el volume de 10 en 10
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <Up+0x6c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	330a      	adds	r3, #10
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <Up+0x6c>)
 80007c2:	701a      	strb	r2, [r3, #0]
		}else{
			volume = volumeMax;
		}
	}
}
 80007c4:	e003      	b.n	80007ce <Up+0x52>
			volume = volumeMax;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <Up+0x70>)
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <Up+0x6c>)
 80007cc:	701a      	strb	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	2000005d 	.word	0x2000005d
 80007dc:	20000001 	.word	0x20000001
 80007e0:	20000002 	.word	0x20000002
 80007e4:	2000005e 	.word	0x2000005e
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000003 	.word	0x20000003

080007f0 <Down>:

void Down() {
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
	if(octavacion_activo){
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <Down+0x5c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d00b      	beq.n	8000814 <Down+0x24>
		note1 -= 0x0C;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <Down+0x60>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	3b0c      	subs	r3, #12
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <Down+0x60>)
 8000806:	701a      	strb	r2, [r3, #0]
		note2 -= 0x0C;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <Down+0x64>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	3b0c      	subs	r3, #12
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <Down+0x64>)
 8000812:	701a      	strb	r2, [r3, #0]
	}
	if(volumen_activo){
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <Down+0x68>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d012      	beq.n	8000842 <Down+0x52>
		if (volume > (volumeMin + 0x0A)) { //Para que no supere el volumen minimo permitido
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <Down+0x6c>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <Down+0x70>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	330a      	adds	r3, #10
 8000828:	429a      	cmp	r2, r3
 800082a:	dd06      	ble.n	800083a <Down+0x4a>
			volume -= 0x0A; //Resto el volume de 10 en 10
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <Down+0x6c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	3b0a      	subs	r3, #10
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <Down+0x6c>)
 8000836:	701a      	strb	r2, [r3, #0]
		}else{
			volume = volumeMin;
		}
	}
}
 8000838:	e003      	b.n	8000842 <Down+0x52>
			volume = volumeMin;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <Down+0x70>)
 800083c:	781a      	ldrb	r2, [r3, #0]
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <Down+0x6c>)
 8000840:	701a      	strb	r2, [r3, #0]
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	2000005d 	.word	0x2000005d
 8000850:	20000001 	.word	0x20000001
 8000854:	20000002 	.word	0x20000002
 8000858:	2000005e 	.word	0x2000005e
 800085c:	20000000 	.word	0x20000000
 8000860:	2000005f 	.word	0x2000005f

08000864 <Vibrato>:

void Vibrato(){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
	uint8_t vibratoOn[3] = {0xB0, 0x01, 0x7F}; //MIDI Control Change Modulation wheel (vibrato) al maximo
 800086a:	4a19      	ldr	r2, [pc, #100]	; (80008d0 <Vibrato+0x6c>)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	6812      	ldr	r2, [r2, #0]
 8000870:	4611      	mov	r1, r2
 8000872:	8019      	strh	r1, [r3, #0]
 8000874:	3302      	adds	r3, #2
 8000876:	0c12      	lsrs	r2, r2, #16
 8000878:	701a      	strb	r2, [r3, #0]
	uint8_t vibratoOff[3] = {0xB0, 0x01, 0x00};
 800087a:	4a16      	ldr	r2, [pc, #88]	; (80008d4 <Vibrato+0x70>)
 800087c:	463b      	mov	r3, r7
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	4611      	mov	r1, r2
 8000882:	8019      	strh	r1, [r3, #0]
 8000884:	3302      	adds	r3, #2
 8000886:	0c12      	lsrs	r2, r2, #16
 8000888:	701a      	strb	r2, [r3, #0]

//	HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);


	vibrato_activo = !vibrato_activo; //Conmutamos cada vez que pulsamos para activar o desactivar vibrato
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <Vibrato+0x74>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	bf0c      	ite	eq
 8000892:	2301      	moveq	r3, #1
 8000894:	2300      	movne	r3, #0
 8000896:	b2db      	uxtb	r3, r3
 8000898:	461a      	mov	r2, r3
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <Vibrato+0x74>)
 800089c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800089e:	2120      	movs	r1, #32
 80008a0:	480e      	ldr	r0, [pc, #56]	; (80008dc <Vibrato+0x78>)
 80008a2:	f000 ff08 	bl	80016b6 <HAL_GPIO_TogglePin>
	if (vibrato_activo) {
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <Vibrato+0x74>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d006      	beq.n	80008bc <Vibrato+0x58>
		HAL_UART_Transmit(&huart3, (uint8_t*)&vibratoOn, 3, 100);
 80008ae:	1d39      	adds	r1, r7, #4
 80008b0:	2364      	movs	r3, #100	; 0x64
 80008b2:	2203      	movs	r2, #3
 80008b4:	480a      	ldr	r0, [pc, #40]	; (80008e0 <Vibrato+0x7c>)
 80008b6:	f002 f884 	bl	80029c2 <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&huart3, (uint8_t*)&vibratoOff, 3, 100);

	}
}
 80008ba:	e005      	b.n	80008c8 <Vibrato+0x64>
		HAL_UART_Transmit(&huart3, (uint8_t*)&vibratoOff, 3, 100);
 80008bc:	4639      	mov	r1, r7
 80008be:	2364      	movs	r3, #100	; 0x64
 80008c0:	2203      	movs	r2, #3
 80008c2:	4807      	ldr	r0, [pc, #28]	; (80008e0 <Vibrato+0x7c>)
 80008c4:	f002 f87d 	bl	80029c2 <HAL_UART_Transmit>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	0800311c 	.word	0x0800311c
 80008d4:	08003120 	.word	0x08003120
 80008d8:	2000005c 	.word	0x2000005c
 80008dc:	40020000 	.word	0x40020000
 80008e0:	200000ec 	.word	0x200000ec

080008e4 <VolumeControl>:

uint8_t VolumeControl(){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin);
 80008e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ec:	4808      	ldr	r0, [pc, #32]	; (8000910 <VolumeControl+0x2c>)
 80008ee:	f000 fee2 	bl	80016b6 <HAL_GPIO_TogglePin>

	volumen_activo = !volumen_activo;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <VolumeControl+0x30>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	bf0c      	ite	eq
 80008fa:	2301      	moveq	r3, #1
 80008fc:	2300      	movne	r3, #0
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <VolumeControl+0x30>)
 8000904:	701a      	strb	r2, [r3, #0]
	return volumen_activo;
 8000906:	4b03      	ldr	r3, [pc, #12]	; (8000914 <VolumeControl+0x30>)
 8000908:	781b      	ldrb	r3, [r3, #0]
}
 800090a:	4618      	mov	r0, r3
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40020400 	.word	0x40020400
 8000914:	2000005e 	.word	0x2000005e

08000918 <Octavacion>:
uint8_t Octavacion(){
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 800091c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000920:	4808      	ldr	r0, [pc, #32]	; (8000944 <Octavacion+0x2c>)
 8000922:	f000 fec8 	bl	80016b6 <HAL_GPIO_TogglePin>

	octavacion_activo = !octavacion_activo;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <Octavacion+0x30>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	bf0c      	ite	eq
 800092e:	2301      	moveq	r3, #1
 8000930:	2300      	movne	r3, #0
 8000932:	b2db      	uxtb	r3, r3
 8000934:	461a      	mov	r2, r3
 8000936:	4b04      	ldr	r3, [pc, #16]	; (8000948 <Octavacion+0x30>)
 8000938:	701a      	strb	r2, [r3, #0]
	return octavacion_activo;
 800093a:	4b03      	ldr	r3, [pc, #12]	; (8000948 <Octavacion+0x30>)
 800093c:	781b      	ldrb	r3, [r3, #0]
}
 800093e:	4618      	mov	r0, r3
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40020400 	.word	0x40020400
 8000948:	2000005d 	.word	0x2000005d

0800094c <Send_MIDINoteOn_1>:


void Send_MIDINoteOn_1(uint8_t control){ //Enviar código MIDI NoteOn de la fila 1 correspondiente a cada nota en funcion del codigo de control
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
//	uint8_t MIDI_Fs3[3] = {0x90, 0x36, volume};
//	uint8_t MIDI_G3[3] = {0x90, 0x37, volume};
//	uint8_t MIDI_Gs3[3] = {0x90, 0x38, volume};
//	uint8_t MIDI_A3[3] = {0x90, 0x39, volume};

	if (control <= 14){
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b0e      	cmp	r3, #14
 800095a:	d811      	bhi.n	8000980 <Send_MIDINoteOn_1+0x34>
		uint8_t MIDI[3] = {0x90, note1 - control, volume};
 800095c:	2390      	movs	r3, #144	; 0x90
 800095e:	733b      	strb	r3, [r7, #12]
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <Send_MIDINoteOn_1+0x3c>)
 8000962:	781a      	ldrb	r2, [r3, #0]
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	b2db      	uxtb	r3, r3
 800096a:	737b      	strb	r3, [r7, #13]
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <Send_MIDINoteOn_1+0x40>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart3, MIDI, 3, 100);
 8000972:	f107 010c 	add.w	r1, r7, #12
 8000976:	2364      	movs	r3, #100	; 0x64
 8000978:	2203      	movs	r2, #3
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <Send_MIDINoteOn_1+0x44>)
 800097c:	f002 f821 	bl	80029c2 <HAL_UART_Transmit>
	}
}
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000001 	.word	0x20000001
 800098c:	20000000 	.word	0x20000000
 8000990:	200000ec 	.word	0x200000ec

08000994 <Send_MIDINoteOff_1>:


void Send_MIDINoteOff_1(uint8_t control){ //Enviar código MIDI NoteOff de la fila 1 correspondiente a cada nota en función del código de control
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
//	uint8_t MIDI_Fs3[3] = {0x90, 0x36, volume};
//	uint8_t MIDI_G3[3] = {0x90, 0x37, volume};
//	uint8_t MIDI_Gs3[3] = {0x90, 0x38, volume};
//	uint8_t MIDI_A3[3] = {0x90, 0x39, volume};

	if (control <= 14){
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2b0e      	cmp	r3, #14
 80009a2:	d810      	bhi.n	80009c6 <Send_MIDINoteOff_1+0x32>
		uint8_t MIDI[3] = {0x90, note1 - control, 0x00};
 80009a4:	2390      	movs	r3, #144	; 0x90
 80009a6:	733b      	strb	r3, [r7, #12]
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <Send_MIDINoteOff_1+0x3c>)
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	737b      	strb	r3, [r7, #13]
 80009b4:	2300      	movs	r3, #0
 80009b6:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart3, MIDI, 3, 100);
 80009b8:	f107 010c 	add.w	r1, r7, #12
 80009bc:	2364      	movs	r3, #100	; 0x64
 80009be:	2203      	movs	r2, #3
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <Send_MIDINoteOff_1+0x40>)
 80009c2:	f001 fffe 	bl	80029c2 <HAL_UART_Transmit>
	}
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000001 	.word	0x20000001
 80009d4:	200000ec 	.word	0x200000ec

080009d8 <Send_MIDINoteOn_2>:

void Send_MIDINoteOn_2(uint8_t control){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
//	uint8_t MIDI_A4[3] = {0x90, 0x45, 0x00};
//	uint8_t MIDI_As4[3] = {0x90, 0x46, 0x00};
//	uint8_t MIDI_B4[3] = {0x90, 0x47, 0x00};
//	uint8_t MIDI_C5[3] = {0x90, 0x48, 0x00};

	if (control <= 14){
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b0e      	cmp	r3, #14
 80009e6:	d811      	bhi.n	8000a0c <Send_MIDINoteOn_2+0x34>
		uint8_t MIDI[3] = {0x90, note2 - control, volume};
 80009e8:	2390      	movs	r3, #144	; 0x90
 80009ea:	733b      	strb	r3, [r7, #12]
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <Send_MIDINoteOn_2+0x3c>)
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	737b      	strb	r3, [r7, #13]
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <Send_MIDINoteOn_2+0x40>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart3, MIDI, 3, 100);
 80009fe:	f107 010c 	add.w	r1, r7, #12
 8000a02:	2364      	movs	r3, #100	; 0x64
 8000a04:	2203      	movs	r2, #3
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <Send_MIDINoteOn_2+0x44>)
 8000a08:	f001 ffdb 	bl	80029c2 <HAL_UART_Transmit>
	}
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000002 	.word	0x20000002
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	200000ec 	.word	0x200000ec

08000a20 <Send_MIDINoteOff_2>:

void Send_MIDINoteOff_2(uint8_t control){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
//	uint8_t MIDI_A4[3] = {0x90, 0x45, 0x00};
//	uint8_t MIDI_As4[3] = {0x90, 0x46, 0x00};
//	uint8_t MIDI_B4[3] = {0x90, 0x47, 0x00};
//	uint8_t MIDI_C5[3] = {0x90, 0x48, 0x00};

	if (control <= 14){
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b0e      	cmp	r3, #14
 8000a2e:	d810      	bhi.n	8000a52 <Send_MIDINoteOff_2+0x32>
		uint8_t MIDI[3] = {0x90, note2 - control, 0x00};
 8000a30:	2390      	movs	r3, #144	; 0x90
 8000a32:	733b      	strb	r3, [r7, #12]
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <Send_MIDINoteOff_2+0x3c>)
 8000a36:	781a      	ldrb	r2, [r3, #0]
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	737b      	strb	r3, [r7, #13]
 8000a40:	2300      	movs	r3, #0
 8000a42:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart3, MIDI, 3, 100);
 8000a44:	f107 010c 	add.w	r1, r7, #12
 8000a48:	2364      	movs	r3, #100	; 0x64
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <Send_MIDINoteOff_2+0x40>)
 8000a4e:	f001 ffb8 	bl	80029c2 <HAL_UART_Transmit>
	}
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000002 	.word	0x20000002
 8000a60:	200000ec 	.word	0x200000ec

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a68:	f000 fb08 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6c:	f000 f810 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a70:	f000 f920 	bl	8000cb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a74:	f000 f8ca 	bl	8000c0c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a78:	f000 f8f2 	bl	8000c60 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000a7c:	f000 f876 	bl	8000b6c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <main+0x28>)
 8000a82:	f001 fc6b 	bl	800235c <HAL_TIM_Base_Start>
//	  WriteControl(9);
//	  sprintf(msg, "La lectura es %d \n\r",HAL_GPIO_ReadPin(GPIOA, I1_Pin));
//	  sprintf(msg, "La lectura es %d \n\r",HAL_GPIO_ReadPin(GPIOA, I2_Pin));
//	  printf(msg);

	  MIDILoop();
 8000a86:	f7ff fd3b 	bl	8000500 <MIDILoop>
 8000a8a:	e7fc      	b.n	8000a86 <main+0x22>
 8000a8c:	20000060 	.word	0x20000060

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b094      	sub	sp, #80	; 0x50
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	2234      	movs	r2, #52	; 0x34
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f002 fb04 	bl	80030ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <SystemClock_Config+0xd4>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	4a29      	ldr	r2, [pc, #164]	; (8000b64 <SystemClock_Config+0xd4>)
 8000abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <SystemClock_Config+0xd4>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <SystemClock_Config+0xd8>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000adc:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <SystemClock_Config+0xd8>)
 8000ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae2:	6013      	str	r3, [r2, #0]
 8000ae4:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <SystemClock_Config+0xd8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af0:	2301      	movs	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afa:	2302      	movs	r3, #2
 8000afc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b04:	2304      	movs	r3, #4
 8000b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b08:	2364      	movs	r3, #100	; 0x64
 8000b0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 f92f 	bl	8001d80 <HAL_RCC_OscConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b28:	f000 f974 	bl	8000e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b30:	2302      	movs	r3, #2
 8000b32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	2103      	movs	r1, #3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fdce 	bl	80016ec <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b56:	f000 f95d 	bl	8000e14 <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3750      	adds	r7, #80	; 0x50
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40007000 	.word	0x40007000

08000b6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b80:	463b      	mov	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b88:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <MX_TIM1_Init+0x98>)
 8000b8a:	4a1f      	ldr	r2, [pc, #124]	; (8000c08 <MX_TIM1_Init+0x9c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <MX_TIM1_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_TIM1_Init+0x98>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <MX_TIM1_Init+0x98>)
 8000b9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ba0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <MX_TIM1_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_TIM1_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MX_TIM1_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bb4:	4813      	ldr	r0, [pc, #76]	; (8000c04 <MX_TIM1_Init+0x98>)
 8000bb6:	f001 fb81 	bl	80022bc <HAL_TIM_Base_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000bc0:	f000 f928 	bl	8000e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <MX_TIM1_Init+0x98>)
 8000bd2:	f001 fc2b 	bl	800242c <HAL_TIM_ConfigClockSource>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000bdc:	f000 f91a 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000be8:	463b      	mov	r3, r7
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_TIM1_Init+0x98>)
 8000bee:	f001 fe1f 	bl	8002830 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bf8:	f000 f90c 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000060 	.word	0x20000060
 8000c08:	40010000 	.word	0x40010000

08000c0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <MX_USART2_UART_Init+0x50>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_USART2_UART_Init+0x4c>)
 8000c44:	f001 fe70 	bl	8002928 <HAL_UART_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c4e:	f000 f8e1 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200000a8 	.word	0x200000a8
 8000c5c:	40004400 	.word	0x40004400

08000c60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART3_UART_Init+0x4c>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <MX_USART3_UART_Init+0x50>)
 8000c68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 31250;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_USART3_UART_Init+0x4c>)
 8000c6c:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000c70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_USART3_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_USART3_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART3_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART3_UART_Init+0x4c>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART3_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USART3_UART_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_USART3_UART_Init+0x4c>)
 8000c98:	f001 fe46 	bl	8002928 <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ca2:	f000 f8b7 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000ec 	.word	0x200000ec
 8000cb0:	40004800 	.word	0x40004800

08000cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b4d      	ldr	r3, [pc, #308]	; (8000e04 <MX_GPIO_Init+0x150>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a4c      	ldr	r2, [pc, #304]	; (8000e04 <MX_GPIO_Init+0x150>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b4a      	ldr	r3, [pc, #296]	; (8000e04 <MX_GPIO_Init+0x150>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b46      	ldr	r3, [pc, #280]	; (8000e04 <MX_GPIO_Init+0x150>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a45      	ldr	r2, [pc, #276]	; (8000e04 <MX_GPIO_Init+0x150>)
 8000cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b43      	ldr	r3, [pc, #268]	; (8000e04 <MX_GPIO_Init+0x150>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	4b3f      	ldr	r3, [pc, #252]	; (8000e04 <MX_GPIO_Init+0x150>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a3e      	ldr	r2, [pc, #248]	; (8000e04 <MX_GPIO_Init+0x150>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <MX_GPIO_Init+0x150>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <MX_GPIO_Init+0x150>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a37      	ldr	r2, [pc, #220]	; (8000e04 <MX_GPIO_Init+0x150>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <MX_GPIO_Init+0x150>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|IS3_Pin|IS2_Pin|S3_Pin
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000d40:	4831      	ldr	r0, [pc, #196]	; (8000e08 <MX_GPIO_Init+0x154>)
 8000d42:	f000 fc9f 	bl	8001684 <HAL_GPIO_WritePin>
                          |OUT_MODE_Pin|S0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S2_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 8000d46:	2200      	movs	r2, #0
 8000d48:	f24e 4160 	movw	r1, #58464	; 0xe460
 8000d4c:	482f      	ldr	r0, [pc, #188]	; (8000e0c <MX_GPIO_Init+0x158>)
 8000d4e:	f000 fc99 	bl	8001684 <HAL_GPIO_WritePin>
                          |S1_Pin|IS1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d58:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4829      	ldr	r0, [pc, #164]	; (8000e10 <MX_GPIO_Init+0x15c>)
 8000d6a:	f000 fadf 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pins : I1_Pin I2_Pin I3_Pin */
  GPIO_InitStruct.Pin = I1_Pin|I2_Pin|I3_Pin;
 8000d6e:	2313      	movs	r3, #19
 8000d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4821      	ldr	r0, [pc, #132]	; (8000e08 <MX_GPIO_Init+0x154>)
 8000d82:	f000 fad3 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d86:	2320      	movs	r3, #32
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	481a      	ldr	r0, [pc, #104]	; (8000e08 <MX_GPIO_Init+0x154>)
 8000d9e:	f000 fac5 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pins : IS3_Pin IS2_Pin S3_Pin OUT_MODE_Pin
                           S0_Pin */
  GPIO_InitStruct.Pin = IS3_Pin|IS2_Pin|S3_Pin|OUT_MODE_Pin
 8000da2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000da6:	617b      	str	r3, [r7, #20]
                          |S0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	4813      	ldr	r0, [pc, #76]	; (8000e08 <MX_GPIO_Init+0x154>)
 8000dbc:	f000 fab6 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin Led1_Pin S1_Pin IS1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|Led1_Pin|S1_Pin|IS1_Pin;
 8000dc0:	f242 4360 	movw	r3, #9312	; 0x2460
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <MX_GPIO_Init+0x158>)
 8000dda:	f000 faa7 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led2_Pin Led3_Pin */
  GPIO_InitStruct.Pin = Led2_Pin|Led3_Pin;
 8000dde:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_GPIO_Init+0x158>)
 8000df8:	f000 fa98 	bl	800132c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	40020800 	.word	0x40020800

08000e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e18:	b672      	cpsid	i
}
 8000e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <Error_Handler+0x8>
	...

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_MspInit+0x4c>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e5e:	2007      	movs	r0, #7
 8000e60:	f000 fa30 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40023800 	.word	0x40023800

08000e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <HAL_TIM_Base_MspInit+0x3c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d10d      	bne.n	8000e9e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_TIM_Base_MspInit+0x40>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <HAL_TIM_Base_MspInit+0x40>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <HAL_TIM_Base_MspInit+0x40>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08c      	sub	sp, #48	; 0x30
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <HAL_UART_MspInit+0xe8>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d12c      	bne.n	8000f30 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <HAL_UART_MspInit+0xec>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a30      	ldr	r2, [pc, #192]	; (8000fa0 <HAL_UART_MspInit+0xec>)
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <HAL_UART_MspInit+0xec>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	61bb      	str	r3, [r7, #24]
 8000ef0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <HAL_UART_MspInit+0xec>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a29      	ldr	r2, [pc, #164]	; (8000fa0 <HAL_UART_MspInit+0xec>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <HAL_UART_MspInit+0xec>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f0e:	230c      	movs	r3, #12
 8000f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f1e:	2307      	movs	r3, #7
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	481e      	ldr	r0, [pc, #120]	; (8000fa4 <HAL_UART_MspInit+0xf0>)
 8000f2a:	f000 f9ff 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f2e:	e031      	b.n	8000f94 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <HAL_UART_MspInit+0xf4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d12c      	bne.n	8000f94 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_UART_MspInit+0xec>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <HAL_UART_MspInit+0xec>)
 8000f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_UART_MspInit+0xec>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_UART_MspInit+0xec>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <HAL_UART_MspInit+0xec>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_UART_MspInit+0xec>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f72:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f84:	2307      	movs	r3, #7
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4807      	ldr	r0, [pc, #28]	; (8000fac <HAL_UART_MspInit+0xf8>)
 8000f90:	f000 f9cc 	bl	800132c <HAL_GPIO_Init>
}
 8000f94:	bf00      	nop
 8000f96:	3730      	adds	r7, #48	; 0x30
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40004400 	.word	0x40004400
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	40004800 	.word	0x40004800
 8000fac:	40020800 	.word	0x40020800

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffc:	f000 f890 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102e:	490e      	ldr	r1, [pc, #56]	; (8001068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001030:	4a0e      	ldr	r2, [pc, #56]	; (800106c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001044:	4c0b      	ldr	r4, [pc, #44]	; (8001074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001052:	f7ff ffd7 	bl	8001004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001056:	f002 f831 	bl	80030bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fd03 	bl	8000a64 <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800106c:	0800314c 	.word	0x0800314c
  ldr r2, =_sbss
 8001070:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001074:	20000134 	.word	0x20000134

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_Init+0x40>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_Init+0x40>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_Init+0x40>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f90d 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 f808 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff feb6 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x54>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_InitTick+0x58>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f917 	bl	8001312 <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f000 f8ed 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <HAL_InitTick+0x5c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000004 	.word	0x20000004
 8001118:	2000000c 	.word	0x2000000c
 800111c:	20000008 	.word	0x20000008

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	2000000c 	.word	0x2000000c
 8001144:	20000130 	.word	0x20000130

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000130 	.word	0x20000130

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	; (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	; (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff8e 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff47 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff5c 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff8e 	bl	8001218 <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5d 	bl	80011c4 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffb0 	bl	8001280 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	e165      	b.n	8001614 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001348:	2201      	movs	r2, #1
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	429a      	cmp	r2, r3
 8001362:	f040 8154 	bne.w	800160e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b01      	cmp	r3, #1
 8001370:	d005      	beq.n	800137e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137a:	2b02      	cmp	r3, #2
 800137c:	d130      	bne.n	80013e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	f003 0201 	and.w	r2, r3, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d017      	beq.n	800141c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	2203      	movs	r2, #3
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d123      	bne.n	8001470 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	08da      	lsrs	r2, r3, #3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3208      	adds	r2, #8
 8001430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	220f      	movs	r2, #15
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	691a      	ldr	r2, [r3, #16]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	08da      	lsrs	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3208      	adds	r2, #8
 800146a:	69b9      	ldr	r1, [r7, #24]
 800146c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	2203      	movs	r2, #3
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0203 	and.w	r2, r3, #3
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 80ae 	beq.w	800160e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b5d      	ldr	r3, [pc, #372]	; (800162c <HAL_GPIO_Init+0x300>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a5c      	ldr	r2, [pc, #368]	; (800162c <HAL_GPIO_Init+0x300>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b5a      	ldr	r3, [pc, #360]	; (800162c <HAL_GPIO_Init+0x300>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ce:	4a58      	ldr	r2, [pc, #352]	; (8001630 <HAL_GPIO_Init+0x304>)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4f      	ldr	r2, [pc, #316]	; (8001634 <HAL_GPIO_Init+0x308>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d025      	beq.n	8001546 <HAL_GPIO_Init+0x21a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4e      	ldr	r2, [pc, #312]	; (8001638 <HAL_GPIO_Init+0x30c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d01f      	beq.n	8001542 <HAL_GPIO_Init+0x216>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4d      	ldr	r2, [pc, #308]	; (800163c <HAL_GPIO_Init+0x310>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d019      	beq.n	800153e <HAL_GPIO_Init+0x212>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <HAL_GPIO_Init+0x314>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0x20e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4b      	ldr	r2, [pc, #300]	; (8001644 <HAL_GPIO_Init+0x318>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d00d      	beq.n	8001536 <HAL_GPIO_Init+0x20a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4a      	ldr	r2, [pc, #296]	; (8001648 <HAL_GPIO_Init+0x31c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d007      	beq.n	8001532 <HAL_GPIO_Init+0x206>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a49      	ldr	r2, [pc, #292]	; (800164c <HAL_GPIO_Init+0x320>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d101      	bne.n	800152e <HAL_GPIO_Init+0x202>
 800152a:	2306      	movs	r3, #6
 800152c:	e00c      	b.n	8001548 <HAL_GPIO_Init+0x21c>
 800152e:	2307      	movs	r3, #7
 8001530:	e00a      	b.n	8001548 <HAL_GPIO_Init+0x21c>
 8001532:	2305      	movs	r3, #5
 8001534:	e008      	b.n	8001548 <HAL_GPIO_Init+0x21c>
 8001536:	2304      	movs	r3, #4
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x21c>
 800153a:	2303      	movs	r3, #3
 800153c:	e004      	b.n	8001548 <HAL_GPIO_Init+0x21c>
 800153e:	2302      	movs	r3, #2
 8001540:	e002      	b.n	8001548 <HAL_GPIO_Init+0x21c>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_GPIO_Init+0x21c>
 8001546:	2300      	movs	r3, #0
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	f002 0203 	and.w	r2, r2, #3
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	4093      	lsls	r3, r2
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001558:	4935      	ldr	r1, [pc, #212]	; (8001630 <HAL_GPIO_Init+0x304>)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001566:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <HAL_GPIO_Init+0x324>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158a:	4a31      	ldr	r2, [pc, #196]	; (8001650 <HAL_GPIO_Init+0x324>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <HAL_GPIO_Init+0x324>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b4:	4a26      	ldr	r2, [pc, #152]	; (8001650 <HAL_GPIO_Init+0x324>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ba:	4b25      	ldr	r3, [pc, #148]	; (8001650 <HAL_GPIO_Init+0x324>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015de:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <HAL_GPIO_Init+0x324>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_GPIO_Init+0x324>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001608:	4a11      	ldr	r2, [pc, #68]	; (8001650 <HAL_GPIO_Init+0x324>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3301      	adds	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2b0f      	cmp	r3, #15
 8001618:	f67f ae96 	bls.w	8001348 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40013800 	.word	0x40013800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400
 800163c:	40020800 	.word	0x40020800
 8001640:	40020c00 	.word	0x40020c00
 8001644:	40021000 	.word	0x40021000
 8001648:	40021400 	.word	0x40021400
 800164c:	40021800 	.word	0x40021800
 8001650:	40013c00 	.word	0x40013c00

08001654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e001      	b.n	8001676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
 8001690:	4613      	mov	r3, r2
 8001692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001694:	787b      	ldrb	r3, [r7, #1]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016a0:	e003      	b.n	80016aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016a2:	887b      	ldrh	r3, [r7, #2]
 80016a4:	041a      	lsls	r2, r3, #16
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	619a      	str	r2, [r3, #24]
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b085      	sub	sp, #20
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016c8:	887a      	ldrh	r2, [r7, #2]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4013      	ands	r3, r2
 80016ce:	041a      	lsls	r2, r3, #16
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	400b      	ands	r3, r1
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	619a      	str	r2, [r3, #24]
}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0cc      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001700:	4b68      	ldr	r3, [pc, #416]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 030f 	and.w	r3, r3, #15
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d90c      	bls.n	8001728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b65      	ldr	r3, [pc, #404]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0b8      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d020      	beq.n	8001776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001740:	4b59      	ldr	r3, [pc, #356]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4a58      	ldr	r2, [pc, #352]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800174a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001758:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	4a52      	ldr	r2, [pc, #328]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001764:	4b50      	ldr	r3, [pc, #320]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	494d      	ldr	r1, [pc, #308]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d044      	beq.n	800180c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d107      	bne.n	800179a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d119      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e07f      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d003      	beq.n	80017aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d107      	bne.n	80017ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017aa:	4b3f      	ldr	r3, [pc, #252]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e06f      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e067      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ca:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f023 0203 	bic.w	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4934      	ldr	r1, [pc, #208]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017dc:	f7ff fcb4 	bl	8001148 <HAL_GetTick>
 80017e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e4:	f7ff fcb0 	bl	8001148 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e04f      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fa:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 020c 	and.w	r2, r3, #12
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	429a      	cmp	r2, r3
 800180a:	d1eb      	bne.n	80017e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800180c:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d20c      	bcs.n	8001834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e032      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4916      	ldr	r1, [pc, #88]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	490e      	ldr	r1, [pc, #56]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001872:	f000 f855 	bl	8001920 <HAL_RCC_GetSysClockFreq>
 8001876:	4602      	mov	r2, r0
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	490a      	ldr	r1, [pc, #40]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	5ccb      	ldrb	r3, [r1, r3]
 8001886:	fa22 f303 	lsr.w	r3, r2, r3
 800188a:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fc14 	bl	80010c0 <HAL_InitTick>

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023c00 	.word	0x40023c00
 80018a8:	40023800 	.word	0x40023800
 80018ac:	08003124 	.word	0x08003124
 80018b0:	20000004 	.word	0x20000004
 80018b4:	20000008 	.word	0x20000008

080018b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_RCC_GetHCLKFreq+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000004 	.word	0x20000004

080018d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018d4:	f7ff fff0 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 80018d8:	4602      	mov	r2, r0
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	0a9b      	lsrs	r3, r3, #10
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	4903      	ldr	r1, [pc, #12]	; (80018f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018e6:	5ccb      	ldrb	r3, [r1, r3]
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800
 80018f4:	08003134 	.word	0x08003134

080018f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018fc:	f7ff ffdc 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 8001900:	4602      	mov	r2, r0
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	0b5b      	lsrs	r3, r3, #13
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	4903      	ldr	r1, [pc, #12]	; (800191c <HAL_RCC_GetPCLK2Freq+0x24>)
 800190e:	5ccb      	ldrb	r3, [r1, r3]
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001914:	4618      	mov	r0, r3
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	08003134 	.word	0x08003134

08001920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001924:	b0ae      	sub	sp, #184	; 0xb8
 8001926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001946:	4bcb      	ldr	r3, [pc, #812]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b0c      	cmp	r3, #12
 8001950:	f200 8206 	bhi.w	8001d60 <HAL_RCC_GetSysClockFreq+0x440>
 8001954:	a201      	add	r2, pc, #4	; (adr r2, 800195c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195a:	bf00      	nop
 800195c:	08001991 	.word	0x08001991
 8001960:	08001d61 	.word	0x08001d61
 8001964:	08001d61 	.word	0x08001d61
 8001968:	08001d61 	.word	0x08001d61
 800196c:	08001999 	.word	0x08001999
 8001970:	08001d61 	.word	0x08001d61
 8001974:	08001d61 	.word	0x08001d61
 8001978:	08001d61 	.word	0x08001d61
 800197c:	080019a1 	.word	0x080019a1
 8001980:	08001d61 	.word	0x08001d61
 8001984:	08001d61 	.word	0x08001d61
 8001988:	08001d61 	.word	0x08001d61
 800198c:	08001b91 	.word	0x08001b91
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4bb9      	ldr	r3, [pc, #740]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x358>)
 8001992:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001996:	e1e7      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001998:	4bb8      	ldr	r3, [pc, #736]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x35c>)
 800199a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800199e:	e1e3      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a0:	4bb4      	ldr	r3, [pc, #720]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x354>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ac:	4bb1      	ldr	r3, [pc, #708]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d071      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b8:	4bae      	ldr	r3, [pc, #696]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	099b      	lsrs	r3, r3, #6
 80019be:	2200      	movs	r2, #0
 80019c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80019c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80019c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80019de:	4622      	mov	r2, r4
 80019e0:	462b      	mov	r3, r5
 80019e2:	f04f 0000 	mov.w	r0, #0
 80019e6:	f04f 0100 	mov.w	r1, #0
 80019ea:	0159      	lsls	r1, r3, #5
 80019ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f0:	0150      	lsls	r0, r2, #5
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4621      	mov	r1, r4
 80019f8:	1a51      	subs	r1, r2, r1
 80019fa:	6439      	str	r1, [r7, #64]	; 0x40
 80019fc:	4629      	mov	r1, r5
 80019fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001a02:	647b      	str	r3, [r7, #68]	; 0x44
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001a10:	4649      	mov	r1, r9
 8001a12:	018b      	lsls	r3, r1, #6
 8001a14:	4641      	mov	r1, r8
 8001a16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a1a:	4641      	mov	r1, r8
 8001a1c:	018a      	lsls	r2, r1, #6
 8001a1e:	4641      	mov	r1, r8
 8001a20:	1a51      	subs	r1, r2, r1
 8001a22:	63b9      	str	r1, [r7, #56]	; 0x38
 8001a24:	4649      	mov	r1, r9
 8001a26:	eb63 0301 	sbc.w	r3, r3, r1
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001a38:	4649      	mov	r1, r9
 8001a3a:	00cb      	lsls	r3, r1, #3
 8001a3c:	4641      	mov	r1, r8
 8001a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a42:	4641      	mov	r1, r8
 8001a44:	00ca      	lsls	r2, r1, #3
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4622      	mov	r2, r4
 8001a4e:	189b      	adds	r3, r3, r2
 8001a50:	633b      	str	r3, [r7, #48]	; 0x30
 8001a52:	462b      	mov	r3, r5
 8001a54:	460a      	mov	r2, r1
 8001a56:	eb42 0303 	adc.w	r3, r2, r3
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a68:	4629      	mov	r1, r5
 8001a6a:	024b      	lsls	r3, r1, #9
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a72:	4621      	mov	r1, r4
 8001a74:	024a      	lsls	r2, r1, #9
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001a8c:	f7fe fbba 	bl	8000204 <__aeabi_uldivmod>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4613      	mov	r3, r2
 8001a96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a9a:	e067      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9c:	4b75      	ldr	r3, [pc, #468]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	099b      	lsrs	r3, r3, #6
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001aa8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ab4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001aba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001abe:	4622      	mov	r2, r4
 8001ac0:	462b      	mov	r3, r5
 8001ac2:	f04f 0000 	mov.w	r0, #0
 8001ac6:	f04f 0100 	mov.w	r1, #0
 8001aca:	0159      	lsls	r1, r3, #5
 8001acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ad0:	0150      	lsls	r0, r2, #5
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	1a51      	subs	r1, r2, r1
 8001ada:	62b9      	str	r1, [r7, #40]	; 0x28
 8001adc:	4629      	mov	r1, r5
 8001ade:	eb63 0301 	sbc.w	r3, r3, r1
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001af0:	4649      	mov	r1, r9
 8001af2:	018b      	lsls	r3, r1, #6
 8001af4:	4641      	mov	r1, r8
 8001af6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001afa:	4641      	mov	r1, r8
 8001afc:	018a      	lsls	r2, r1, #6
 8001afe:	4641      	mov	r1, r8
 8001b00:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b04:	4649      	mov	r1, r9
 8001b06:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b16:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b1e:	4692      	mov	sl, r2
 8001b20:	469b      	mov	fp, r3
 8001b22:	4623      	mov	r3, r4
 8001b24:	eb1a 0303 	adds.w	r3, sl, r3
 8001b28:	623b      	str	r3, [r7, #32]
 8001b2a:	462b      	mov	r3, r5
 8001b2c:	eb4b 0303 	adc.w	r3, fp, r3
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b3e:	4629      	mov	r1, r5
 8001b40:	028b      	lsls	r3, r1, #10
 8001b42:	4621      	mov	r1, r4
 8001b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b48:	4621      	mov	r1, r4
 8001b4a:	028a      	lsls	r2, r1, #10
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b54:	2200      	movs	r2, #0
 8001b56:	673b      	str	r3, [r7, #112]	; 0x70
 8001b58:	677a      	str	r2, [r7, #116]	; 0x74
 8001b5a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001b5e:	f7fe fb51 	bl	8000204 <__aeabi_uldivmod>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4613      	mov	r3, r2
 8001b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b6c:	4b41      	ldr	r3, [pc, #260]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	3301      	adds	r3, #1
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b8e:	e0eb      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b90:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b9c:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d06b      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba8:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	2200      	movs	r2, #0
 8001bb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001bb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bba:	663b      	str	r3, [r7, #96]	; 0x60
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	667b      	str	r3, [r7, #100]	; 0x64
 8001bc0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001bc4:	4622      	mov	r2, r4
 8001bc6:	462b      	mov	r3, r5
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	0159      	lsls	r1, r3, #5
 8001bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd6:	0150      	lsls	r0, r2, #5
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4621      	mov	r1, r4
 8001bde:	1a51      	subs	r1, r2, r1
 8001be0:	61b9      	str	r1, [r7, #24]
 8001be2:	4629      	mov	r1, r5
 8001be4:	eb63 0301 	sbc.w	r3, r3, r1
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001bf6:	4659      	mov	r1, fp
 8001bf8:	018b      	lsls	r3, r1, #6
 8001bfa:	4651      	mov	r1, sl
 8001bfc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c00:	4651      	mov	r1, sl
 8001c02:	018a      	lsls	r2, r1, #6
 8001c04:	4651      	mov	r1, sl
 8001c06:	ebb2 0801 	subs.w	r8, r2, r1
 8001c0a:	4659      	mov	r1, fp
 8001c0c:	eb63 0901 	sbc.w	r9, r3, r1
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c24:	4690      	mov	r8, r2
 8001c26:	4699      	mov	r9, r3
 8001c28:	4623      	mov	r3, r4
 8001c2a:	eb18 0303 	adds.w	r3, r8, r3
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	462b      	mov	r3, r5
 8001c32:	eb49 0303 	adc.w	r3, r9, r3
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c44:	4629      	mov	r1, r5
 8001c46:	024b      	lsls	r3, r1, #9
 8001c48:	4621      	mov	r1, r4
 8001c4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c4e:	4621      	mov	r1, r4
 8001c50:	024a      	lsls	r2, r1, #9
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c5e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c64:	f7fe face 	bl	8000204 <__aeabi_uldivmod>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c72:	e065      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x420>
 8001c74:	40023800 	.word	0x40023800
 8001c78:	00f42400 	.word	0x00f42400
 8001c7c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c80:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	099b      	lsrs	r3, r3, #6
 8001c86:	2200      	movs	r2, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c90:	653b      	str	r3, [r7, #80]	; 0x50
 8001c92:	2300      	movs	r3, #0
 8001c94:	657b      	str	r3, [r7, #84]	; 0x54
 8001c96:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001c9a:	4642      	mov	r2, r8
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	f04f 0000 	mov.w	r0, #0
 8001ca2:	f04f 0100 	mov.w	r1, #0
 8001ca6:	0159      	lsls	r1, r3, #5
 8001ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cac:	0150      	lsls	r0, r2, #5
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4641      	mov	r1, r8
 8001cb4:	1a51      	subs	r1, r2, r1
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	4649      	mov	r1, r9
 8001cba:	eb63 0301 	sbc.w	r3, r3, r1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001ccc:	4659      	mov	r1, fp
 8001cce:	018b      	lsls	r3, r1, #6
 8001cd0:	4651      	mov	r1, sl
 8001cd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cd6:	4651      	mov	r1, sl
 8001cd8:	018a      	lsls	r2, r1, #6
 8001cda:	4651      	mov	r1, sl
 8001cdc:	1a54      	subs	r4, r2, r1
 8001cde:	4659      	mov	r1, fp
 8001ce0:	eb63 0501 	sbc.w	r5, r3, r1
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	00eb      	lsls	r3, r5, #3
 8001cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cf2:	00e2      	lsls	r2, r4, #3
 8001cf4:	4614      	mov	r4, r2
 8001cf6:	461d      	mov	r5, r3
 8001cf8:	4643      	mov	r3, r8
 8001cfa:	18e3      	adds	r3, r4, r3
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	464b      	mov	r3, r9
 8001d00:	eb45 0303 	adc.w	r3, r5, r3
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d12:	4629      	mov	r1, r5
 8001d14:	028b      	lsls	r3, r1, #10
 8001d16:	4621      	mov	r1, r4
 8001d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	028a      	lsls	r2, r1, #10
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d28:	2200      	movs	r2, #0
 8001d2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d2c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d32:	f7fe fa67 	bl	8000204 <__aeabi_uldivmod>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	0f1b      	lsrs	r3, r3, #28
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d5e:	e003      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	37b8      	adds	r7, #184	; 0xb8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	00f42400 	.word	0x00f42400

08001d80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e28d      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 8083 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001da0:	4b94      	ldr	r3, [pc, #592]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 030c 	and.w	r3, r3, #12
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d019      	beq.n	8001de0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dac:	4b91      	ldr	r3, [pc, #580]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001db8:	4b8e      	ldr	r3, [pc, #568]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dc4:	d00c      	beq.n	8001de0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc6:	4b8b      	ldr	r3, [pc, #556]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dce:	2b0c      	cmp	r3, #12
 8001dd0:	d112      	bne.n	8001df8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd2:	4b88      	ldr	r3, [pc, #544]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dde:	d10b      	bne.n	8001df8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	4b84      	ldr	r3, [pc, #528]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d05b      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x124>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d157      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e25a      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e00:	d106      	bne.n	8001e10 <HAL_RCC_OscConfig+0x90>
 8001e02:	4b7c      	ldr	r3, [pc, #496]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a7b      	ldr	r2, [pc, #492]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e01d      	b.n	8001e4c <HAL_RCC_OscConfig+0xcc>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0xb4>
 8001e1a:	4b76      	ldr	r3, [pc, #472]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a75      	ldr	r2, [pc, #468]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b73      	ldr	r3, [pc, #460]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a72      	ldr	r2, [pc, #456]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_OscConfig+0xcc>
 8001e34:	4b6f      	ldr	r3, [pc, #444]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a6e      	ldr	r2, [pc, #440]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b6c      	ldr	r3, [pc, #432]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a6b      	ldr	r2, [pc, #428]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7ff f978 	bl	8001148 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff f974 	bl	8001148 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	; 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e21f      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b61      	ldr	r3, [pc, #388]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0xdc>
 8001e7a:	e014      	b.n	8001ea6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f964 	bl	8001148 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff f960 	bl	8001148 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e20b      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	4b57      	ldr	r3, [pc, #348]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x104>
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d06f      	beq.n	8001f92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eb2:	4b50      	ldr	r3, [pc, #320]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d017      	beq.n	8001eee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ebe:	4b4d      	ldr	r3, [pc, #308]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d105      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001eca:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00b      	beq.n	8001eee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ed6:	4b47      	ldr	r3, [pc, #284]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ede:	2b0c      	cmp	r3, #12
 8001ee0:	d11c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ee2:	4b44      	ldr	r3, [pc, #272]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d116      	bne.n	8001f1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eee:	4b41      	ldr	r3, [pc, #260]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <HAL_RCC_OscConfig+0x186>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d001      	beq.n	8001f06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e1d3      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f06:	4b3b      	ldr	r3, [pc, #236]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4937      	ldr	r1, [pc, #220]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1a:	e03a      	b.n	8001f92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d020      	beq.n	8001f66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f24:	4b34      	ldr	r3, [pc, #208]	; (8001ff8 <HAL_RCC_OscConfig+0x278>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2a:	f7ff f90d 	bl	8001148 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f32:	f7ff f909 	bl	8001148 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e1b4      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f44:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f50:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4925      	ldr	r1, [pc, #148]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	600b      	str	r3, [r1, #0]
 8001f64:	e015      	b.n	8001f92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f66:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_RCC_OscConfig+0x278>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7ff f8ec 	bl	8001148 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f74:	f7ff f8e8 	bl	8001148 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e193      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f86:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d036      	beq.n	800200c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d016      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fac:	f7ff f8cc 	bl	8001148 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb4:	f7ff f8c8 	bl	8001148 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e173      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x234>
 8001fd2:	e01b      	b.n	800200c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fda:	f7ff f8b5 	bl	8001148 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe0:	e00e      	b.n	8002000 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe2:	f7ff f8b1 	bl	8001148 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d907      	bls.n	8002000 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e15c      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	42470000 	.word	0x42470000
 8001ffc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002000:	4b8a      	ldr	r3, [pc, #552]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 8002002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1ea      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 8097 	beq.w	8002148 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201e:	4b83      	ldr	r3, [pc, #524]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10f      	bne.n	800204a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	4b7f      	ldr	r3, [pc, #508]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a7e      	ldr	r2, [pc, #504]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b7c      	ldr	r3, [pc, #496]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002046:	2301      	movs	r3, #1
 8002048:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204a:	4b79      	ldr	r3, [pc, #484]	; (8002230 <HAL_RCC_OscConfig+0x4b0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d118      	bne.n	8002088 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_RCC_OscConfig+0x4b0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a75      	ldr	r2, [pc, #468]	; (8002230 <HAL_RCC_OscConfig+0x4b0>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002062:	f7ff f871 	bl	8001148 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206a:	f7ff f86d 	bl	8001148 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e118      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207c:	4b6c      	ldr	r3, [pc, #432]	; (8002230 <HAL_RCC_OscConfig+0x4b0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x31e>
 8002090:	4b66      	ldr	r3, [pc, #408]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	4a65      	ldr	r2, [pc, #404]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6713      	str	r3, [r2, #112]	; 0x70
 800209c:	e01c      	b.n	80020d8 <HAL_RCC_OscConfig+0x358>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b05      	cmp	r3, #5
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x340>
 80020a6:	4b61      	ldr	r3, [pc, #388]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 80020a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020aa:	4a60      	ldr	r2, [pc, #384]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	6713      	str	r3, [r2, #112]	; 0x70
 80020b2:	4b5e      	ldr	r3, [pc, #376]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b6:	4a5d      	ldr	r2, [pc, #372]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6713      	str	r3, [r2, #112]	; 0x70
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0x358>
 80020c0:	4b5a      	ldr	r3, [pc, #360]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 80020c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c4:	4a59      	ldr	r2, [pc, #356]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 80020c6:	f023 0301 	bic.w	r3, r3, #1
 80020ca:	6713      	str	r3, [r2, #112]	; 0x70
 80020cc:	4b57      	ldr	r3, [pc, #348]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 80020ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d0:	4a56      	ldr	r2, [pc, #344]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 80020d2:	f023 0304 	bic.w	r3, r3, #4
 80020d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d015      	beq.n	800210c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e0:	f7ff f832 	bl	8001148 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e8:	f7ff f82e 	bl	8001148 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e0d7      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fe:	4b4b      	ldr	r3, [pc, #300]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0ee      	beq.n	80020e8 <HAL_RCC_OscConfig+0x368>
 800210a:	e014      	b.n	8002136 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210c:	f7ff f81c 	bl	8001148 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002112:	e00a      	b.n	800212a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002114:	f7ff f818 	bl	8001148 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e0c1      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212a:	4b40      	ldr	r3, [pc, #256]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1ee      	bne.n	8002114 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002136:	7dfb      	ldrb	r3, [r7, #23]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d105      	bne.n	8002148 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213c:	4b3b      	ldr	r3, [pc, #236]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	4a3a      	ldr	r2, [pc, #232]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 8002142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002146:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80ad 	beq.w	80022ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002152:	4b36      	ldr	r3, [pc, #216]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b08      	cmp	r3, #8
 800215c:	d060      	beq.n	8002220 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d145      	bne.n	80021f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002166:	4b33      	ldr	r3, [pc, #204]	; (8002234 <HAL_RCC_OscConfig+0x4b4>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe ffec 	bl	8001148 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002174:	f7fe ffe8 	bl	8001148 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e093      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002186:	4b29      	ldr	r3, [pc, #164]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69da      	ldr	r2, [r3, #28]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	019b      	lsls	r3, r3, #6
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	085b      	lsrs	r3, r3, #1
 80021aa:	3b01      	subs	r3, #1
 80021ac:	041b      	lsls	r3, r3, #16
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	061b      	lsls	r3, r3, #24
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	071b      	lsls	r3, r3, #28
 80021be:	491b      	ldr	r1, [pc, #108]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_RCC_OscConfig+0x4b4>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ca:	f7fe ffbd 	bl	8001148 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d2:	f7fe ffb9 	bl	8001148 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e064      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x452>
 80021f0:	e05c      	b.n	80022ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <HAL_RCC_OscConfig+0x4b4>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7fe ffa6 	bl	8001148 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002200:	f7fe ffa2 	bl	8001148 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e04d      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_RCC_OscConfig+0x4ac>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x480>
 800221e:	e045      	b.n	80022ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d107      	bne.n	8002238 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e040      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
 800222c:	40023800 	.word	0x40023800
 8002230:	40007000 	.word	0x40007000
 8002234:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002238:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <HAL_RCC_OscConfig+0x538>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d030      	beq.n	80022a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002250:	429a      	cmp	r2, r3
 8002252:	d129      	bne.n	80022a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d122      	bne.n	80022a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002268:	4013      	ands	r3, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800226e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002270:	4293      	cmp	r3, r2
 8002272:	d119      	bne.n	80022a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	085b      	lsrs	r3, r3, #1
 8002280:	3b01      	subs	r3, #1
 8002282:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d10f      	bne.n	80022a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002294:	429a      	cmp	r2, r3
 8002296:	d107      	bne.n	80022a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800

080022bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e041      	b.n	8002352 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7fe fdc4 	bl	8000e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3304      	adds	r3, #4
 80022f8:	4619      	mov	r1, r3
 80022fa:	4610      	mov	r0, r2
 80022fc:	f000 f95e 	bl	80025bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b01      	cmp	r3, #1
 800236e:	d001      	beq.n	8002374 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e046      	b.n	8002402 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a23      	ldr	r2, [pc, #140]	; (8002410 <HAL_TIM_Base_Start+0xb4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d022      	beq.n	80023cc <HAL_TIM_Base_Start+0x70>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238e:	d01d      	beq.n	80023cc <HAL_TIM_Base_Start+0x70>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <HAL_TIM_Base_Start+0xb8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d018      	beq.n	80023cc <HAL_TIM_Base_Start+0x70>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <HAL_TIM_Base_Start+0xbc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d013      	beq.n	80023cc <HAL_TIM_Base_Start+0x70>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1c      	ldr	r2, [pc, #112]	; (800241c <HAL_TIM_Base_Start+0xc0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00e      	beq.n	80023cc <HAL_TIM_Base_Start+0x70>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <HAL_TIM_Base_Start+0xc4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d009      	beq.n	80023cc <HAL_TIM_Base_Start+0x70>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a19      	ldr	r2, [pc, #100]	; (8002424 <HAL_TIM_Base_Start+0xc8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d004      	beq.n	80023cc <HAL_TIM_Base_Start+0x70>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a18      	ldr	r2, [pc, #96]	; (8002428 <HAL_TIM_Base_Start+0xcc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d111      	bne.n	80023f0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b06      	cmp	r3, #6
 80023dc:	d010      	beq.n	8002400 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0201 	orr.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ee:	e007      	b.n	8002400 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40010000 	.word	0x40010000
 8002414:	40000400 	.word	0x40000400
 8002418:	40000800 	.word	0x40000800
 800241c:	40000c00 	.word	0x40000c00
 8002420:	40010400 	.word	0x40010400
 8002424:	40014000 	.word	0x40014000
 8002428:	40001800 	.word	0x40001800

0800242c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_TIM_ConfigClockSource+0x1c>
 8002444:	2302      	movs	r3, #2
 8002446:	e0b4      	b.n	80025b2 <HAL_TIM_ConfigClockSource+0x186>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800246e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002480:	d03e      	beq.n	8002500 <HAL_TIM_ConfigClockSource+0xd4>
 8002482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002486:	f200 8087 	bhi.w	8002598 <HAL_TIM_ConfigClockSource+0x16c>
 800248a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800248e:	f000 8086 	beq.w	800259e <HAL_TIM_ConfigClockSource+0x172>
 8002492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002496:	d87f      	bhi.n	8002598 <HAL_TIM_ConfigClockSource+0x16c>
 8002498:	2b70      	cmp	r3, #112	; 0x70
 800249a:	d01a      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0xa6>
 800249c:	2b70      	cmp	r3, #112	; 0x70
 800249e:	d87b      	bhi.n	8002598 <HAL_TIM_ConfigClockSource+0x16c>
 80024a0:	2b60      	cmp	r3, #96	; 0x60
 80024a2:	d050      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x11a>
 80024a4:	2b60      	cmp	r3, #96	; 0x60
 80024a6:	d877      	bhi.n	8002598 <HAL_TIM_ConfigClockSource+0x16c>
 80024a8:	2b50      	cmp	r3, #80	; 0x50
 80024aa:	d03c      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0xfa>
 80024ac:	2b50      	cmp	r3, #80	; 0x50
 80024ae:	d873      	bhi.n	8002598 <HAL_TIM_ConfigClockSource+0x16c>
 80024b0:	2b40      	cmp	r3, #64	; 0x40
 80024b2:	d058      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x13a>
 80024b4:	2b40      	cmp	r3, #64	; 0x40
 80024b6:	d86f      	bhi.n	8002598 <HAL_TIM_ConfigClockSource+0x16c>
 80024b8:	2b30      	cmp	r3, #48	; 0x30
 80024ba:	d064      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0x15a>
 80024bc:	2b30      	cmp	r3, #48	; 0x30
 80024be:	d86b      	bhi.n	8002598 <HAL_TIM_ConfigClockSource+0x16c>
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	d060      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0x15a>
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d867      	bhi.n	8002598 <HAL_TIM_ConfigClockSource+0x16c>
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d05c      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0x15a>
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d05a      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0x15a>
 80024d0:	e062      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6899      	ldr	r1, [r3, #8]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f000 f985 	bl	80027f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	609a      	str	r2, [r3, #8]
      break;
 80024fe:	e04f      	b.n	80025a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	6899      	ldr	r1, [r3, #8]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f000 f96e 	bl	80027f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002522:	609a      	str	r2, [r3, #8]
      break;
 8002524:	e03c      	b.n	80025a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6859      	ldr	r1, [r3, #4]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	461a      	mov	r2, r3
 8002534:	f000 f8e2 	bl	80026fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2150      	movs	r1, #80	; 0x50
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f93b 	bl	80027ba <TIM_ITRx_SetConfig>
      break;
 8002544:	e02c      	b.n	80025a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6859      	ldr	r1, [r3, #4]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	461a      	mov	r2, r3
 8002554:	f000 f901 	bl	800275a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2160      	movs	r1, #96	; 0x60
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f92b 	bl	80027ba <TIM_ITRx_SetConfig>
      break;
 8002564:	e01c      	b.n	80025a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6859      	ldr	r1, [r3, #4]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	461a      	mov	r2, r3
 8002574:	f000 f8c2 	bl	80026fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2140      	movs	r1, #64	; 0x40
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f91b 	bl	80027ba <TIM_ITRx_SetConfig>
      break;
 8002584:	e00c      	b.n	80025a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4619      	mov	r1, r3
 8002590:	4610      	mov	r0, r2
 8002592:	f000 f912 	bl	80027ba <TIM_ITRx_SetConfig>
      break;
 8002596:	e003      	b.n	80025a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
      break;
 800259c:	e000      	b.n	80025a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800259e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a40      	ldr	r2, [pc, #256]	; (80026d0 <TIM_Base_SetConfig+0x114>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d013      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025da:	d00f      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a3d      	ldr	r2, [pc, #244]	; (80026d4 <TIM_Base_SetConfig+0x118>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00b      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a3c      	ldr	r2, [pc, #240]	; (80026d8 <TIM_Base_SetConfig+0x11c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d007      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a3b      	ldr	r2, [pc, #236]	; (80026dc <TIM_Base_SetConfig+0x120>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d003      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a3a      	ldr	r2, [pc, #232]	; (80026e0 <TIM_Base_SetConfig+0x124>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d108      	bne.n	800260e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a2f      	ldr	r2, [pc, #188]	; (80026d0 <TIM_Base_SetConfig+0x114>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d02b      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261c:	d027      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a2c      	ldr	r2, [pc, #176]	; (80026d4 <TIM_Base_SetConfig+0x118>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d023      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a2b      	ldr	r2, [pc, #172]	; (80026d8 <TIM_Base_SetConfig+0x11c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d01f      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a2a      	ldr	r2, [pc, #168]	; (80026dc <TIM_Base_SetConfig+0x120>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01b      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a29      	ldr	r2, [pc, #164]	; (80026e0 <TIM_Base_SetConfig+0x124>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d017      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a28      	ldr	r2, [pc, #160]	; (80026e4 <TIM_Base_SetConfig+0x128>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a27      	ldr	r2, [pc, #156]	; (80026e8 <TIM_Base_SetConfig+0x12c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00f      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a26      	ldr	r2, [pc, #152]	; (80026ec <TIM_Base_SetConfig+0x130>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00b      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a25      	ldr	r2, [pc, #148]	; (80026f0 <TIM_Base_SetConfig+0x134>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d007      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a24      	ldr	r2, [pc, #144]	; (80026f4 <TIM_Base_SetConfig+0x138>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <TIM_Base_SetConfig+0x13c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d108      	bne.n	8002680 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <TIM_Base_SetConfig+0x114>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d003      	beq.n	80026b4 <TIM_Base_SetConfig+0xf8>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <TIM_Base_SetConfig+0x124>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d103      	bne.n	80026bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	615a      	str	r2, [r3, #20]
}
 80026c2:	bf00      	nop
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40010000 	.word	0x40010000
 80026d4:	40000400 	.word	0x40000400
 80026d8:	40000800 	.word	0x40000800
 80026dc:	40000c00 	.word	0x40000c00
 80026e0:	40010400 	.word	0x40010400
 80026e4:	40014000 	.word	0x40014000
 80026e8:	40014400 	.word	0x40014400
 80026ec:	40014800 	.word	0x40014800
 80026f0:	40001800 	.word	0x40001800
 80026f4:	40001c00 	.word	0x40001c00
 80026f8:	40002000 	.word	0x40002000

080026fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	f023 0201 	bic.w	r2, r3, #1
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f023 030a 	bic.w	r3, r3, #10
 8002738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	621a      	str	r2, [r3, #32]
}
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800275a:	b480      	push	{r7}
 800275c:	b087      	sub	sp, #28
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	f023 0210 	bic.w	r2, r3, #16
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002784:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	031b      	lsls	r3, r3, #12
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002796:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	621a      	str	r2, [r3, #32]
}
 80027ae:	bf00      	nop
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f043 0307 	orr.w	r3, r3, #7
 80027dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	609a      	str	r2, [r3, #8]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800280a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	021a      	lsls	r2, r3, #8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	431a      	orrs	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4313      	orrs	r3, r2
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	609a      	str	r2, [r3, #8]
}
 8002824:	bf00      	nop
 8002826:	371c      	adds	r7, #28
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002844:	2302      	movs	r3, #2
 8002846:	e05a      	b.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a21      	ldr	r2, [pc, #132]	; (800290c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d022      	beq.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002894:	d01d      	beq.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d018      	beq.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1b      	ldr	r2, [pc, #108]	; (8002914 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1a      	ldr	r2, [pc, #104]	; (8002918 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00e      	beq.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a18      	ldr	r2, [pc, #96]	; (800291c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d009      	beq.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a17      	ldr	r2, [pc, #92]	; (8002920 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d004      	beq.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a15      	ldr	r2, [pc, #84]	; (8002924 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d10c      	bne.n	80028ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40010000 	.word	0x40010000
 8002910:	40000400 	.word	0x40000400
 8002914:	40000800 	.word	0x40000800
 8002918:	40000c00 	.word	0x40000c00
 800291c:	40010400 	.word	0x40010400
 8002920:	40014000 	.word	0x40014000
 8002924:	40001800 	.word	0x40001800

08002928 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e03f      	b.n	80029ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe fab0 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2224      	movs	r2, #36	; 0x24
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800296a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f929 	bl	8002bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002980:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002990:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b08a      	sub	sp, #40	; 0x28
 80029c6:	af02      	add	r7, sp, #8
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	4613      	mov	r3, r2
 80029d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d17c      	bne.n	8002adc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_UART_Transmit+0x2c>
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e075      	b.n	8002ade <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_UART_Transmit+0x3e>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e06e      	b.n	8002ade <HAL_UART_Transmit+0x11c>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2221      	movs	r2, #33	; 0x21
 8002a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a16:	f7fe fb97 	bl	8001148 <HAL_GetTick>
 8002a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	88fa      	ldrh	r2, [r7, #6]
 8002a20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	88fa      	ldrh	r2, [r7, #6]
 8002a26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a30:	d108      	bne.n	8002a44 <HAL_UART_Transmit+0x82>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d104      	bne.n	8002a44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	e003      	b.n	8002a4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a54:	e02a      	b.n	8002aac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f840 	bl	8002ae6 <UART_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e036      	b.n	8002ade <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	3302      	adds	r3, #2
 8002a8a:	61bb      	str	r3, [r7, #24]
 8002a8c:	e007      	b.n	8002a9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1cf      	bne.n	8002a56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2200      	movs	r2, #0
 8002abe:	2140      	movs	r1, #64	; 0x40
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f810 	bl	8002ae6 <UART_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e006      	b.n	8002ade <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e000      	b.n	8002ade <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b090      	sub	sp, #64	; 0x40
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	4613      	mov	r3, r2
 8002af4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af6:	e050      	b.n	8002b9a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afe:	d04c      	beq.n	8002b9a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b06:	f7fe fb1f 	bl	8001148 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d241      	bcs.n	8002b9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	330c      	adds	r3, #12
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	e853 3f00 	ldrex	r3, [r3]
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	330c      	adds	r3, #12
 8002b34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b36:	637a      	str	r2, [r7, #52]	; 0x34
 8002b38:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b3e:	e841 2300 	strex	r3, r2, [r1]
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1e5      	bne.n	8002b16 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3314      	adds	r3, #20
 8002b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	e853 3f00 	ldrex	r3, [r3]
 8002b58:	613b      	str	r3, [r7, #16]
   return(result);
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3314      	adds	r3, #20
 8002b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b6a:	623a      	str	r2, [r7, #32]
 8002b6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	69f9      	ldr	r1, [r7, #28]
 8002b70:	6a3a      	ldr	r2, [r7, #32]
 8002b72:	e841 2300 	strex	r3, r2, [r1]
 8002b76:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1e5      	bne.n	8002b4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e00f      	b.n	8002bba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	bf0c      	ite	eq
 8002baa:	2301      	moveq	r3, #1
 8002bac:	2300      	movne	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d09f      	beq.n	8002af8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3740      	adds	r7, #64	; 0x40
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc8:	b0c0      	sub	sp, #256	; 0x100
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be0:	68d9      	ldr	r1, [r3, #12]
 8002be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	ea40 0301 	orr.w	r3, r0, r1
 8002bec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	431a      	orrs	r2, r3
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c1c:	f021 010c 	bic.w	r1, r1, #12
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c2a:	430b      	orrs	r3, r1
 8002c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3e:	6999      	ldr	r1, [r3, #24]
 8002c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	ea40 0301 	orr.w	r3, r0, r1
 8002c4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4b8f      	ldr	r3, [pc, #572]	; (8002e90 <UART_SetConfig+0x2cc>)
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d005      	beq.n	8002c64 <UART_SetConfig+0xa0>
 8002c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4b8d      	ldr	r3, [pc, #564]	; (8002e94 <UART_SetConfig+0x2d0>)
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d104      	bne.n	8002c6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c64:	f7fe fe48 	bl	80018f8 <HAL_RCC_GetPCLK2Freq>
 8002c68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c6c:	e003      	b.n	8002c76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c6e:	f7fe fe2f 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 8002c72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c80:	f040 810c 	bne.w	8002e9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c96:	4622      	mov	r2, r4
 8002c98:	462b      	mov	r3, r5
 8002c9a:	1891      	adds	r1, r2, r2
 8002c9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c9e:	415b      	adcs	r3, r3
 8002ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ca2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	eb12 0801 	adds.w	r8, r2, r1
 8002cac:	4629      	mov	r1, r5
 8002cae:	eb43 0901 	adc.w	r9, r3, r1
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cc6:	4690      	mov	r8, r2
 8002cc8:	4699      	mov	r9, r3
 8002cca:	4623      	mov	r3, r4
 8002ccc:	eb18 0303 	adds.w	r3, r8, r3
 8002cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cd4:	462b      	mov	r3, r5
 8002cd6:	eb49 0303 	adc.w	r3, r9, r3
 8002cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	18db      	adds	r3, r3, r3
 8002cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	eb42 0303 	adc.w	r3, r2, r3
 8002cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8002d00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d08:	f7fd fa7c 	bl	8000204 <__aeabi_uldivmod>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4b61      	ldr	r3, [pc, #388]	; (8002e98 <UART_SetConfig+0x2d4>)
 8002d12:	fba3 2302 	umull	r2, r3, r3, r2
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	011c      	lsls	r4, r3, #4
 8002d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	464b      	mov	r3, r9
 8002d30:	1891      	adds	r1, r2, r2
 8002d32:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d34:	415b      	adcs	r3, r3
 8002d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	eb12 0a01 	adds.w	sl, r2, r1
 8002d42:	4649      	mov	r1, r9
 8002d44:	eb43 0b01 	adc.w	fp, r3, r1
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d5c:	4692      	mov	sl, r2
 8002d5e:	469b      	mov	fp, r3
 8002d60:	4643      	mov	r3, r8
 8002d62:	eb1a 0303 	adds.w	r3, sl, r3
 8002d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d6a:	464b      	mov	r3, r9
 8002d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	18db      	adds	r3, r3, r3
 8002d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d8e:	4613      	mov	r3, r2
 8002d90:	eb42 0303 	adc.w	r3, r2, r3
 8002d94:	647b      	str	r3, [r7, #68]	; 0x44
 8002d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d9e:	f7fd fa31 	bl	8000204 <__aeabi_uldivmod>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4611      	mov	r1, r2
 8002da8:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <UART_SetConfig+0x2d4>)
 8002daa:	fba3 2301 	umull	r2, r3, r3, r1
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2264      	movs	r2, #100	; 0x64
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
 8002db6:	1acb      	subs	r3, r1, r3
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002dbe:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <UART_SetConfig+0x2d4>)
 8002dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dcc:	441c      	add	r4, r3
 8002dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ddc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002de0:	4642      	mov	r2, r8
 8002de2:	464b      	mov	r3, r9
 8002de4:	1891      	adds	r1, r2, r2
 8002de6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002de8:	415b      	adcs	r3, r3
 8002dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002df0:	4641      	mov	r1, r8
 8002df2:	1851      	adds	r1, r2, r1
 8002df4:	6339      	str	r1, [r7, #48]	; 0x30
 8002df6:	4649      	mov	r1, r9
 8002df8:	414b      	adcs	r3, r1
 8002dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e08:	4659      	mov	r1, fp
 8002e0a:	00cb      	lsls	r3, r1, #3
 8002e0c:	4651      	mov	r1, sl
 8002e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e12:	4651      	mov	r1, sl
 8002e14:	00ca      	lsls	r2, r1, #3
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4642      	mov	r2, r8
 8002e1e:	189b      	adds	r3, r3, r2
 8002e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e24:	464b      	mov	r3, r9
 8002e26:	460a      	mov	r2, r1
 8002e28:	eb42 0303 	adc.w	r3, r2, r3
 8002e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e44:	460b      	mov	r3, r1
 8002e46:	18db      	adds	r3, r3, r3
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	eb42 0303 	adc.w	r3, r2, r3
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e5a:	f7fd f9d3 	bl	8000204 <__aeabi_uldivmod>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <UART_SetConfig+0x2d4>)
 8002e64:	fba3 1302 	umull	r1, r3, r3, r2
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	2164      	movs	r1, #100	; 0x64
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	3332      	adds	r3, #50	; 0x32
 8002e76:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <UART_SetConfig+0x2d4>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	f003 0207 	and.w	r2, r3, #7
 8002e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4422      	add	r2, r4
 8002e8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e8c:	e106      	b.n	800309c <UART_SetConfig+0x4d8>
 8002e8e:	bf00      	nop
 8002e90:	40011000 	.word	0x40011000
 8002e94:	40011400 	.word	0x40011400
 8002e98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ea6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002eaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002eae:	4642      	mov	r2, r8
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	1891      	adds	r1, r2, r2
 8002eb4:	6239      	str	r1, [r7, #32]
 8002eb6:	415b      	adcs	r3, r3
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	1854      	adds	r4, r2, r1
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	eb43 0501 	adc.w	r5, r3, r1
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	00eb      	lsls	r3, r5, #3
 8002ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ed6:	00e2      	lsls	r2, r4, #3
 8002ed8:	4614      	mov	r4, r2
 8002eda:	461d      	mov	r5, r3
 8002edc:	4643      	mov	r3, r8
 8002ede:	18e3      	adds	r3, r4, r3
 8002ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ee4:	464b      	mov	r3, r9
 8002ee6:	eb45 0303 	adc.w	r3, r5, r3
 8002eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	008b      	lsls	r3, r1, #2
 8002f0e:	4621      	mov	r1, r4
 8002f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f14:	4621      	mov	r1, r4
 8002f16:	008a      	lsls	r2, r1, #2
 8002f18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f1c:	f7fd f972 	bl	8000204 <__aeabi_uldivmod>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4b60      	ldr	r3, [pc, #384]	; (80030a8 <UART_SetConfig+0x4e4>)
 8002f26:	fba3 2302 	umull	r2, r3, r3, r2
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	011c      	lsls	r4, r3, #4
 8002f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f40:	4642      	mov	r2, r8
 8002f42:	464b      	mov	r3, r9
 8002f44:	1891      	adds	r1, r2, r2
 8002f46:	61b9      	str	r1, [r7, #24]
 8002f48:	415b      	adcs	r3, r3
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f50:	4641      	mov	r1, r8
 8002f52:	1851      	adds	r1, r2, r1
 8002f54:	6139      	str	r1, [r7, #16]
 8002f56:	4649      	mov	r1, r9
 8002f58:	414b      	adcs	r3, r1
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f68:	4659      	mov	r1, fp
 8002f6a:	00cb      	lsls	r3, r1, #3
 8002f6c:	4651      	mov	r1, sl
 8002f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f72:	4651      	mov	r1, sl
 8002f74:	00ca      	lsls	r2, r1, #3
 8002f76:	4610      	mov	r0, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4642      	mov	r2, r8
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f84:	464b      	mov	r3, r9
 8002f86:	460a      	mov	r2, r1
 8002f88:	eb42 0303 	adc.w	r3, r2, r3
 8002f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002fa8:	4649      	mov	r1, r9
 8002faa:	008b      	lsls	r3, r1, #2
 8002fac:	4641      	mov	r1, r8
 8002fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fb2:	4641      	mov	r1, r8
 8002fb4:	008a      	lsls	r2, r1, #2
 8002fb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002fba:	f7fd f923 	bl	8000204 <__aeabi_uldivmod>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <UART_SetConfig+0x4e4>)
 8002fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	2264      	movs	r2, #100	; 0x64
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	1acb      	subs	r3, r1, r3
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	3332      	adds	r3, #50	; 0x32
 8002fd8:	4a33      	ldr	r2, [pc, #204]	; (80030a8 <UART_SetConfig+0x4e4>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe4:	441c      	add	r4, r3
 8002fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fea:	2200      	movs	r2, #0
 8002fec:	673b      	str	r3, [r7, #112]	; 0x70
 8002fee:	677a      	str	r2, [r7, #116]	; 0x74
 8002ff0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ff4:	4642      	mov	r2, r8
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	1891      	adds	r1, r2, r2
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	415b      	adcs	r3, r3
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003004:	4641      	mov	r1, r8
 8003006:	1851      	adds	r1, r2, r1
 8003008:	6039      	str	r1, [r7, #0]
 800300a:	4649      	mov	r1, r9
 800300c:	414b      	adcs	r3, r1
 800300e:	607b      	str	r3, [r7, #4]
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800301c:	4659      	mov	r1, fp
 800301e:	00cb      	lsls	r3, r1, #3
 8003020:	4651      	mov	r1, sl
 8003022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003026:	4651      	mov	r1, sl
 8003028:	00ca      	lsls	r2, r1, #3
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	4603      	mov	r3, r0
 8003030:	4642      	mov	r2, r8
 8003032:	189b      	adds	r3, r3, r2
 8003034:	66bb      	str	r3, [r7, #104]	; 0x68
 8003036:	464b      	mov	r3, r9
 8003038:	460a      	mov	r2, r1
 800303a:	eb42 0303 	adc.w	r3, r2, r3
 800303e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	663b      	str	r3, [r7, #96]	; 0x60
 800304a:	667a      	str	r2, [r7, #100]	; 0x64
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003058:	4649      	mov	r1, r9
 800305a:	008b      	lsls	r3, r1, #2
 800305c:	4641      	mov	r1, r8
 800305e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003062:	4641      	mov	r1, r8
 8003064:	008a      	lsls	r2, r1, #2
 8003066:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800306a:	f7fd f8cb 	bl	8000204 <__aeabi_uldivmod>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <UART_SetConfig+0x4e4>)
 8003074:	fba3 1302 	umull	r1, r3, r3, r2
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	2164      	movs	r1, #100	; 0x64
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	3332      	adds	r3, #50	; 0x32
 8003086:	4a08      	ldr	r2, [pc, #32]	; (80030a8 <UART_SetConfig+0x4e4>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	f003 020f 	and.w	r2, r3, #15
 8003092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4422      	add	r2, r4
 800309a:	609a      	str	r2, [r3, #8]
}
 800309c:	bf00      	nop
 800309e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030a2:	46bd      	mov	sp, r7
 80030a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030a8:	51eb851f 	.word	0x51eb851f

080030ac <memset>:
 80030ac:	4402      	add	r2, r0
 80030ae:	4603      	mov	r3, r0
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d100      	bne.n	80030b6 <memset+0xa>
 80030b4:	4770      	bx	lr
 80030b6:	f803 1b01 	strb.w	r1, [r3], #1
 80030ba:	e7f9      	b.n	80030b0 <memset+0x4>

080030bc <__libc_init_array>:
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	4d0d      	ldr	r5, [pc, #52]	; (80030f4 <__libc_init_array+0x38>)
 80030c0:	4c0d      	ldr	r4, [pc, #52]	; (80030f8 <__libc_init_array+0x3c>)
 80030c2:	1b64      	subs	r4, r4, r5
 80030c4:	10a4      	asrs	r4, r4, #2
 80030c6:	2600      	movs	r6, #0
 80030c8:	42a6      	cmp	r6, r4
 80030ca:	d109      	bne.n	80030e0 <__libc_init_array+0x24>
 80030cc:	4d0b      	ldr	r5, [pc, #44]	; (80030fc <__libc_init_array+0x40>)
 80030ce:	4c0c      	ldr	r4, [pc, #48]	; (8003100 <__libc_init_array+0x44>)
 80030d0:	f000 f818 	bl	8003104 <_init>
 80030d4:	1b64      	subs	r4, r4, r5
 80030d6:	10a4      	asrs	r4, r4, #2
 80030d8:	2600      	movs	r6, #0
 80030da:	42a6      	cmp	r6, r4
 80030dc:	d105      	bne.n	80030ea <__libc_init_array+0x2e>
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e4:	4798      	blx	r3
 80030e6:	3601      	adds	r6, #1
 80030e8:	e7ee      	b.n	80030c8 <__libc_init_array+0xc>
 80030ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ee:	4798      	blx	r3
 80030f0:	3601      	adds	r6, #1
 80030f2:	e7f2      	b.n	80030da <__libc_init_array+0x1e>
 80030f4:	08003144 	.word	0x08003144
 80030f8:	08003144 	.word	0x08003144
 80030fc:	08003144 	.word	0x08003144
 8003100:	08003148 	.word	0x08003148

08003104 <_init>:
 8003104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003106:	bf00      	nop
 8003108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310a:	bc08      	pop	{r3}
 800310c:	469e      	mov	lr, r3
 800310e:	4770      	bx	lr

08003110 <_fini>:
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003112:	bf00      	nop
 8003114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003116:	bc08      	pop	{r3}
 8003118:	469e      	mov	lr, r3
 800311a:	4770      	bx	lr
