
versionConTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fb0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003174  08003174  00013174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003194  08003194  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003194  08003194  00013194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800319c  0800319c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800319c  0800319c  0001319c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031a0  080031a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080031a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000010  080031b4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080031b4  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc77  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cd4  00000000  00000000  0002ccfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  0002e9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b7  00000000  00000000  0002f630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021cbf  00000000  00000000  0002ffe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eecf  00000000  00000000  00051ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0534  00000000  00000000  00060b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000340c  00000000  00000000  001310ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001344b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800315c 	.word	0x0800315c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	0800315c 	.word	0x0800315c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MIDILoop>:

uint8_t volumeMax = 0x7F;
uint8_t volumeMin = 0X00;


void MIDILoop(){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
	for (uint8_t control=0; control<16; control++){ //Recorro 16 valores de control del mux: 0000 0000 hasta 0000 1111
 8000506:	2300      	movs	r3, #0
 8000508:	71fb      	strb	r3, [r7, #7]
 800050a:	e072      	b.n	80005f2 <MIDILoop+0xf2>
		uint8_t pulsado = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	71bb      	strb	r3, [r7, #6]
		pulsado = IdentifyRow(control); //Por cada valor de control del Mux compruebo la entrada del Mux
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	4618      	mov	r0, r3
 8000514:	f000 f87c 	bl	8000610 <IdentifyRow>
 8000518:	4603      	mov	r3, r0
 800051a:	71bb      	strb	r3, [r7, #6]
		if (pulsado & 0x01){ //compruebo si en la fila 1 (entrada) se ha pulsado (flag subida)
 800051c:	79bb      	ldrb	r3, [r7, #6]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	2b00      	cmp	r3, #0
 8000524:	d00c      	beq.n	8000540 <MIDILoop+0x40>
			if (pulsado_anterior1[control] != 1){
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	4a36      	ldr	r2, [pc, #216]	; (8000604 <MIDILoop+0x104>)
 800052a:	5cd3      	ldrb	r3, [r2, r3]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d007      	beq.n	8000540 <MIDILoop+0x40>
				Send_MIDINoteOn_1(control);
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fa1c 	bl	8000970 <Send_MIDINoteOn_1>
				pulsado_anterior1[control] = 1;
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	4a32      	ldr	r2, [pc, #200]	; (8000604 <MIDILoop+0x104>)
 800053c:	2101      	movs	r1, #1
 800053e:	54d1      	strb	r1, [r2, r3]
			}
		}
		if (!(pulsado & 0x01)){ //compruebo si en la fila 1 (entrada) se ha dejado de pulsar (flag bajada)
 8000540:	79bb      	ldrb	r3, [r7, #6]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	2b00      	cmp	r3, #0
 8000548:	d10c      	bne.n	8000564 <MIDILoop+0x64>
			if (pulsado_anterior1[control] == 1){
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4a2d      	ldr	r2, [pc, #180]	; (8000604 <MIDILoop+0x104>)
 800054e:	5cd3      	ldrb	r3, [r2, r3]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d107      	bne.n	8000564 <MIDILoop+0x64>
				Send_MIDINoteOff_1(control);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fa2e 	bl	80009b8 <Send_MIDINoteOff_1>
				pulsado_anterior1[control] = 0;
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	4a29      	ldr	r2, [pc, #164]	; (8000604 <MIDILoop+0x104>)
 8000560:	2100      	movs	r1, #0
 8000562:	54d1      	strb	r1, [r2, r3]
			}
		}
		if (pulsado & 0x02){ //compruebo si en la fila 1 (entrada) se ha pulsado
 8000564:	79bb      	ldrb	r3, [r7, #6]
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	2b00      	cmp	r3, #0
 800056c:	d00c      	beq.n	8000588 <MIDILoop+0x88>
			if (pulsado_anterior2[control] != 1){
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	4a25      	ldr	r2, [pc, #148]	; (8000608 <MIDILoop+0x108>)
 8000572:	5cd3      	ldrb	r3, [r2, r3]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d007      	beq.n	8000588 <MIDILoop+0x88>
				Send_MIDINoteOn_2(control);
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fa3e 	bl	80009fc <Send_MIDINoteOn_2>
				pulsado_anterior2[control] = 1;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4a21      	ldr	r2, [pc, #132]	; (8000608 <MIDILoop+0x108>)
 8000584:	2101      	movs	r1, #1
 8000586:	54d1      	strb	r1, [r2, r3]
			}
		}
		if (!(pulsado & 0x02)){ //compruebo si en la fila 2 (entrada) se ha dejado de pulsar
 8000588:	79bb      	ldrb	r3, [r7, #6]
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	2b00      	cmp	r3, #0
 8000590:	d10c      	bne.n	80005ac <MIDILoop+0xac>
			if (pulsado_anterior2[control] == 1){
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <MIDILoop+0x108>)
 8000596:	5cd3      	ldrb	r3, [r2, r3]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d107      	bne.n	80005ac <MIDILoop+0xac>
				Send_MIDINoteOff_2(control);
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fa50 	bl	8000a44 <Send_MIDINoteOff_2>
				pulsado_anterior2[control] = 0;
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	4a18      	ldr	r2, [pc, #96]	; (8000608 <MIDILoop+0x108>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	54d1      	strb	r1, [r2, r3]
			}
		}
		if (pulsado & 0x04){
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00c      	beq.n	80005d0 <MIDILoop+0xd0>
			if (pulsado_anterior3[control] != 1){
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	4a14      	ldr	r2, [pc, #80]	; (800060c <MIDILoop+0x10c>)
 80005ba:	5cd3      	ldrb	r3, [r2, r3]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d007      	beq.n	80005d0 <MIDILoop+0xd0>
				ControlsUser(control);
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f8b4 	bl	8000730 <ControlsUser>
				pulsado_anterior3[control] = 1;
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	4a10      	ldr	r2, [pc, #64]	; (800060c <MIDILoop+0x10c>)
 80005cc:	2101      	movs	r1, #1
 80005ce:	54d1      	strb	r1, [r2, r3]
			}
		}
		if (!(pulsado & 0x04)){ //flanco de bajada no hago nada
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d108      	bne.n	80005ec <MIDILoop+0xec>
			if (pulsado_anterior3[control] == 1){
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	4a0b      	ldr	r2, [pc, #44]	; (800060c <MIDILoop+0x10c>)
 80005de:	5cd3      	ldrb	r3, [r2, r3]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d103      	bne.n	80005ec <MIDILoop+0xec>
				pulsado_anterior3[control] = 0;
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	4a09      	ldr	r2, [pc, #36]	; (800060c <MIDILoop+0x10c>)
 80005e8:	2100      	movs	r1, #0
 80005ea:	54d1      	strb	r1, [r2, r3]
	for (uint8_t control=0; control<16; control++){ //Recorro 16 valores de control del mux: 0000 0000 hasta 0000 1111
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	3301      	adds	r3, #1
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d989      	bls.n	800050c <MIDILoop+0xc>
			}
		}
	}
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	2000002c 	.word	0x2000002c
 8000608:	2000003c 	.word	0x2000003c
 800060c:	2000004c 	.word	0x2000004c

08000610 <IdentifyRow>:


uint8_t IdentifyRow(uint8_t control){ //Comprobar la entrada del MUX (2 entradas)
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	WriteControl(control);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f83b 	bl	8000698 <WriteControl>
//	HAL_Delay(1); // Hal_Delay toma uint32_t, tiempo de propagacion del MUX necesario
	delay_us_tim(5);
 8000622:	2005      	movs	r0, #5
 8000624:	f000 fc08 	bl	8000e38 <delay_us_tim>
	uint8_t pulsado = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
	uint8_t pulsado1 = false;
 800062c:	2300      	movs	r3, #0
 800062e:	73bb      	strb	r3, [r7, #14]
	uint8_t pulsado2 = false;
 8000630:	2300      	movs	r3, #0
 8000632:	737b      	strb	r3, [r7, #13]
	uint8_t userControls = false;
 8000634:	2300      	movs	r3, #0
 8000636:	733b      	strb	r3, [r7, #12]
	pulsado1 = HAL_GPIO_ReadPin(I1_GPIO_Port, I1_Pin);  //Comprobar si se ha pulsado una nota en la fila 1
 8000638:	2101      	movs	r1, #1
 800063a:	4816      	ldr	r0, [pc, #88]	; (8000694 <IdentifyRow+0x84>)
 800063c:	f001 f836 	bl	80016ac <HAL_GPIO_ReadPin>
 8000640:	4603      	mov	r3, r0
 8000642:	73bb      	strb	r3, [r7, #14]
	pulsado2 = HAL_GPIO_ReadPin(I2_GPIO_Port, I2_Pin); //Comprobar si se ha pulsado una nota en la fila 2
 8000644:	2102      	movs	r1, #2
 8000646:	4813      	ldr	r0, [pc, #76]	; (8000694 <IdentifyRow+0x84>)
 8000648:	f001 f830 	bl	80016ac <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	737b      	strb	r3, [r7, #13]
	userControls = HAL_GPIO_ReadPin(I3_GPIO_Port, I3_Pin);
 8000650:	2110      	movs	r1, #16
 8000652:	4810      	ldr	r0, [pc, #64]	; (8000694 <IdentifyRow+0x84>)
 8000654:	f001 f82a 	bl	80016ac <HAL_GPIO_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	733b      	strb	r3, [r7, #12]
	pulsado = ((pulsado1 & 0x01) | (pulsado2<<1 & 0x02) | (userControls<<2 & 0x04));
 800065c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	b25a      	sxtb	r2, r3
 8000666:	7b7b      	ldrb	r3, [r7, #13]
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	b25b      	sxtb	r3, r3
 800066c:	f003 0302 	and.w	r3, r3, #2
 8000670:	b25b      	sxtb	r3, r3
 8000672:	4313      	orrs	r3, r2
 8000674:	b25a      	sxtb	r2, r3
 8000676:	7b3b      	ldrb	r3, [r7, #12]
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	b25b      	sxtb	r3, r3
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	b25b      	sxtb	r3, r3
 8000682:	4313      	orrs	r3, r2
 8000684:	b25b      	sxtb	r3, r3
 8000686:	73fb      	strb	r3, [r7, #15]
	return pulsado;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020000 	.word	0x40020000

08000698 <WriteControl>:

void WriteControl(uint8_t control){ //Escribir en el GPIO correspondiente los valores de control del MUX
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	uint8_t S0 = control & 0x01; //0000 0001
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	73fb      	strb	r3, [r7, #15]
	uint8_t S1 = control & 0x02; //0000 0010
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	f003 0302 	and.w	r3, r3, #2
 80006b0:	73bb      	strb	r3, [r7, #14]
	uint8_t S2 = control & 0x04; //0000 0100
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	737b      	strb	r3, [r7, #13]
	uint8_t S3 = control & 0x08; //0000 1000
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, S0_Pin, S0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	bf14      	ite	ne
 80006c8:	2301      	movne	r3, #1
 80006ca:	2300      	moveq	r3, #0
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	461a      	mov	r2, r3
 80006d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d4:	4814      	ldr	r0, [pc, #80]	; (8000728 <WriteControl+0x90>)
 80006d6:	f001 f801 	bl	80016dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, S1_Pin, S1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006da:	7bbb      	ldrb	r3, [r7, #14]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	bf14      	ite	ne
 80006e0:	2301      	movne	r3, #1
 80006e2:	2300      	moveq	r3, #0
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	461a      	mov	r2, r3
 80006e8:	2120      	movs	r1, #32
 80006ea:	4810      	ldr	r0, [pc, #64]	; (800072c <WriteControl+0x94>)
 80006ec:	f000 fff6 	bl	80016dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, S2_Pin, S2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006f0:	7b7b      	ldrb	r3, [r7, #13]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	bf14      	ite	ne
 80006f6:	2301      	movne	r3, #1
 80006f8:	2300      	moveq	r3, #0
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000702:	480a      	ldr	r0, [pc, #40]	; (800072c <WriteControl+0x94>)
 8000704:	f000 ffea 	bl	80016dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, S3_Pin, S3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000708:	7b3b      	ldrb	r3, [r7, #12]
 800070a:	2b00      	cmp	r3, #0
 800070c:	bf14      	ite	ne
 800070e:	2301      	movne	r3, #1
 8000710:	2300      	moveq	r3, #0
 8000712:	b2db      	uxtb	r3, r3
 8000714:	461a      	mov	r2, r3
 8000716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071a:	4803      	ldr	r0, [pc, #12]	; (8000728 <WriteControl+0x90>)
 800071c:	f000 ffde 	bl	80016dc <HAL_GPIO_WritePin>
}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40020000 	.word	0x40020000
 800072c:	40020400 	.word	0x40020400

08000730 <ControlsUser>:


void ControlsUser(uint8_t control){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
	switch(control)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	3b01      	subs	r3, #1
 800073e:	2b04      	cmp	r3, #4
 8000740:	d81b      	bhi.n	800077a <ControlsUser+0x4a>
 8000742:	a201      	add	r2, pc, #4	; (adr r2, 8000748 <ControlsUser+0x18>)
 8000744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000748:	08000763 	.word	0x08000763
 800074c:	08000769 	.word	0x08000769
 8000750:	0800076f 	.word	0x0800076f
 8000754:	08000775 	.word	0x08000775
 8000758:	0800075d 	.word	0x0800075d
	{
	case 5:
		Down();
 800075c:	f000 f84c 	bl	80007f8 <Down>
		break;
 8000760:	e00b      	b.n	800077a <ControlsUser+0x4a>
	case 1:
		Up();
 8000762:	f000 f80f 	bl	8000784 <Up>
		break;
 8000766:	e008      	b.n	800077a <ControlsUser+0x4a>
	case 2:
		VolumeControl();
 8000768:	f000 f8c2 	bl	80008f0 <VolumeControl>
		break;
 800076c:	e005      	b.n	800077a <ControlsUser+0x4a>
	case 3:
		Octavacion();
 800076e:	f000 f8df 	bl	8000930 <Octavacion>
		break;
 8000772:	e002      	b.n	800077a <ControlsUser+0x4a>
	case 4:
		Vibrato();
 8000774:	f000 f87a 	bl	800086c <Vibrato>
	}
}
 8000778:	e7ff      	b.n	800077a <ControlsUser+0x4a>
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop

08000784 <Up>:


void Up() {
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
	if(octavacion_activo){
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <Up+0x5c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00b      	beq.n	80007a8 <Up+0x24>
		note1 += 0x0C;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <Up+0x60>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	330c      	adds	r3, #12
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <Up+0x60>)
 800079a:	701a      	strb	r2, [r3, #0]
		note2 += 0x0C;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <Up+0x64>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	330c      	adds	r3, #12
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <Up+0x64>)
 80007a6:	701a      	strb	r2, [r3, #0]
	}
	if(volumen_activo){
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <Up+0x68>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d012      	beq.n	80007d6 <Up+0x52>
		if (volume < (volumeMax - 0x0A)) { //Para que no supere el volumen maximo permitido
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <Up+0x6c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <Up+0x70>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	3b0a      	subs	r3, #10
 80007bc:	429a      	cmp	r2, r3
 80007be:	da06      	bge.n	80007ce <Up+0x4a>
			volume += 0x0A; //Sumo el volume de 10 en 10
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <Up+0x6c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	330a      	adds	r3, #10
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <Up+0x6c>)
 80007ca:	701a      	strb	r2, [r3, #0]
		}else{
			volume = volumeMax;
		}
	}
}
 80007cc:	e003      	b.n	80007d6 <Up+0x52>
			volume = volumeMax;
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <Up+0x70>)
 80007d0:	781a      	ldrb	r2, [r3, #0]
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <Up+0x6c>)
 80007d4:	701a      	strb	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	2000005d 	.word	0x2000005d
 80007e4:	20000001 	.word	0x20000001
 80007e8:	20000002 	.word	0x20000002
 80007ec:	2000005e 	.word	0x2000005e
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000003 	.word	0x20000003

080007f8 <Down>:

void Down() {
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	if(octavacion_activo){
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <Down+0x5c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00b      	beq.n	800081c <Down+0x24>
		note1 -= 0x0C;
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <Down+0x60>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	3b0c      	subs	r3, #12
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <Down+0x60>)
 800080e:	701a      	strb	r2, [r3, #0]
		note2 -= 0x0C;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <Down+0x64>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	3b0c      	subs	r3, #12
 8000816:	b2da      	uxtb	r2, r3
 8000818:	4b10      	ldr	r3, [pc, #64]	; (800085c <Down+0x64>)
 800081a:	701a      	strb	r2, [r3, #0]
	}
	if(volumen_activo){
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <Down+0x68>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d012      	beq.n	800084a <Down+0x52>
		if (volume > (volumeMin + 0x0A)) { //Para que no supere el volumen minimo permitido
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <Down+0x6c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <Down+0x70>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	330a      	adds	r3, #10
 8000830:	429a      	cmp	r2, r3
 8000832:	dd06      	ble.n	8000842 <Down+0x4a>
			volume -= 0x0A; //Resto el volume de 10 en 10
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <Down+0x6c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	3b0a      	subs	r3, #10
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <Down+0x6c>)
 800083e:	701a      	strb	r2, [r3, #0]
		}else{
			volume = volumeMin;
		}
	}
}
 8000840:	e003      	b.n	800084a <Down+0x52>
			volume = volumeMin;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <Down+0x70>)
 8000844:	781a      	ldrb	r2, [r3, #0]
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <Down+0x6c>)
 8000848:	701a      	strb	r2, [r3, #0]
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	2000005d 	.word	0x2000005d
 8000858:	20000001 	.word	0x20000001
 800085c:	20000002 	.word	0x20000002
 8000860:	2000005e 	.word	0x2000005e
 8000864:	20000000 	.word	0x20000000
 8000868:	2000005f 	.word	0x2000005f

0800086c <Vibrato>:

void Vibrato(){ //TODO modificar vibrato mas o menos
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
	uint8_t vibratoOn[3] = {0xB0, 0x01, 0x7F}; //MIDI Control Change Modulation wheel (vibrato) al maximo
 8000872:	4a1a      	ldr	r2, [pc, #104]	; (80008dc <Vibrato+0x70>)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	6812      	ldr	r2, [r2, #0]
 8000878:	4611      	mov	r1, r2
 800087a:	8019      	strh	r1, [r3, #0]
 800087c:	3302      	adds	r3, #2
 800087e:	0c12      	lsrs	r2, r2, #16
 8000880:	701a      	strb	r2, [r3, #0]
	uint8_t vibratoOff[3] = {0xB0, 0x01, 0x00};
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <Vibrato+0x74>)
 8000884:	463b      	mov	r3, r7
 8000886:	6812      	ldr	r2, [r2, #0]
 8000888:	4611      	mov	r1, r2
 800088a:	8019      	strh	r1, [r3, #0]
 800088c:	3302      	adds	r3, #2
 800088e:	0c12      	lsrs	r2, r2, #16
 8000890:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);
 8000892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000896:	4813      	ldr	r0, [pc, #76]	; (80008e4 <Vibrato+0x78>)
 8000898:	f000 ff39 	bl	800170e <HAL_GPIO_TogglePin>

	vibrato_activo = !vibrato_activo; //Conmutamos cada vez que pulsamos para activar o desactivar vibrato
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <Vibrato+0x7c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	bf0c      	ite	eq
 80008a4:	2301      	moveq	r3, #1
 80008a6:	2300      	movne	r3, #0
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <Vibrato+0x7c>)
 80008ae:	701a      	strb	r2, [r3, #0]

	if (vibrato_activo) {
 80008b0:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <Vibrato+0x7c>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d006      	beq.n	80008c6 <Vibrato+0x5a>
		HAL_UART_Transmit(&huart2, (uint8_t*)&vibratoOn, 3, 100);
 80008b8:	1d39      	adds	r1, r7, #4
 80008ba:	2364      	movs	r3, #100	; 0x64
 80008bc:	2203      	movs	r2, #3
 80008be:	480b      	ldr	r0, [pc, #44]	; (80008ec <Vibrato+0x80>)
 80008c0:	f002 f8ab 	bl	8002a1a <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&huart2, (uint8_t*)&vibratoOff, 3, 100);
	}
}
 80008c4:	e005      	b.n	80008d2 <Vibrato+0x66>
		HAL_UART_Transmit(&huart2, (uint8_t*)&vibratoOff, 3, 100);
 80008c6:	4639      	mov	r1, r7
 80008c8:	2364      	movs	r3, #100	; 0x64
 80008ca:	2203      	movs	r2, #3
 80008cc:	4807      	ldr	r0, [pc, #28]	; (80008ec <Vibrato+0x80>)
 80008ce:	f002 f8a4 	bl	8002a1a <HAL_UART_Transmit>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	08003174 	.word	0x08003174
 80008e0:	08003178 	.word	0x08003178
 80008e4:	40020400 	.word	0x40020400
 80008e8:	2000005c 	.word	0x2000005c
 80008ec:	200000a8 	.word	0x200000a8

080008f0 <VolumeControl>:

uint8_t VolumeControl(){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	if(!octavacion_activo){ //mientras este octavacion activo, no se puede activar volumen
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <VolumeControl+0x34>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d10e      	bne.n	800091a <VolumeControl+0x2a>
		HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin);
 80008fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <VolumeControl+0x38>)
 8000902:	f000 ff04 	bl	800170e <HAL_GPIO_TogglePin>
		volumen_activo = !volumen_activo;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <VolumeControl+0x3c>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	bf0c      	ite	eq
 800090e:	2301      	moveq	r3, #1
 8000910:	2300      	movne	r3, #0
 8000912:	b2db      	uxtb	r3, r3
 8000914:	461a      	mov	r2, r3
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <VolumeControl+0x3c>)
 8000918:	701a      	strb	r2, [r3, #0]
	}
	return volumen_activo;
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <VolumeControl+0x3c>)
 800091c:	781b      	ldrb	r3, [r3, #0]
}
 800091e:	4618      	mov	r0, r3
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2000005d 	.word	0x2000005d
 8000928:	40020400 	.word	0x40020400
 800092c:	2000005e 	.word	0x2000005e

08000930 <Octavacion>:
uint8_t Octavacion(){
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	if(!volumen_activo){ //mientras este volumen activo, no se puede activar octavacion
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <Octavacion+0x34>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d10e      	bne.n	800095a <Octavacion+0x2a>
		HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 800093c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <Octavacion+0x38>)
 8000942:	f000 fee4 	bl	800170e <HAL_GPIO_TogglePin>
		octavacion_activo = !octavacion_activo;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <Octavacion+0x3c>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	bf0c      	ite	eq
 800094e:	2301      	moveq	r3, #1
 8000950:	2300      	movne	r3, #0
 8000952:	b2db      	uxtb	r3, r3
 8000954:	461a      	mov	r2, r3
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <Octavacion+0x3c>)
 8000958:	701a      	strb	r2, [r3, #0]
	}
	return octavacion_activo;
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <Octavacion+0x3c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000005e 	.word	0x2000005e
 8000968:	40020400 	.word	0x40020400
 800096c:	2000005d 	.word	0x2000005d

08000970 <Send_MIDINoteOn_1>:


void Send_MIDINoteOn_1(uint8_t control){ //Enviar código MIDI NoteOn de la fila 1 correspondiente a cada nota en funcion del codigo de control
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
//	uint8_t MIDI_Fs3[3] = {0x90, 0x36, volume};
//	uint8_t MIDI_G3[3] = {0x90, 0x37, volume};
//	uint8_t MIDI_Gs3[3] = {0x90, 0x38, volume};
//	uint8_t MIDI_A3[3] = {0x90, 0x39, volume};

	if (control <= 14){
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b0e      	cmp	r3, #14
 800097e:	d811      	bhi.n	80009a4 <Send_MIDINoteOn_1+0x34>
		uint8_t MIDI[3] = {0x90, note1 - control, volume};
 8000980:	2390      	movs	r3, #144	; 0x90
 8000982:	733b      	strb	r3, [r7, #12]
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <Send_MIDINoteOn_1+0x3c>)
 8000986:	781a      	ldrb	r2, [r3, #0]
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	b2db      	uxtb	r3, r3
 800098e:	737b      	strb	r3, [r7, #13]
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <Send_MIDINoteOn_1+0x40>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart2, MIDI, 3, 100);
 8000996:	f107 010c 	add.w	r1, r7, #12
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	2203      	movs	r2, #3
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <Send_MIDINoteOn_1+0x44>)
 80009a0:	f002 f83b 	bl	8002a1a <HAL_UART_Transmit>
	}
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000001 	.word	0x20000001
 80009b0:	20000000 	.word	0x20000000
 80009b4:	200000a8 	.word	0x200000a8

080009b8 <Send_MIDINoteOff_1>:


void Send_MIDINoteOff_1(uint8_t control){ //Enviar código MIDI NoteOff de la fila 1 correspondiente a cada nota en función del código de control
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
//	uint8_t MIDI_Fs3[3] = {0x90, 0x36, volume};
//	uint8_t MIDI_G3[3] = {0x90, 0x37, volume};
//	uint8_t MIDI_Gs3[3] = {0x90, 0x38, volume};
//	uint8_t MIDI_A3[3] = {0x90, 0x39, volume};

	if (control <= 14){
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b0e      	cmp	r3, #14
 80009c6:	d810      	bhi.n	80009ea <Send_MIDINoteOff_1+0x32>
		uint8_t MIDI[3] = {0x90, note1 - control, 0x00};
 80009c8:	2390      	movs	r3, #144	; 0x90
 80009ca:	733b      	strb	r3, [r7, #12]
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <Send_MIDINoteOff_1+0x3c>)
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	737b      	strb	r3, [r7, #13]
 80009d8:	2300      	movs	r3, #0
 80009da:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart2, MIDI, 3, 100);
 80009dc:	f107 010c 	add.w	r1, r7, #12
 80009e0:	2364      	movs	r3, #100	; 0x64
 80009e2:	2203      	movs	r2, #3
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <Send_MIDINoteOff_1+0x40>)
 80009e6:	f002 f818 	bl	8002a1a <HAL_UART_Transmit>
	}
}
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000001 	.word	0x20000001
 80009f8:	200000a8 	.word	0x200000a8

080009fc <Send_MIDINoteOn_2>:

void Send_MIDINoteOn_2(uint8_t control){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
//	uint8_t MIDI_A4[3] = {0x90, 0x45, 0x00};
//	uint8_t MIDI_As4[3] = {0x90, 0x46, 0x00};
//	uint8_t MIDI_B4[3] = {0x90, 0x47, 0x00};
//	uint8_t MIDI_C5[3] = {0x90, 0x48, 0x00};

	if (control <= 14){
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b0e      	cmp	r3, #14
 8000a0a:	d811      	bhi.n	8000a30 <Send_MIDINoteOn_2+0x34>
		uint8_t MIDI[3] = {0x90, note2 - control, volume};
 8000a0c:	2390      	movs	r3, #144	; 0x90
 8000a0e:	733b      	strb	r3, [r7, #12]
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <Send_MIDINoteOn_2+0x3c>)
 8000a12:	781a      	ldrb	r2, [r3, #0]
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	737b      	strb	r3, [r7, #13]
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <Send_MIDINoteOn_2+0x40>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart2, MIDI, 3, 100);
 8000a22:	f107 010c 	add.w	r1, r7, #12
 8000a26:	2364      	movs	r3, #100	; 0x64
 8000a28:	2203      	movs	r2, #3
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <Send_MIDINoteOn_2+0x44>)
 8000a2c:	f001 fff5 	bl	8002a1a <HAL_UART_Transmit>
	}
}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000002 	.word	0x20000002
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	200000a8 	.word	0x200000a8

08000a44 <Send_MIDINoteOff_2>:

void Send_MIDINoteOff_2(uint8_t control){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
//	uint8_t MIDI_A4[3] = {0x90, 0x45, 0x00};
//	uint8_t MIDI_As4[3] = {0x90, 0x46, 0x00};
//	uint8_t MIDI_B4[3] = {0x90, 0x47, 0x00};
//	uint8_t MIDI_C5[3] = {0x90, 0x48, 0x00};

	if (control <= 14){
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b0e      	cmp	r3, #14
 8000a52:	d810      	bhi.n	8000a76 <Send_MIDINoteOff_2+0x32>
		uint8_t MIDI[3] = {0x90, note2 - control, 0x00};
 8000a54:	2390      	movs	r3, #144	; 0x90
 8000a56:	733b      	strb	r3, [r7, #12]
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <Send_MIDINoteOff_2+0x3c>)
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	737b      	strb	r3, [r7, #13]
 8000a64:	2300      	movs	r3, #0
 8000a66:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart2, MIDI, 3, 100);
 8000a68:	f107 010c 	add.w	r1, r7, #12
 8000a6c:	2364      	movs	r3, #100	; 0x64
 8000a6e:	2203      	movs	r2, #3
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <Send_MIDINoteOff_2+0x40>)
 8000a72:	f001 ffd2 	bl	8002a1a <HAL_UART_Transmit>
	}
}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000002 	.word	0x20000002
 8000a84:	200000a8 	.word	0x200000a8

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fb22 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f810 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f920 	bl	8000cd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a98:	f000 f8ca 	bl	8000c30 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a9c:	f000 f8f2 	bl	8000c84 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000aa0:	f000 f876 	bl	8000b90 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <main+0x28>)
 8000aa6:	f001 fc85 	bl	80023b4 <HAL_TIM_Base_Start>
//	  WriteControl(9);
//	  sprintf(msg, "La lectura es %d \n\r",HAL_GPIO_ReadPin(GPIOA, I1_Pin));
//	  sprintf(msg, "La lectura es %d \n\r",HAL_GPIO_ReadPin(GPIOA, I2_Pin));
//	  printf(msg);

	  MIDILoop();
 8000aaa:	f7ff fd29 	bl	8000500 <MIDILoop>
 8000aae:	e7fc      	b.n	8000aaa <main+0x22>
 8000ab0:	20000060 	.word	0x20000060

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	; 0x50
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	2234      	movs	r2, #52	; 0x34
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 fb1e 	bl	8003104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <SystemClock_Config+0xd4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a29      	ldr	r2, [pc, #164]	; (8000b88 <SystemClock_Config+0xd4>)
 8000ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <SystemClock_Config+0xd4>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000af4:	2300      	movs	r3, #0
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <SystemClock_Config+0xd8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b00:	4a22      	ldr	r2, [pc, #136]	; (8000b8c <SystemClock_Config+0xd8>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <SystemClock_Config+0xd8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000b2c:	2354      	movs	r3, #84	; 0x54
 8000b2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 f949 	bl	8001dd8 <HAL_RCC_OscConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b4c:	f000 f98e 	bl	8000e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b50:	230f      	movs	r3, #15
 8000b52:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b54:	2302      	movs	r3, #2
 8000b56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b66:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fde8 	bl	8001744 <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b7a:	f000 f977 	bl	8000e6c <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3750      	adds	r7, #80	; 0x50
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40007000 	.word	0x40007000

08000b90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <MX_TIM1_Init+0x98>)
 8000bae:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <MX_TIM1_Init+0x9c>)
 8000bb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_TIM1_Init+0x98>)
 8000bb4:	2253      	movs	r2, #83	; 0x53
 8000bb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_TIM1_Init+0x98>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_TIM1_Init+0x98>)
 8000bc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000bc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_TIM1_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_TIM1_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_TIM1_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bd8:	4813      	ldr	r0, [pc, #76]	; (8000c28 <MX_TIM1_Init+0x98>)
 8000bda:	f001 fb9b 	bl	8002314 <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000be4:	f000 f942 	bl	8000e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <MX_TIM1_Init+0x98>)
 8000bf6:	f001 fc45 	bl	8002484 <HAL_TIM_ConfigClockSource>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c00:	f000 f934 	bl	8000e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_TIM1_Init+0x98>)
 8000c12:	f001 fe39 	bl	8002888 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c1c:	f000 f926 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000060 	.word	0x20000060
 8000c2c:	40010000 	.word	0x40010000

08000c30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <MX_USART2_UART_Init+0x50>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c68:	f001 fe8a 	bl	8002980 <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c72:	f000 f8fb 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200000a8 	.word	0x200000a8
 8000c80:	40004400 	.word	0x40004400

08000c84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <MX_USART3_UART_Init+0x50>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 31250;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000c90:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000c94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_USART3_UART_Init+0x4c>)
 8000cbc:	f001 fe60 	bl	8002980 <HAL_UART_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cc6:	f000 f8d1 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000ec 	.word	0x200000ec
 8000cd4:	40004800 	.word	0x40004800

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	4b4d      	ldr	r3, [pc, #308]	; (8000e28 <MX_GPIO_Init+0x150>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a4c      	ldr	r2, [pc, #304]	; (8000e28 <MX_GPIO_Init+0x150>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b4a      	ldr	r3, [pc, #296]	; (8000e28 <MX_GPIO_Init+0x150>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b46      	ldr	r3, [pc, #280]	; (8000e28 <MX_GPIO_Init+0x150>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a45      	ldr	r2, [pc, #276]	; (8000e28 <MX_GPIO_Init+0x150>)
 8000d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b43      	ldr	r3, [pc, #268]	; (8000e28 <MX_GPIO_Init+0x150>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	4b3f      	ldr	r3, [pc, #252]	; (8000e28 <MX_GPIO_Init+0x150>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a3e      	ldr	r2, [pc, #248]	; (8000e28 <MX_GPIO_Init+0x150>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b3c      	ldr	r3, [pc, #240]	; (8000e28 <MX_GPIO_Init+0x150>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b38      	ldr	r3, [pc, #224]	; (8000e28 <MX_GPIO_Init+0x150>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a37      	ldr	r2, [pc, #220]	; (8000e28 <MX_GPIO_Init+0x150>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <MX_GPIO_Init+0x150>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|IS3_Pin|IS2_Pin|S3_Pin
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000d64:	4831      	ldr	r0, [pc, #196]	; (8000e2c <MX_GPIO_Init+0x154>)
 8000d66:	f000 fcb9 	bl	80016dc <HAL_GPIO_WritePin>
                          |OUT_MODE_Pin|S0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S2_Pin|Led3_Pin|Led2_Pin|Led1_Pin
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f24e 4160 	movw	r1, #58464	; 0xe460
 8000d70:	482f      	ldr	r0, [pc, #188]	; (8000e30 <MX_GPIO_Init+0x158>)
 8000d72:	f000 fcb3 	bl	80016dc <HAL_GPIO_WritePin>
                          |S1_Pin|IS1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d7c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4829      	ldr	r0, [pc, #164]	; (8000e34 <MX_GPIO_Init+0x15c>)
 8000d8e:	f000 faf9 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pins : I1_Pin I2_Pin I3_Pin */
  GPIO_InitStruct.Pin = I1_Pin|I2_Pin|I3_Pin;
 8000d92:	2313      	movs	r3, #19
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4821      	ldr	r0, [pc, #132]	; (8000e2c <MX_GPIO_Init+0x154>)
 8000da6:	f000 faed 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000daa:	2320      	movs	r3, #32
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	481a      	ldr	r0, [pc, #104]	; (8000e2c <MX_GPIO_Init+0x154>)
 8000dc2:	f000 fadf 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pins : IS3_Pin IS2_Pin S3_Pin OUT_MODE_Pin
                           S0_Pin */
  GPIO_InitStruct.Pin = IS3_Pin|IS2_Pin|S3_Pin|OUT_MODE_Pin
 8000dc6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000dca:	617b      	str	r3, [r7, #20]
                          |S0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4813      	ldr	r0, [pc, #76]	; (8000e2c <MX_GPIO_Init+0x154>)
 8000de0:	f000 fad0 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin IS1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin|IS1_Pin;
 8000de4:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8000de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <MX_GPIO_Init+0x158>)
 8000dfe:	f000 fac1 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led3_Pin Led2_Pin Led1_Pin */
  GPIO_InitStruct.Pin = Led3_Pin|Led2_Pin|Led1_Pin;
 8000e02:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_GPIO_Init+0x158>)
 8000e1c:	f000 fab2 	bl	8001384 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	; 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020400 	.word	0x40020400
 8000e34:	40020800 	.word	0x40020800

08000e38 <delay_us_tim>:

/* USER CODE BEGIN 4 */



void delay_us_tim (uint32_t us){
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <delay_us_tim+0x30>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2200      	movs	r2, #0
 8000e46:	625a      	str	r2, [r3, #36]	; 0x24
	while((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000e48:	bf00      	nop
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <delay_us_tim+0x30>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	461a      	mov	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d8f7      	bhi.n	8000e4a <delay_us_tim+0x12>
}
 8000e5a:	bf00      	nop
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	20000060 	.word	0x20000060

08000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e70:	b672      	cpsid	i
}
 8000e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <Error_Handler+0x8>
	...

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eb6:	2007      	movs	r0, #7
 8000eb8:	f000 fa30 	bl	800131c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <HAL_TIM_Base_MspInit+0x3c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10d      	bne.n	8000ef6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_TIM_Base_MspInit+0x40>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <HAL_TIM_Base_MspInit+0x40>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <HAL_TIM_Base_MspInit+0x40>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40010000 	.word	0x40010000
 8000f08:	40023800 	.word	0x40023800

08000f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a32      	ldr	r2, [pc, #200]	; (8000ff4 <HAL_UART_MspInit+0xe8>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12c      	bne.n	8000f88 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
 8000f32:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <HAL_UART_MspInit+0xec>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a30      	ldr	r2, [pc, #192]	; (8000ff8 <HAL_UART_MspInit+0xec>)
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <HAL_UART_MspInit+0xec>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	61bb      	str	r3, [r7, #24]
 8000f48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <HAL_UART_MspInit+0xec>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a29      	ldr	r2, [pc, #164]	; (8000ff8 <HAL_UART_MspInit+0xec>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <HAL_UART_MspInit+0xec>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f66:	230c      	movs	r3, #12
 8000f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f72:	2303      	movs	r3, #3
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f76:	2307      	movs	r3, #7
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	481e      	ldr	r0, [pc, #120]	; (8000ffc <HAL_UART_MspInit+0xf0>)
 8000f82:	f000 f9ff 	bl	8001384 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f86:	e031      	b.n	8000fec <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a1c      	ldr	r2, [pc, #112]	; (8001000 <HAL_UART_MspInit+0xf4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d12c      	bne.n	8000fec <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_UART_MspInit+0xec>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <HAL_UART_MspInit+0xec>)
 8000f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_UART_MspInit+0xec>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_UART_MspInit+0xec>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <HAL_UART_MspInit+0xec>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_UART_MspInit+0xec>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4807      	ldr	r0, [pc, #28]	; (8001004 <HAL_UART_MspInit+0xf8>)
 8000fe8:	f000 f9cc 	bl	8001384 <HAL_GPIO_Init>
}
 8000fec:	bf00      	nop
 8000fee:	3730      	adds	r7, #48	; 0x30
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40004400 	.word	0x40004400
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40004800 	.word	0x40004800
 8001004:	40020800 	.word	0x40020800

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800100c:	e7fe      	b.n	800100c <NMI_Handler+0x4>

0800100e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <MemManage_Handler+0x4>

0800101a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <UsageFault_Handler+0x4>

08001026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001054:	f000 f890 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <SystemInit+0x20>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <SystemInit+0x20>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001086:	490e      	ldr	r1, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800109c:	4c0b      	ldr	r4, [pc, #44]	; (80010cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010aa:	f7ff ffd7 	bl	800105c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f002 f831 	bl	8003114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fce9 	bl	8000a88 <main>
  bx  lr    
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010c4:	080031a4 	.word	0x080031a4
  ldr r2, =_sbss
 80010c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010cc:	20000134 	.word	0x20000134

080010d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <HAL_Init+0x40>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_Init+0x40>)
 80010ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x40>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f90d 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff feb6 	bl	8000e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023c00 	.word	0x40023c00

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f917 	bl	800136a <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f000 f8ed 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000004 	.word	0x20000004
 8001170:	2000000c 	.word	0x2000000c
 8001174:	20000008 	.word	0x20000008

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	2000000c 	.word	0x2000000c
 800119c:	20000130 	.word	0x20000130

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000130 	.word	0x20000130

080011b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d4:	4013      	ands	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ea:	4a04      	ldr	r2, [pc, #16]	; (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	60d3      	str	r3, [r2, #12]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <__NVIC_GetPriorityGrouping+0x18>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	f003 0307 	and.w	r3, r3, #7
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff47 	bl	80011b8 <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff5c 	bl	8001200 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff8e 	bl	8001270 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5d 	bl	800121c <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffb0 	bl	80012d8 <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	e165      	b.n	800166c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a0:	2201      	movs	r2, #1
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	f040 8154 	bne.w	8001666 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d005      	beq.n	80013d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d130      	bne.n	8001438 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800140c:	2201      	movs	r2, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	091b      	lsrs	r3, r3, #4
 8001422:	f003 0201 	and.w	r2, r3, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b03      	cmp	r3, #3
 8001442:	d017      	beq.n	8001474 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d123      	bne.n	80014c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	08da      	lsrs	r2, r3, #3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3208      	adds	r2, #8
 8001488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	220f      	movs	r2, #15
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	08da      	lsrs	r2, r3, #3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3208      	adds	r2, #8
 80014c2:	69b9      	ldr	r1, [r7, #24]
 80014c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0203 	and.w	r2, r3, #3
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 80ae 	beq.w	8001666 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <HAL_GPIO_Init+0x300>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a5c      	ldr	r2, [pc, #368]	; (8001684 <HAL_GPIO_Init+0x300>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b5a      	ldr	r3, [pc, #360]	; (8001684 <HAL_GPIO_Init+0x300>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001526:	4a58      	ldr	r2, [pc, #352]	; (8001688 <HAL_GPIO_Init+0x304>)
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	3302      	adds	r3, #2
 800152e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	220f      	movs	r2, #15
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4f      	ldr	r2, [pc, #316]	; (800168c <HAL_GPIO_Init+0x308>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d025      	beq.n	800159e <HAL_GPIO_Init+0x21a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4e      	ldr	r2, [pc, #312]	; (8001690 <HAL_GPIO_Init+0x30c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d01f      	beq.n	800159a <HAL_GPIO_Init+0x216>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4d      	ldr	r2, [pc, #308]	; (8001694 <HAL_GPIO_Init+0x310>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_Init+0x212>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4c      	ldr	r2, [pc, #304]	; (8001698 <HAL_GPIO_Init+0x314>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x20e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4b      	ldr	r2, [pc, #300]	; (800169c <HAL_GPIO_Init+0x318>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x20a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4a      	ldr	r2, [pc, #296]	; (80016a0 <HAL_GPIO_Init+0x31c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x206>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a49      	ldr	r2, [pc, #292]	; (80016a4 <HAL_GPIO_Init+0x320>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x202>
 8001582:	2306      	movs	r3, #6
 8001584:	e00c      	b.n	80015a0 <HAL_GPIO_Init+0x21c>
 8001586:	2307      	movs	r3, #7
 8001588:	e00a      	b.n	80015a0 <HAL_GPIO_Init+0x21c>
 800158a:	2305      	movs	r3, #5
 800158c:	e008      	b.n	80015a0 <HAL_GPIO_Init+0x21c>
 800158e:	2304      	movs	r3, #4
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x21c>
 8001592:	2303      	movs	r3, #3
 8001594:	e004      	b.n	80015a0 <HAL_GPIO_Init+0x21c>
 8001596:	2302      	movs	r3, #2
 8001598:	e002      	b.n	80015a0 <HAL_GPIO_Init+0x21c>
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <HAL_GPIO_Init+0x21c>
 800159e:	2300      	movs	r3, #0
 80015a0:	69fa      	ldr	r2, [r7, #28]
 80015a2:	f002 0203 	and.w	r2, r2, #3
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	4093      	lsls	r3, r2
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b0:	4935      	ldr	r1, [pc, #212]	; (8001688 <HAL_GPIO_Init+0x304>)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	3302      	adds	r3, #2
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015be:	4b3a      	ldr	r3, [pc, #232]	; (80016a8 <HAL_GPIO_Init+0x324>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015e2:	4a31      	ldr	r2, [pc, #196]	; (80016a8 <HAL_GPIO_Init+0x324>)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e8:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <HAL_GPIO_Init+0x324>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800160c:	4a26      	ldr	r2, [pc, #152]	; (80016a8 <HAL_GPIO_Init+0x324>)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <HAL_GPIO_Init+0x324>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001636:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <HAL_GPIO_Init+0x324>)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <HAL_GPIO_Init+0x324>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001660:	4a11      	ldr	r2, [pc, #68]	; (80016a8 <HAL_GPIO_Init+0x324>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3301      	adds	r3, #1
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	2b0f      	cmp	r3, #15
 8001670:	f67f ae96 	bls.w	80013a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	40013800 	.word	0x40013800
 800168c:	40020000 	.word	0x40020000
 8001690:	40020400 	.word	0x40020400
 8001694:	40020800 	.word	0x40020800
 8001698:	40020c00 	.word	0x40020c00
 800169c:	40021000 	.word	0x40021000
 80016a0:	40021400 	.word	0x40021400
 80016a4:	40021800 	.word	0x40021800
 80016a8:	40013c00 	.word	0x40013c00

080016ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	887b      	ldrh	r3, [r7, #2]
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	e001      	b.n	80016ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
 80016e8:	4613      	mov	r3, r2
 80016ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ec:	787b      	ldrb	r3, [r7, #1]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f8:	e003      	b.n	8001702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	041a      	lsls	r2, r3, #16
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	619a      	str	r2, [r3, #24]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800170e:	b480      	push	{r7}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001720:	887a      	ldrh	r2, [r7, #2]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4013      	ands	r3, r2
 8001726:	041a      	lsls	r2, r3, #16
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	43d9      	mvns	r1, r3
 800172c:	887b      	ldrh	r3, [r7, #2]
 800172e:	400b      	ands	r3, r1
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	619a      	str	r2, [r3, #24]
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0cc      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d90c      	bls.n	8001780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b65      	ldr	r3, [pc, #404]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b63      	ldr	r3, [pc, #396]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0b8      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001798:	4b59      	ldr	r3, [pc, #356]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a58      	ldr	r2, [pc, #352]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b0:	4b53      	ldr	r3, [pc, #332]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a52      	ldr	r2, [pc, #328]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017bc:	4b50      	ldr	r3, [pc, #320]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	494d      	ldr	r1, [pc, #308]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d044      	beq.n	8001864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d119      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e07f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e06f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e067      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f023 0203 	bic.w	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4934      	ldr	r1, [pc, #208]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7ff fcb4 	bl	80011a0 <HAL_GetTick>
 8001838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	e00a      	b.n	8001852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183c:	f7ff fcb0 	bl	80011a0 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	; 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e04f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 020c 	and.w	r2, r3, #12
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1eb      	bne.n	800183c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d20c      	bcs.n	800188c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e032      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4916      	ldr	r1, [pc, #88]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	490e      	ldr	r1, [pc, #56]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ca:	f000 f855 	bl	8001978 <HAL_RCC_GetSysClockFreq>
 80018ce:	4602      	mov	r2, r0
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	490a      	ldr	r1, [pc, #40]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	5ccb      	ldrb	r3, [r1, r3]
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fc14 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00
 8001900:	40023800 	.word	0x40023800
 8001904:	0800317c 	.word	0x0800317c
 8001908:	20000004 	.word	0x20000004
 800190c:	20000008 	.word	0x20000008

08001910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_RCC_GetHCLKFreq+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800192c:	f7ff fff0 	bl	8001910 <HAL_RCC_GetHCLKFreq>
 8001930:	4602      	mov	r2, r0
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	0a9b      	lsrs	r3, r3, #10
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	4903      	ldr	r1, [pc, #12]	; (800194c <HAL_RCC_GetPCLK1Freq+0x24>)
 800193e:	5ccb      	ldrb	r3, [r1, r3]
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001944:	4618      	mov	r0, r3
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	0800318c 	.word	0x0800318c

08001950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001954:	f7ff ffdc 	bl	8001910 <HAL_RCC_GetHCLKFreq>
 8001958:	4602      	mov	r2, r0
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	0b5b      	lsrs	r3, r3, #13
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	4903      	ldr	r1, [pc, #12]	; (8001974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001966:	5ccb      	ldrb	r3, [r1, r3]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	0800318c 	.word	0x0800318c

08001978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800197c:	b0ae      	sub	sp, #184	; 0xb8
 800197e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800199e:	4bcb      	ldr	r3, [pc, #812]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	f200 8206 	bhi.w	8001db8 <HAL_RCC_GetSysClockFreq+0x440>
 80019ac:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80019ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b2:	bf00      	nop
 80019b4:	080019e9 	.word	0x080019e9
 80019b8:	08001db9 	.word	0x08001db9
 80019bc:	08001db9 	.word	0x08001db9
 80019c0:	08001db9 	.word	0x08001db9
 80019c4:	080019f1 	.word	0x080019f1
 80019c8:	08001db9 	.word	0x08001db9
 80019cc:	08001db9 	.word	0x08001db9
 80019d0:	08001db9 	.word	0x08001db9
 80019d4:	080019f9 	.word	0x080019f9
 80019d8:	08001db9 	.word	0x08001db9
 80019dc:	08001db9 	.word	0x08001db9
 80019e0:	08001db9 	.word	0x08001db9
 80019e4:	08001be9 	.word	0x08001be9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e8:	4bb9      	ldr	r3, [pc, #740]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x358>)
 80019ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80019ee:	e1e7      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019f0:	4bb8      	ldr	r3, [pc, #736]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80019f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019f6:	e1e3      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f8:	4bb4      	ldr	r3, [pc, #720]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a04:	4bb1      	ldr	r3, [pc, #708]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d071      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a10:	4bae      	ldr	r3, [pc, #696]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	099b      	lsrs	r3, r3, #6
 8001a16:	2200      	movs	r2, #0
 8001a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a1c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001a36:	4622      	mov	r2, r4
 8001a38:	462b      	mov	r3, r5
 8001a3a:	f04f 0000 	mov.w	r0, #0
 8001a3e:	f04f 0100 	mov.w	r1, #0
 8001a42:	0159      	lsls	r1, r3, #5
 8001a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a48:	0150      	lsls	r0, r2, #5
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4621      	mov	r1, r4
 8001a50:	1a51      	subs	r1, r2, r1
 8001a52:	6439      	str	r1, [r7, #64]	; 0x40
 8001a54:	4629      	mov	r1, r5
 8001a56:	eb63 0301 	sbc.w	r3, r3, r1
 8001a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001a68:	4649      	mov	r1, r9
 8001a6a:	018b      	lsls	r3, r1, #6
 8001a6c:	4641      	mov	r1, r8
 8001a6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a72:	4641      	mov	r1, r8
 8001a74:	018a      	lsls	r2, r1, #6
 8001a76:	4641      	mov	r1, r8
 8001a78:	1a51      	subs	r1, r2, r1
 8001a7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001a7c:	4649      	mov	r1, r9
 8001a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001a90:	4649      	mov	r1, r9
 8001a92:	00cb      	lsls	r3, r1, #3
 8001a94:	4641      	mov	r1, r8
 8001a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a9a:	4641      	mov	r1, r8
 8001a9c:	00ca      	lsls	r2, r1, #3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4622      	mov	r2, r4
 8001aa6:	189b      	adds	r3, r3, r2
 8001aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8001aaa:	462b      	mov	r3, r5
 8001aac:	460a      	mov	r2, r1
 8001aae:	eb42 0303 	adc.w	r3, r2, r3
 8001ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	024b      	lsls	r3, r1, #9
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aca:	4621      	mov	r1, r4
 8001acc:	024a      	lsls	r2, r1, #9
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001adc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ae0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ae4:	f7fe fb8e 	bl	8000204 <__aeabi_uldivmod>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4613      	mov	r3, r2
 8001aee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001af2:	e067      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af4:	4b75      	ldr	r3, [pc, #468]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	099b      	lsrs	r3, r3, #6
 8001afa:	2200      	movs	r2, #0
 8001afc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b00:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001b04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b0e:	2300      	movs	r3, #0
 8001b10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b12:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001b16:	4622      	mov	r2, r4
 8001b18:	462b      	mov	r3, r5
 8001b1a:	f04f 0000 	mov.w	r0, #0
 8001b1e:	f04f 0100 	mov.w	r1, #0
 8001b22:	0159      	lsls	r1, r3, #5
 8001b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b28:	0150      	lsls	r0, r2, #5
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4621      	mov	r1, r4
 8001b30:	1a51      	subs	r1, r2, r1
 8001b32:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b34:	4629      	mov	r1, r5
 8001b36:	eb63 0301 	sbc.w	r3, r3, r1
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b48:	4649      	mov	r1, r9
 8001b4a:	018b      	lsls	r3, r1, #6
 8001b4c:	4641      	mov	r1, r8
 8001b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b52:	4641      	mov	r1, r8
 8001b54:	018a      	lsls	r2, r1, #6
 8001b56:	4641      	mov	r1, r8
 8001b58:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b6e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b76:	4692      	mov	sl, r2
 8001b78:	469b      	mov	fp, r3
 8001b7a:	4623      	mov	r3, r4
 8001b7c:	eb1a 0303 	adds.w	r3, sl, r3
 8001b80:	623b      	str	r3, [r7, #32]
 8001b82:	462b      	mov	r3, r5
 8001b84:	eb4b 0303 	adc.w	r3, fp, r3
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b96:	4629      	mov	r1, r5
 8001b98:	028b      	lsls	r3, r1, #10
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	028a      	lsls	r2, r1, #10
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bac:	2200      	movs	r2, #0
 8001bae:	673b      	str	r3, [r7, #112]	; 0x70
 8001bb0:	677a      	str	r2, [r7, #116]	; 0x74
 8001bb2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001bb6:	f7fe fb25 	bl	8000204 <__aeabi_uldivmod>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc4:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001bd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001be6:	e0eb      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be8:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bf4:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d06b      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c00:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	2200      	movs	r2, #0
 8001c08:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c12:	663b      	str	r3, [r7, #96]	; 0x60
 8001c14:	2300      	movs	r3, #0
 8001c16:	667b      	str	r3, [r7, #100]	; 0x64
 8001c18:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c1c:	4622      	mov	r2, r4
 8001c1e:	462b      	mov	r3, r5
 8001c20:	f04f 0000 	mov.w	r0, #0
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	0159      	lsls	r1, r3, #5
 8001c2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c2e:	0150      	lsls	r0, r2, #5
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4621      	mov	r1, r4
 8001c36:	1a51      	subs	r1, r2, r1
 8001c38:	61b9      	str	r1, [r7, #24]
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	eb63 0301 	sbc.w	r3, r3, r1
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c4e:	4659      	mov	r1, fp
 8001c50:	018b      	lsls	r3, r1, #6
 8001c52:	4651      	mov	r1, sl
 8001c54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c58:	4651      	mov	r1, sl
 8001c5a:	018a      	lsls	r2, r1, #6
 8001c5c:	4651      	mov	r1, sl
 8001c5e:	ebb2 0801 	subs.w	r8, r2, r1
 8001c62:	4659      	mov	r1, fp
 8001c64:	eb63 0901 	sbc.w	r9, r3, r1
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c7c:	4690      	mov	r8, r2
 8001c7e:	4699      	mov	r9, r3
 8001c80:	4623      	mov	r3, r4
 8001c82:	eb18 0303 	adds.w	r3, r8, r3
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	462b      	mov	r3, r5
 8001c8a:	eb49 0303 	adc.w	r3, r9, r3
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	024b      	lsls	r3, r1, #9
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	024a      	lsls	r2, r1, #9
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8001cb6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001cb8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cbc:	f7fe faa2 	bl	8000204 <__aeabi_uldivmod>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cca:	e065      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x420>
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	00f42400 	.word	0x00f42400
 8001cd4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd8:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	099b      	lsrs	r3, r3, #6
 8001cde:	2200      	movs	r2, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ce8:	653b      	str	r3, [r7, #80]	; 0x50
 8001cea:	2300      	movs	r3, #0
 8001cec:	657b      	str	r3, [r7, #84]	; 0x54
 8001cee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001cf2:	4642      	mov	r2, r8
 8001cf4:	464b      	mov	r3, r9
 8001cf6:	f04f 0000 	mov.w	r0, #0
 8001cfa:	f04f 0100 	mov.w	r1, #0
 8001cfe:	0159      	lsls	r1, r3, #5
 8001d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d04:	0150      	lsls	r0, r2, #5
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4641      	mov	r1, r8
 8001d0c:	1a51      	subs	r1, r2, r1
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	4649      	mov	r1, r9
 8001d12:	eb63 0301 	sbc.w	r3, r3, r1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d24:	4659      	mov	r1, fp
 8001d26:	018b      	lsls	r3, r1, #6
 8001d28:	4651      	mov	r1, sl
 8001d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d2e:	4651      	mov	r1, sl
 8001d30:	018a      	lsls	r2, r1, #6
 8001d32:	4651      	mov	r1, sl
 8001d34:	1a54      	subs	r4, r2, r1
 8001d36:	4659      	mov	r1, fp
 8001d38:	eb63 0501 	sbc.w	r5, r3, r1
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	00eb      	lsls	r3, r5, #3
 8001d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d4a:	00e2      	lsls	r2, r4, #3
 8001d4c:	4614      	mov	r4, r2
 8001d4e:	461d      	mov	r5, r3
 8001d50:	4643      	mov	r3, r8
 8001d52:	18e3      	adds	r3, r4, r3
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	464b      	mov	r3, r9
 8001d58:	eb45 0303 	adc.w	r3, r5, r3
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	028b      	lsls	r3, r1, #10
 8001d6e:	4621      	mov	r1, r4
 8001d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d74:	4621      	mov	r1, r4
 8001d76:	028a      	lsls	r2, r1, #10
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d80:	2200      	movs	r2, #0
 8001d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d84:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d86:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d8a:	f7fe fa3b 	bl	8000204 <__aeabi_uldivmod>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4613      	mov	r3, r2
 8001d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d98:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	0f1b      	lsrs	r3, r3, #28
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001da6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001daa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001db6:	e003      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001dba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001dbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	37b8      	adds	r7, #184	; 0xb8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	00f42400 	.word	0x00f42400

08001dd8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e28d      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8083 	beq.w	8001efe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001df8:	4b94      	ldr	r3, [pc, #592]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d019      	beq.n	8001e38 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e04:	4b91      	ldr	r3, [pc, #580]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d106      	bne.n	8001e1e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e10:	4b8e      	ldr	r3, [pc, #568]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e1c:	d00c      	beq.n	8001e38 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e1e:	4b8b      	ldr	r3, [pc, #556]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	d112      	bne.n	8001e50 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e2a:	4b88      	ldr	r3, [pc, #544]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e36:	d10b      	bne.n	8001e50 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	4b84      	ldr	r3, [pc, #528]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d05b      	beq.n	8001efc <HAL_RCC_OscConfig+0x124>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d157      	bne.n	8001efc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e25a      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e58:	d106      	bne.n	8001e68 <HAL_RCC_OscConfig+0x90>
 8001e5a:	4b7c      	ldr	r3, [pc, #496]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a7b      	ldr	r2, [pc, #492]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e01d      	b.n	8001ea4 <HAL_RCC_OscConfig+0xcc>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0xb4>
 8001e72:	4b76      	ldr	r3, [pc, #472]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a75      	ldr	r2, [pc, #468]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b73      	ldr	r3, [pc, #460]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a72      	ldr	r2, [pc, #456]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCC_OscConfig+0xcc>
 8001e8c:	4b6f      	ldr	r3, [pc, #444]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a6e      	ldr	r2, [pc, #440]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b6c      	ldr	r3, [pc, #432]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a6b      	ldr	r2, [pc, #428]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7ff f978 	bl	80011a0 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff f974 	bl	80011a0 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	; 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e21f      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	4b61      	ldr	r3, [pc, #388]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0xdc>
 8001ed2:	e014      	b.n	8001efe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f964 	bl	80011a0 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff f960 	bl	80011a0 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e20b      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	4b57      	ldr	r3, [pc, #348]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x104>
 8001efa:	e000      	b.n	8001efe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d06f      	beq.n	8001fea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f0a:	4b50      	ldr	r3, [pc, #320]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d017      	beq.n	8001f46 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f16:	4b4d      	ldr	r3, [pc, #308]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d105      	bne.n	8001f2e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f22:	4b4a      	ldr	r3, [pc, #296]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00b      	beq.n	8001f46 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d11c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3a:	4b44      	ldr	r3, [pc, #272]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d116      	bne.n	8001f74 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_RCC_OscConfig+0x186>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d001      	beq.n	8001f5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e1d3      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4937      	ldr	r1, [pc, #220]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f72:	e03a      	b.n	8001fea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d020      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7c:	4b34      	ldr	r3, [pc, #208]	; (8002050 <HAL_RCC_OscConfig+0x278>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff f90d 	bl	80011a0 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7ff f909 	bl	80011a0 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e1b4      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa8:	4b28      	ldr	r3, [pc, #160]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4925      	ldr	r1, [pc, #148]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]
 8001fbc:	e015      	b.n	8001fea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fbe:	4b24      	ldr	r3, [pc, #144]	; (8002050 <HAL_RCC_OscConfig+0x278>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f8ec 	bl	80011a0 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f8e8 	bl	80011a0 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e193      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d036      	beq.n	8002064 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d016      	beq.n	800202c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7ff f8cc 	bl	80011a0 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800200c:	f7ff f8c8 	bl	80011a0 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e173      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8002020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x234>
 800202a:	e01b      	b.n	8002064 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002032:	f7ff f8b5 	bl	80011a0 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	e00e      	b.n	8002058 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203a:	f7ff f8b1 	bl	80011a0 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d907      	bls.n	8002058 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e15c      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
 800204c:	40023800 	.word	0x40023800
 8002050:	42470000 	.word	0x42470000
 8002054:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	4b8a      	ldr	r3, [pc, #552]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800205a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ea      	bne.n	800203a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 8097 	beq.w	80021a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002076:	4b83      	ldr	r3, [pc, #524]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10f      	bne.n	80020a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	4b7f      	ldr	r3, [pc, #508]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a7e      	ldr	r2, [pc, #504]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b7c      	ldr	r3, [pc, #496]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209e:	2301      	movs	r3, #1
 80020a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a2:	4b79      	ldr	r3, [pc, #484]	; (8002288 <HAL_RCC_OscConfig+0x4b0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d118      	bne.n	80020e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ae:	4b76      	ldr	r3, [pc, #472]	; (8002288 <HAL_RCC_OscConfig+0x4b0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a75      	ldr	r2, [pc, #468]	; (8002288 <HAL_RCC_OscConfig+0x4b0>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ba:	f7ff f871 	bl	80011a0 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c2:	f7ff f86d 	bl	80011a0 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e118      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	4b6c      	ldr	r3, [pc, #432]	; (8002288 <HAL_RCC_OscConfig+0x4b0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x31e>
 80020e8:	4b66      	ldr	r3, [pc, #408]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ec:	4a65      	ldr	r2, [pc, #404]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6713      	str	r3, [r2, #112]	; 0x70
 80020f4:	e01c      	b.n	8002130 <HAL_RCC_OscConfig+0x358>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x340>
 80020fe:	4b61      	ldr	r3, [pc, #388]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	4a60      	ldr	r2, [pc, #384]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002104:	f043 0304 	orr.w	r3, r3, #4
 8002108:	6713      	str	r3, [r2, #112]	; 0x70
 800210a:	4b5e      	ldr	r3, [pc, #376]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210e:	4a5d      	ldr	r2, [pc, #372]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6713      	str	r3, [r2, #112]	; 0x70
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0x358>
 8002118:	4b5a      	ldr	r3, [pc, #360]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211c:	4a59      	ldr	r2, [pc, #356]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	6713      	str	r3, [r2, #112]	; 0x70
 8002124:	4b57      	ldr	r3, [pc, #348]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	4a56      	ldr	r2, [pc, #344]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800212a:	f023 0304 	bic.w	r3, r3, #4
 800212e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d015      	beq.n	8002164 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002138:	f7ff f832 	bl	80011a0 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213e:	e00a      	b.n	8002156 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002140:	f7ff f82e 	bl	80011a0 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	; 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e0d7      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002156:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0ee      	beq.n	8002140 <HAL_RCC_OscConfig+0x368>
 8002162:	e014      	b.n	800218e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002164:	f7ff f81c 	bl	80011a0 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800216c:	f7ff f818 	bl	80011a0 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0c1      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002182:	4b40      	ldr	r3, [pc, #256]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ee      	bne.n	800216c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800218e:	7dfb      	ldrb	r3, [r7, #23]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d105      	bne.n	80021a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002194:	4b3b      	ldr	r3, [pc, #236]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	4a3a      	ldr	r2, [pc, #232]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800219a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800219e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80ad 	beq.w	8002304 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021aa:	4b36      	ldr	r3, [pc, #216]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d060      	beq.n	8002278 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d145      	bne.n	800224a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021be:	4b33      	ldr	r3, [pc, #204]	; (800228c <HAL_RCC_OscConfig+0x4b4>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7fe ffec 	bl	80011a0 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021cc:	f7fe ffe8 	bl	80011a0 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e093      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	4b29      	ldr	r3, [pc, #164]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69da      	ldr	r2, [r3, #28]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	019b      	lsls	r3, r3, #6
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	085b      	lsrs	r3, r3, #1
 8002202:	3b01      	subs	r3, #1
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	071b      	lsls	r3, r3, #28
 8002216:	491b      	ldr	r1, [pc, #108]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221c:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x4b4>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7fe ffbd 	bl	80011a0 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222a:	f7fe ffb9 	bl	80011a0 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e064      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x452>
 8002248:	e05c      	b.n	8002304 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_RCC_OscConfig+0x4b4>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7fe ffa6 	bl	80011a0 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe ffa2 	bl	80011a0 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e04d      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x480>
 8002276:	e045      	b.n	8002304 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d107      	bne.n	8002290 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e040      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
 8002284:	40023800 	.word	0x40023800
 8002288:	40007000 	.word	0x40007000
 800228c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002290:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <HAL_RCC_OscConfig+0x538>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d030      	beq.n	8002300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d129      	bne.n	8002300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d122      	bne.n	8002300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022c0:	4013      	ands	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d119      	bne.n	8002300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	085b      	lsrs	r3, r3, #1
 80022d8:	3b01      	subs	r3, #1
 80022da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d10f      	bne.n	8002300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800

08002314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e041      	b.n	80023aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7fe fdc4 	bl	8000ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3304      	adds	r3, #4
 8002350:	4619      	mov	r1, r3
 8002352:	4610      	mov	r0, r2
 8002354:	f000 f95e 	bl	8002614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d001      	beq.n	80023cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e046      	b.n	800245a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a23      	ldr	r2, [pc, #140]	; (8002468 <HAL_TIM_Base_Start+0xb4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d022      	beq.n	8002424 <HAL_TIM_Base_Start+0x70>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e6:	d01d      	beq.n	8002424 <HAL_TIM_Base_Start+0x70>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1f      	ldr	r2, [pc, #124]	; (800246c <HAL_TIM_Base_Start+0xb8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d018      	beq.n	8002424 <HAL_TIM_Base_Start+0x70>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1e      	ldr	r2, [pc, #120]	; (8002470 <HAL_TIM_Base_Start+0xbc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d013      	beq.n	8002424 <HAL_TIM_Base_Start+0x70>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a1c      	ldr	r2, [pc, #112]	; (8002474 <HAL_TIM_Base_Start+0xc0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00e      	beq.n	8002424 <HAL_TIM_Base_Start+0x70>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <HAL_TIM_Base_Start+0xc4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d009      	beq.n	8002424 <HAL_TIM_Base_Start+0x70>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a19      	ldr	r2, [pc, #100]	; (800247c <HAL_TIM_Base_Start+0xc8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_TIM_Base_Start+0x70>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a18      	ldr	r2, [pc, #96]	; (8002480 <HAL_TIM_Base_Start+0xcc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d111      	bne.n	8002448 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b06      	cmp	r3, #6
 8002434:	d010      	beq.n	8002458 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0201 	orr.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002446:	e007      	b.n	8002458 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40010000 	.word	0x40010000
 800246c:	40000400 	.word	0x40000400
 8002470:	40000800 	.word	0x40000800
 8002474:	40000c00 	.word	0x40000c00
 8002478:	40010400 	.word	0x40010400
 800247c:	40014000 	.word	0x40014000
 8002480:	40001800 	.word	0x40001800

08002484 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_TIM_ConfigClockSource+0x1c>
 800249c:	2302      	movs	r3, #2
 800249e:	e0b4      	b.n	800260a <HAL_TIM_ConfigClockSource+0x186>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d8:	d03e      	beq.n	8002558 <HAL_TIM_ConfigClockSource+0xd4>
 80024da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024de:	f200 8087 	bhi.w	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 80024e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e6:	f000 8086 	beq.w	80025f6 <HAL_TIM_ConfigClockSource+0x172>
 80024ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ee:	d87f      	bhi.n	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 80024f0:	2b70      	cmp	r3, #112	; 0x70
 80024f2:	d01a      	beq.n	800252a <HAL_TIM_ConfigClockSource+0xa6>
 80024f4:	2b70      	cmp	r3, #112	; 0x70
 80024f6:	d87b      	bhi.n	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 80024f8:	2b60      	cmp	r3, #96	; 0x60
 80024fa:	d050      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x11a>
 80024fc:	2b60      	cmp	r3, #96	; 0x60
 80024fe:	d877      	bhi.n	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002500:	2b50      	cmp	r3, #80	; 0x50
 8002502:	d03c      	beq.n	800257e <HAL_TIM_ConfigClockSource+0xfa>
 8002504:	2b50      	cmp	r3, #80	; 0x50
 8002506:	d873      	bhi.n	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002508:	2b40      	cmp	r3, #64	; 0x40
 800250a:	d058      	beq.n	80025be <HAL_TIM_ConfigClockSource+0x13a>
 800250c:	2b40      	cmp	r3, #64	; 0x40
 800250e:	d86f      	bhi.n	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002510:	2b30      	cmp	r3, #48	; 0x30
 8002512:	d064      	beq.n	80025de <HAL_TIM_ConfigClockSource+0x15a>
 8002514:	2b30      	cmp	r3, #48	; 0x30
 8002516:	d86b      	bhi.n	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002518:	2b20      	cmp	r3, #32
 800251a:	d060      	beq.n	80025de <HAL_TIM_ConfigClockSource+0x15a>
 800251c:	2b20      	cmp	r3, #32
 800251e:	d867      	bhi.n	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002520:	2b00      	cmp	r3, #0
 8002522:	d05c      	beq.n	80025de <HAL_TIM_ConfigClockSource+0x15a>
 8002524:	2b10      	cmp	r3, #16
 8002526:	d05a      	beq.n	80025de <HAL_TIM_ConfigClockSource+0x15a>
 8002528:	e062      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6899      	ldr	r1, [r3, #8]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f000 f985 	bl	8002848 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800254c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	609a      	str	r2, [r3, #8]
      break;
 8002556:	e04f      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6899      	ldr	r1, [r3, #8]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f000 f96e 	bl	8002848 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800257a:	609a      	str	r2, [r3, #8]
      break;
 800257c:	e03c      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6859      	ldr	r1, [r3, #4]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	461a      	mov	r2, r3
 800258c:	f000 f8e2 	bl	8002754 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2150      	movs	r1, #80	; 0x50
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f93b 	bl	8002812 <TIM_ITRx_SetConfig>
      break;
 800259c:	e02c      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6859      	ldr	r1, [r3, #4]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	461a      	mov	r2, r3
 80025ac:	f000 f901 	bl	80027b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2160      	movs	r1, #96	; 0x60
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f92b 	bl	8002812 <TIM_ITRx_SetConfig>
      break;
 80025bc:	e01c      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	6859      	ldr	r1, [r3, #4]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	461a      	mov	r2, r3
 80025cc:	f000 f8c2 	bl	8002754 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2140      	movs	r1, #64	; 0x40
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f91b 	bl	8002812 <TIM_ITRx_SetConfig>
      break;
 80025dc:	e00c      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4619      	mov	r1, r3
 80025e8:	4610      	mov	r0, r2
 80025ea:	f000 f912 	bl	8002812 <TIM_ITRx_SetConfig>
      break;
 80025ee:	e003      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
      break;
 80025f4:	e000      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a40      	ldr	r2, [pc, #256]	; (8002728 <TIM_Base_SetConfig+0x114>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d013      	beq.n	8002654 <TIM_Base_SetConfig+0x40>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002632:	d00f      	beq.n	8002654 <TIM_Base_SetConfig+0x40>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a3d      	ldr	r2, [pc, #244]	; (800272c <TIM_Base_SetConfig+0x118>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d00b      	beq.n	8002654 <TIM_Base_SetConfig+0x40>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a3c      	ldr	r2, [pc, #240]	; (8002730 <TIM_Base_SetConfig+0x11c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d007      	beq.n	8002654 <TIM_Base_SetConfig+0x40>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a3b      	ldr	r2, [pc, #236]	; (8002734 <TIM_Base_SetConfig+0x120>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d003      	beq.n	8002654 <TIM_Base_SetConfig+0x40>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a3a      	ldr	r2, [pc, #232]	; (8002738 <TIM_Base_SetConfig+0x124>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d108      	bne.n	8002666 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a2f      	ldr	r2, [pc, #188]	; (8002728 <TIM_Base_SetConfig+0x114>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d02b      	beq.n	80026c6 <TIM_Base_SetConfig+0xb2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002674:	d027      	beq.n	80026c6 <TIM_Base_SetConfig+0xb2>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a2c      	ldr	r2, [pc, #176]	; (800272c <TIM_Base_SetConfig+0x118>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d023      	beq.n	80026c6 <TIM_Base_SetConfig+0xb2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a2b      	ldr	r2, [pc, #172]	; (8002730 <TIM_Base_SetConfig+0x11c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01f      	beq.n	80026c6 <TIM_Base_SetConfig+0xb2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a2a      	ldr	r2, [pc, #168]	; (8002734 <TIM_Base_SetConfig+0x120>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01b      	beq.n	80026c6 <TIM_Base_SetConfig+0xb2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a29      	ldr	r2, [pc, #164]	; (8002738 <TIM_Base_SetConfig+0x124>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d017      	beq.n	80026c6 <TIM_Base_SetConfig+0xb2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a28      	ldr	r2, [pc, #160]	; (800273c <TIM_Base_SetConfig+0x128>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <TIM_Base_SetConfig+0xb2>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a27      	ldr	r2, [pc, #156]	; (8002740 <TIM_Base_SetConfig+0x12c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00f      	beq.n	80026c6 <TIM_Base_SetConfig+0xb2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a26      	ldr	r2, [pc, #152]	; (8002744 <TIM_Base_SetConfig+0x130>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00b      	beq.n	80026c6 <TIM_Base_SetConfig+0xb2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a25      	ldr	r2, [pc, #148]	; (8002748 <TIM_Base_SetConfig+0x134>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <TIM_Base_SetConfig+0xb2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a24      	ldr	r2, [pc, #144]	; (800274c <TIM_Base_SetConfig+0x138>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d003      	beq.n	80026c6 <TIM_Base_SetConfig+0xb2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a23      	ldr	r2, [pc, #140]	; (8002750 <TIM_Base_SetConfig+0x13c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d108      	bne.n	80026d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <TIM_Base_SetConfig+0x114>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d003      	beq.n	800270c <TIM_Base_SetConfig+0xf8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a0c      	ldr	r2, [pc, #48]	; (8002738 <TIM_Base_SetConfig+0x124>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d103      	bne.n	8002714 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	615a      	str	r2, [r3, #20]
}
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40010000 	.word	0x40010000
 800272c:	40000400 	.word	0x40000400
 8002730:	40000800 	.word	0x40000800
 8002734:	40000c00 	.word	0x40000c00
 8002738:	40010400 	.word	0x40010400
 800273c:	40014000 	.word	0x40014000
 8002740:	40014400 	.word	0x40014400
 8002744:	40014800 	.word	0x40014800
 8002748:	40001800 	.word	0x40001800
 800274c:	40001c00 	.word	0x40001c00
 8002750:	40002000 	.word	0x40002000

08002754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	f023 0201 	bic.w	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800277e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f023 030a 	bic.w	r3, r3, #10
 8002790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4313      	orrs	r3, r2
 8002798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	621a      	str	r2, [r3, #32]
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b087      	sub	sp, #28
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	f023 0210 	bic.w	r2, r3, #16
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	031b      	lsls	r3, r3, #12
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	621a      	str	r2, [r3, #32]
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002828:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	f043 0307 	orr.w	r3, r3, #7
 8002834:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	609a      	str	r2, [r3, #8]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002862:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	021a      	lsls	r2, r3, #8
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	431a      	orrs	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4313      	orrs	r3, r2
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	609a      	str	r2, [r3, #8]
}
 800287c:	bf00      	nop
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800289c:	2302      	movs	r3, #2
 800289e:	e05a      	b.n	8002956 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a21      	ldr	r2, [pc, #132]	; (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d022      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ec:	d01d      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1d      	ldr	r2, [pc, #116]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d018      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1b      	ldr	r2, [pc, #108]	; (800296c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1a      	ldr	r2, [pc, #104]	; (8002970 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d00e      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d009      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a17      	ldr	r2, [pc, #92]	; (8002978 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d004      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a15      	ldr	r2, [pc, #84]	; (800297c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d10c      	bne.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002930:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	4313      	orrs	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40010000 	.word	0x40010000
 8002968:	40000400 	.word	0x40000400
 800296c:	40000800 	.word	0x40000800
 8002970:	40000c00 	.word	0x40000c00
 8002974:	40010400 	.word	0x40010400
 8002978:	40014000 	.word	0x40014000
 800297c:	40001800 	.word	0x40001800

08002980 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e03f      	b.n	8002a12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fab0 	bl	8000f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2224      	movs	r2, #36	; 0x24
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f929 	bl	8002c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b08a      	sub	sp, #40	; 0x28
 8002a1e:	af02      	add	r7, sp, #8
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	603b      	str	r3, [r7, #0]
 8002a26:	4613      	mov	r3, r2
 8002a28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	d17c      	bne.n	8002b34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_UART_Transmit+0x2c>
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e075      	b.n	8002b36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_UART_Transmit+0x3e>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e06e      	b.n	8002b36 <HAL_UART_Transmit+0x11c>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2221      	movs	r2, #33	; 0x21
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a6e:	f7fe fb97 	bl	80011a0 <HAL_GetTick>
 8002a72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	88fa      	ldrh	r2, [r7, #6]
 8002a78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	88fa      	ldrh	r2, [r7, #6]
 8002a7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a88:	d108      	bne.n	8002a9c <HAL_UART_Transmit+0x82>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d104      	bne.n	8002a9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	e003      	b.n	8002aa4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002aac:	e02a      	b.n	8002b04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2180      	movs	r1, #128	; 0x80
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f840 	bl	8002b3e <UART_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e036      	b.n	8002b36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10b      	bne.n	8002ae6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002adc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	e007      	b.n	8002af6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	781a      	ldrb	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	3301      	adds	r3, #1
 8002af4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1cf      	bne.n	8002aae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2200      	movs	r2, #0
 8002b16:	2140      	movs	r1, #64	; 0x40
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f810 	bl	8002b3e <UART_WaitOnFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e006      	b.n	8002b36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	e000      	b.n	8002b36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b34:	2302      	movs	r3, #2
  }
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b090      	sub	sp, #64	; 0x40
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b4e:	e050      	b.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b56:	d04c      	beq.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x30>
 8002b5e:	f7fe fb1f 	bl	80011a0 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d241      	bcs.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	330c      	adds	r3, #12
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b78:	e853 3f00 	ldrex	r3, [r3]
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	330c      	adds	r3, #12
 8002b8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b8e:	637a      	str	r2, [r7, #52]	; 0x34
 8002b90:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b96:	e841 2300 	strex	r3, r2, [r1]
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1e5      	bne.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3314      	adds	r3, #20
 8002ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	e853 3f00 	ldrex	r3, [r3]
 8002bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3314      	adds	r3, #20
 8002bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bc2:	623a      	str	r2, [r7, #32]
 8002bc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc6:	69f9      	ldr	r1, [r7, #28]
 8002bc8:	6a3a      	ldr	r2, [r7, #32]
 8002bca:	e841 2300 	strex	r3, r2, [r1]
 8002bce:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e5      	bne.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e00f      	b.n	8002c12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d09f      	beq.n	8002b50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3740      	adds	r7, #64	; 0x40
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c20:	b0c0      	sub	sp, #256	; 0x100
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c38:	68d9      	ldr	r1, [r3, #12]
 8002c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	ea40 0301 	orr.w	r3, r0, r1
 8002c44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c74:	f021 010c 	bic.w	r1, r1, #12
 8002c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c82:	430b      	orrs	r3, r1
 8002c84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c96:	6999      	ldr	r1, [r3, #24]
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	ea40 0301 	orr.w	r3, r0, r1
 8002ca2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b8f      	ldr	r3, [pc, #572]	; (8002ee8 <UART_SetConfig+0x2cc>)
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d005      	beq.n	8002cbc <UART_SetConfig+0xa0>
 8002cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4b8d      	ldr	r3, [pc, #564]	; (8002eec <UART_SetConfig+0x2d0>)
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d104      	bne.n	8002cc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cbc:	f7fe fe48 	bl	8001950 <HAL_RCC_GetPCLK2Freq>
 8002cc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cc4:	e003      	b.n	8002cce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cc6:	f7fe fe2f 	bl	8001928 <HAL_RCC_GetPCLK1Freq>
 8002cca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd8:	f040 810c 	bne.w	8002ef4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ce6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002cee:	4622      	mov	r2, r4
 8002cf0:	462b      	mov	r3, r5
 8002cf2:	1891      	adds	r1, r2, r2
 8002cf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cf6:	415b      	adcs	r3, r3
 8002cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cfe:	4621      	mov	r1, r4
 8002d00:	eb12 0801 	adds.w	r8, r2, r1
 8002d04:	4629      	mov	r1, r5
 8002d06:	eb43 0901 	adc.w	r9, r3, r1
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d1e:	4690      	mov	r8, r2
 8002d20:	4699      	mov	r9, r3
 8002d22:	4623      	mov	r3, r4
 8002d24:	eb18 0303 	adds.w	r3, r8, r3
 8002d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d2c:	462b      	mov	r3, r5
 8002d2e:	eb49 0303 	adc.w	r3, r9, r3
 8002d32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	18db      	adds	r3, r3, r3
 8002d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d50:	4613      	mov	r3, r2
 8002d52:	eb42 0303 	adc.w	r3, r2, r3
 8002d56:	657b      	str	r3, [r7, #84]	; 0x54
 8002d58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d60:	f7fd fa50 	bl	8000204 <__aeabi_uldivmod>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4b61      	ldr	r3, [pc, #388]	; (8002ef0 <UART_SetConfig+0x2d4>)
 8002d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	011c      	lsls	r4, r3, #4
 8002d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d76:	2200      	movs	r2, #0
 8002d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d84:	4642      	mov	r2, r8
 8002d86:	464b      	mov	r3, r9
 8002d88:	1891      	adds	r1, r2, r2
 8002d8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d8c:	415b      	adcs	r3, r3
 8002d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d94:	4641      	mov	r1, r8
 8002d96:	eb12 0a01 	adds.w	sl, r2, r1
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	eb43 0b01 	adc.w	fp, r3, r1
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002db4:	4692      	mov	sl, r2
 8002db6:	469b      	mov	fp, r3
 8002db8:	4643      	mov	r3, r8
 8002dba:	eb1a 0303 	adds.w	r3, sl, r3
 8002dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dc2:	464b      	mov	r3, r9
 8002dc4:	eb4b 0303 	adc.w	r3, fp, r3
 8002dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ddc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002de0:	460b      	mov	r3, r1
 8002de2:	18db      	adds	r3, r3, r3
 8002de4:	643b      	str	r3, [r7, #64]	; 0x40
 8002de6:	4613      	mov	r3, r2
 8002de8:	eb42 0303 	adc.w	r3, r2, r3
 8002dec:	647b      	str	r3, [r7, #68]	; 0x44
 8002dee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002df2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002df6:	f7fd fa05 	bl	8000204 <__aeabi_uldivmod>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <UART_SetConfig+0x2d4>)
 8002e02:	fba3 2301 	umull	r2, r3, r3, r1
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2264      	movs	r2, #100	; 0x64
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	1acb      	subs	r3, r1, r3
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e16:	4b36      	ldr	r3, [pc, #216]	; (8002ef0 <UART_SetConfig+0x2d4>)
 8002e18:	fba3 2302 	umull	r2, r3, r3, r2
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e24:	441c      	add	r4, r3
 8002e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e38:	4642      	mov	r2, r8
 8002e3a:	464b      	mov	r3, r9
 8002e3c:	1891      	adds	r1, r2, r2
 8002e3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e40:	415b      	adcs	r3, r3
 8002e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e48:	4641      	mov	r1, r8
 8002e4a:	1851      	adds	r1, r2, r1
 8002e4c:	6339      	str	r1, [r7, #48]	; 0x30
 8002e4e:	4649      	mov	r1, r9
 8002e50:	414b      	adcs	r3, r1
 8002e52:	637b      	str	r3, [r7, #52]	; 0x34
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e60:	4659      	mov	r1, fp
 8002e62:	00cb      	lsls	r3, r1, #3
 8002e64:	4651      	mov	r1, sl
 8002e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e6a:	4651      	mov	r1, sl
 8002e6c:	00ca      	lsls	r2, r1, #3
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	4603      	mov	r3, r0
 8002e74:	4642      	mov	r2, r8
 8002e76:	189b      	adds	r3, r3, r2
 8002e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	460a      	mov	r2, r1
 8002e80:	eb42 0303 	adc.w	r3, r2, r3
 8002e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	18db      	adds	r3, r3, r3
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	eb42 0303 	adc.w	r3, r2, r3
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002eb2:	f7fd f9a7 	bl	8000204 <__aeabi_uldivmod>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <UART_SetConfig+0x2d4>)
 8002ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	2164      	movs	r1, #100	; 0x64
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	3332      	adds	r3, #50	; 0x32
 8002ece:	4a08      	ldr	r2, [pc, #32]	; (8002ef0 <UART_SetConfig+0x2d4>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	f003 0207 	and.w	r2, r3, #7
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4422      	add	r2, r4
 8002ee2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ee4:	e106      	b.n	80030f4 <UART_SetConfig+0x4d8>
 8002ee6:	bf00      	nop
 8002ee8:	40011000 	.word	0x40011000
 8002eec:	40011400 	.word	0x40011400
 8002ef0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002efe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f06:	4642      	mov	r2, r8
 8002f08:	464b      	mov	r3, r9
 8002f0a:	1891      	adds	r1, r2, r2
 8002f0c:	6239      	str	r1, [r7, #32]
 8002f0e:	415b      	adcs	r3, r3
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
 8002f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f16:	4641      	mov	r1, r8
 8002f18:	1854      	adds	r4, r2, r1
 8002f1a:	4649      	mov	r1, r9
 8002f1c:	eb43 0501 	adc.w	r5, r3, r1
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	00eb      	lsls	r3, r5, #3
 8002f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f2e:	00e2      	lsls	r2, r4, #3
 8002f30:	4614      	mov	r4, r2
 8002f32:	461d      	mov	r5, r3
 8002f34:	4643      	mov	r3, r8
 8002f36:	18e3      	adds	r3, r4, r3
 8002f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f3c:	464b      	mov	r3, r9
 8002f3e:	eb45 0303 	adc.w	r3, r5, r3
 8002f42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f62:	4629      	mov	r1, r5
 8002f64:	008b      	lsls	r3, r1, #2
 8002f66:	4621      	mov	r1, r4
 8002f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	008a      	lsls	r2, r1, #2
 8002f70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f74:	f7fd f946 	bl	8000204 <__aeabi_uldivmod>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4b60      	ldr	r3, [pc, #384]	; (8003100 <UART_SetConfig+0x4e4>)
 8002f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	011c      	lsls	r4, r3, #4
 8002f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f98:	4642      	mov	r2, r8
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	1891      	adds	r1, r2, r2
 8002f9e:	61b9      	str	r1, [r7, #24]
 8002fa0:	415b      	adcs	r3, r3
 8002fa2:	61fb      	str	r3, [r7, #28]
 8002fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fa8:	4641      	mov	r1, r8
 8002faa:	1851      	adds	r1, r2, r1
 8002fac:	6139      	str	r1, [r7, #16]
 8002fae:	4649      	mov	r1, r9
 8002fb0:	414b      	adcs	r3, r1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fc0:	4659      	mov	r1, fp
 8002fc2:	00cb      	lsls	r3, r1, #3
 8002fc4:	4651      	mov	r1, sl
 8002fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fca:	4651      	mov	r1, sl
 8002fcc:	00ca      	lsls	r2, r1, #3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4642      	mov	r2, r8
 8002fd6:	189b      	adds	r3, r3, r2
 8002fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fdc:	464b      	mov	r3, r9
 8002fde:	460a      	mov	r2, r1
 8002fe0:	eb42 0303 	adc.w	r3, r2, r3
 8002fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ff2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003000:	4649      	mov	r1, r9
 8003002:	008b      	lsls	r3, r1, #2
 8003004:	4641      	mov	r1, r8
 8003006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800300a:	4641      	mov	r1, r8
 800300c:	008a      	lsls	r2, r1, #2
 800300e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003012:	f7fd f8f7 	bl	8000204 <__aeabi_uldivmod>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4611      	mov	r1, r2
 800301c:	4b38      	ldr	r3, [pc, #224]	; (8003100 <UART_SetConfig+0x4e4>)
 800301e:	fba3 2301 	umull	r2, r3, r3, r1
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	2264      	movs	r2, #100	; 0x64
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	1acb      	subs	r3, r1, r3
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	3332      	adds	r3, #50	; 0x32
 8003030:	4a33      	ldr	r2, [pc, #204]	; (8003100 <UART_SetConfig+0x4e4>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800303c:	441c      	add	r4, r3
 800303e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003042:	2200      	movs	r2, #0
 8003044:	673b      	str	r3, [r7, #112]	; 0x70
 8003046:	677a      	str	r2, [r7, #116]	; 0x74
 8003048:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800304c:	4642      	mov	r2, r8
 800304e:	464b      	mov	r3, r9
 8003050:	1891      	adds	r1, r2, r2
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	415b      	adcs	r3, r3
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800305c:	4641      	mov	r1, r8
 800305e:	1851      	adds	r1, r2, r1
 8003060:	6039      	str	r1, [r7, #0]
 8003062:	4649      	mov	r1, r9
 8003064:	414b      	adcs	r3, r1
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003074:	4659      	mov	r1, fp
 8003076:	00cb      	lsls	r3, r1, #3
 8003078:	4651      	mov	r1, sl
 800307a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800307e:	4651      	mov	r1, sl
 8003080:	00ca      	lsls	r2, r1, #3
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	4603      	mov	r3, r0
 8003088:	4642      	mov	r2, r8
 800308a:	189b      	adds	r3, r3, r2
 800308c:	66bb      	str	r3, [r7, #104]	; 0x68
 800308e:	464b      	mov	r3, r9
 8003090:	460a      	mov	r2, r1
 8003092:	eb42 0303 	adc.w	r3, r2, r3
 8003096:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	663b      	str	r3, [r7, #96]	; 0x60
 80030a2:	667a      	str	r2, [r7, #100]	; 0x64
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030b0:	4649      	mov	r1, r9
 80030b2:	008b      	lsls	r3, r1, #2
 80030b4:	4641      	mov	r1, r8
 80030b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ba:	4641      	mov	r1, r8
 80030bc:	008a      	lsls	r2, r1, #2
 80030be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030c2:	f7fd f89f 	bl	8000204 <__aeabi_uldivmod>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <UART_SetConfig+0x4e4>)
 80030cc:	fba3 1302 	umull	r1, r3, r3, r2
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	2164      	movs	r1, #100	; 0x64
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	3332      	adds	r3, #50	; 0x32
 80030de:	4a08      	ldr	r2, [pc, #32]	; (8003100 <UART_SetConfig+0x4e4>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	f003 020f 	and.w	r2, r3, #15
 80030ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4422      	add	r2, r4
 80030f2:	609a      	str	r2, [r3, #8]
}
 80030f4:	bf00      	nop
 80030f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030fa:	46bd      	mov	sp, r7
 80030fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003100:	51eb851f 	.word	0x51eb851f

08003104 <memset>:
 8003104:	4402      	add	r2, r0
 8003106:	4603      	mov	r3, r0
 8003108:	4293      	cmp	r3, r2
 800310a:	d100      	bne.n	800310e <memset+0xa>
 800310c:	4770      	bx	lr
 800310e:	f803 1b01 	strb.w	r1, [r3], #1
 8003112:	e7f9      	b.n	8003108 <memset+0x4>

08003114 <__libc_init_array>:
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	4d0d      	ldr	r5, [pc, #52]	; (800314c <__libc_init_array+0x38>)
 8003118:	4c0d      	ldr	r4, [pc, #52]	; (8003150 <__libc_init_array+0x3c>)
 800311a:	1b64      	subs	r4, r4, r5
 800311c:	10a4      	asrs	r4, r4, #2
 800311e:	2600      	movs	r6, #0
 8003120:	42a6      	cmp	r6, r4
 8003122:	d109      	bne.n	8003138 <__libc_init_array+0x24>
 8003124:	4d0b      	ldr	r5, [pc, #44]	; (8003154 <__libc_init_array+0x40>)
 8003126:	4c0c      	ldr	r4, [pc, #48]	; (8003158 <__libc_init_array+0x44>)
 8003128:	f000 f818 	bl	800315c <_init>
 800312c:	1b64      	subs	r4, r4, r5
 800312e:	10a4      	asrs	r4, r4, #2
 8003130:	2600      	movs	r6, #0
 8003132:	42a6      	cmp	r6, r4
 8003134:	d105      	bne.n	8003142 <__libc_init_array+0x2e>
 8003136:	bd70      	pop	{r4, r5, r6, pc}
 8003138:	f855 3b04 	ldr.w	r3, [r5], #4
 800313c:	4798      	blx	r3
 800313e:	3601      	adds	r6, #1
 8003140:	e7ee      	b.n	8003120 <__libc_init_array+0xc>
 8003142:	f855 3b04 	ldr.w	r3, [r5], #4
 8003146:	4798      	blx	r3
 8003148:	3601      	adds	r6, #1
 800314a:	e7f2      	b.n	8003132 <__libc_init_array+0x1e>
 800314c:	0800319c 	.word	0x0800319c
 8003150:	0800319c 	.word	0x0800319c
 8003154:	0800319c 	.word	0x0800319c
 8003158:	080031a0 	.word	0x080031a0

0800315c <_init>:
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315e:	bf00      	nop
 8003160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003162:	bc08      	pop	{r3}
 8003164:	469e      	mov	lr, r3
 8003166:	4770      	bx	lr

08003168 <_fini>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	bf00      	nop
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr
